<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Constanze&#39;s Machine</title>
      <link href="/2019/11/03/Constanze&#39;s%20Machine/"/>
      <url>/2019/11/03/Constanze&#39;s%20Machine/</url>
      
        <content type="html"><![CDATA[<h4 id="思维DP"><a href="#思维DP" class="headerlink" title="思维DP"></a>思维DP</h4><a id="more"></a><p>代码解释的很清楚了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">string</span> S;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; S;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : S)</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'w'</span> || c == <span class="string">'m'</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> N = S.size();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dp(N + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//没有字符串或者字符串只有一个的时候仅有一种情况</span></span><br><span class="line"><span class="comment">//我们分析可以得到递推式为：现在的这种状态可以不变或者仅仅变后两个可以得到 </span></span><br><span class="line"> <span class="comment">//如果我们不变，那么我们的答案就是dp[i-1]</span></span><br><span class="line"><span class="comment">//如果我们发生改变那么我们的答案就是dp[i-2](我们每次改变都仅仅改变后两位，所以方案数就是前面</span></span><br><span class="line"><span class="comment">//dp[i-2]+dp[i-1]</span></span><br><span class="line"><span class="comment">//然后我们以此递推过去就可以得到答案。 </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> len = <span class="number">2</span>; len &lt;= N; len++)</span><br><span class="line">        <span class="keyword">if</span> (S[len - <span class="number">2</span>] == S[len - <span class="number">1</span>] &amp;&amp; (S[len - <span class="number">1</span>] == <span class="string">'u'</span> || S[len - <span class="number">1</span>] == <span class="string">'n'</span>))</span><br><span class="line">            dp[len] = (dp[len - <span class="number">1</span>] + dp[len - <span class="number">2</span>]) % MOD;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[len] = dp[len - <span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[N] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明年一定拿牌子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019CCPC哈尔滨-Ivan the Fool and the Probability Theory</title>
      <link href="/2019/11/03/2019CCPC%E5%93%88%E5%B0%94%E6%BB%A8-Interesting%20Permutation/"/>
      <url>/2019/11/03/2019CCPC%E5%93%88%E5%B0%94%E6%BB%A8-Interesting%20Permutation/</url>
      
        <content type="html"><![CDATA[<h4 id="CCPC2019哈尔滨I题"><a href="#CCPC2019哈尔滨I题" class="headerlink" title="CCPC2019哈尔滨I题"></a>CCPC2019哈尔滨I题</h4><a id="more"></a><p>读完题目我可以知道，如果出现h[i]&gt;h[i-1]的时候第i个位置就是第i大或者第i小的数，所以我们中间的空位就可以来填充数字，并且如果出现h[i]=h[i-1]的话就会占用一个空位。因为考虑到第i个位置是最大或者最小的数，所以答案就需要乘以2。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N (100010)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MD (1000000007)</span></span><br><span class="line"><span class="keyword">int</span> h[N], fac[N] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;, inv[N] = &#123;<span class="number">1</span>, <span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">fac[i] = <span class="number">1l</span>l * fac[i<span class="number">-1</span>] * i % MD;</span><br><span class="line">inv[i] = <span class="number">1l</span>l * (MD - MD / i) * inv[MD % i] % MD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; N; ++i) &#123;</span><br><span class="line">inv[i] = <span class="number">1l</span>l * inv[i<span class="number">-1</span>] * inv[i] % MD;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = <span class="number">1l</span>l * a * a % mod) &#123;</span><br><span class="line"><span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = <span class="number">1l</span>l * res * a % mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line">pre();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, h+i);</span><br><span class="line">&#125;</span><br><span class="line">h[n+<span class="number">1</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> ans = h[<span class="number">1</span>] == <span class="number">0</span> &amp;&amp; h[n] == n<span class="number">-1</span>, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (n &gt;= <span class="number">2</span> &amp;&amp; h[<span class="number">2</span>] == <span class="number">0</span>) ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, i = <span class="number">-1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line"><span class="keyword">if</span> (h[j] &lt; h[j<span class="number">-1</span>] || h[j] &gt; n<span class="number">-1</span>) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (h[j] != h[j+<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="keyword">if</span> (i != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h[j] - i &lt; <span class="number">0</span> || h[j] - j + <span class="number">1</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">1l</span>l * ans * fac[h[j]-i] % MD * inv[h[j]-j+<span class="number">1</span>] % MD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (j != n) cnt += <span class="number">1</span>;</span><br><span class="line">i = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ans = <span class="number">1l</span>l * ans * <span class="built_in">pow</span>(<span class="number">2</span>, cnt, MD) % MD;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种写法，也是用了计数原理来写的。首先特判 h1 ！= 0,hi ≥ n 以及 hi &gt; hi+1 的情况，这些情况都是无解。 然后依次考虑 h2,h3,…,hn。如果 hi &gt; hi−1，那么 ai 既可以是前 i 个数的最大值，也可以 是前 i 个数的最小值，将答案乘以 2，同时新增中间 hi−hi−1−1 个空位没填；如果 hi = hi−1， 那么需要消耗一个空位，并将答案乘以空位数。在这里我们要明白当我们hi=hi-1的时候我们通过选择元素来排位置消耗空位的时候在找到下一个第i大的数（或者第i小的数）之前一定能够把空位消耗完。之所以为什么hi&gt;hi-1的时候要乘以2是因为有两种可能（第i大或者第i小）<br><strong>我们相当于是找空位，插空位两种操作循环进行。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3,<span class="meta-string">"Ofast"</span>,<span class="meta-string">"inline"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">10005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">ll h[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">bool</span> flag=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;h[i]);</span><br><span class="line">            <span class="keyword">if</span>(h[i]&gt;=n || h[i]&lt;h[i<span class="number">-1</span>]) flag=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(h[<span class="number">1</span>]!=<span class="number">0</span>) flag=<span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ll cnt=<span class="number">0</span>;</span><br><span class="line">        ll ans=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(h[i]&gt;h[i<span class="number">-1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                ans*=<span class="number">2</span>;</span><br><span class="line">                ans%=mod;</span><br><span class="line">                cnt+=(h[i]-h[i<span class="number">-1</span>]<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                ans*=cnt;</span><br><span class="line">                ans%=mod;</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明年一定拿牌子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Salary Changing</title>
      <link href="/2019/11/01/Salary%20Changing/"/>
      <url>/2019/11/01/Salary%20Changing/</url>
      
        <content type="html"><![CDATA[<h3 id="思维题，二分答案"><a href="#思维题，二分答案" class="headerlink" title="思维题，二分答案"></a>思维题，二分答案</h3><a id="more"></a><p>思路很清晰了，直接上答案了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> MAX_N = <span class="number">2E5</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">LL s;</span><br><span class="line"><span class="keyword">int</span> l[MAX_N], r[MAX_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bin_m</span><span class="params">(LL n,LL s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL L=<span class="number">1</span>,R=<span class="number">1E9</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,l+i,r+i);</span><br><span class="line">    LL low=accumulate(l,l+n,<span class="number">0L</span>L);</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)&#123;</span><br><span class="line">        <span class="keyword">int</span> x=(L+R+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(r[i]&gt;=x)&#123;</span><br><span class="line">                g.push_back(max(<span class="number">0</span>,x-l[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(g.begin(),g.end());</span><br><span class="line">        <span class="keyword">if</span>(g.size()&gt;=m&amp;&amp;accumulate(g.begin(),g.begin()+m,<span class="number">0L</span>L)+low&lt;=s)</span><br><span class="line">            L=x;</span><br><span class="line">        <span class="keyword">else</span> R=x<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,L);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t ; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        LL n,s;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;s;</span><br><span class="line">        bin_m(n,s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明年一定拿牌子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ivan the Fool and the Probability Theory</title>
      <link href="/2019/11/01/Ivan%20the%20Fool%20and%20the%20Probability%20Theory/"/>
      <url>/2019/11/01/Ivan%20the%20Fool%20and%20the%20Probability%20Theory/</url>
      
        <content type="html"><![CDATA[<h3 id="dp-思维题"><a href="#dp-思维题" class="headerlink" title="dp+思维题"></a>dp+思维题</h3><a id="more"></a><p>当我们只考虑一维的时候显然我们可以发现递推式为f3=f2+f1。<br>再拓展至多维，仔细一想不难发现，当第一行存在两个相同的颜色连在一起的情况时剩下所有的方块只有一种排列方式，也就是说只要第一排确定了且第一排存在两个相同的连在一起的方块，这种情况就只有一种排列方式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">ll f[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;m)</span><br><span class="line">    &#123;</span><br><span class="line">        swap(n,m);</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>]=<span class="number">2</span>,f[<span class="number">2</span>]=<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">        f[i]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;(f[n]+f[m]<span class="number">-2</span>)%mod&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明年一定拿牌子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1383 高级打字机</title>
      <link href="/2019/10/28/P1383%20%E9%AB%98%E7%BA%A7%E6%89%93%E5%AD%97%E6%9C%BA/"/>
      <url>/2019/10/28/P1383%20%E9%AB%98%E7%BA%A7%E6%89%93%E5%AD%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="主席树的递归写法，应该算彻底理解主席树了把？"><a href="#主席树的递归写法，应该算彻底理解主席树了把？" class="headerlink" title="主席树的递归写法，应该算彻底理解主席树了把？"></a>主席树的递归写法，应该算彻底理解主席树了把？</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lson,rson,date;</span><br><span class="line">&#125;node[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> tot,len[maxn],T[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> val[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    node[rt].date=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> rt;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    node[rt].lson=build(l,mid);</span><br><span class="line">    node[rt].rson=build(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k,<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    node[rt].lson=node[pre].lson,node[rt].rson=node[pre].rson;node[rt].date=node[pre].date+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=k) node[rt].lson=update(node[pre].lson,l,mid,k,c);</span><br><span class="line">    <span class="keyword">else</span> node[rt].rson=update(node[pre].rson,mid+<span class="number">1</span>,r,k,c);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lp=node[rt].lson;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(node[lp].date&gt;=k) <span class="keyword">return</span> query(node[rt].lson,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node[lp].date&lt;k) <span class="keyword">return</span> query(node[rt].rson,mid+<span class="number">1</span>,r,k-node[lp].date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> n=t;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len1=<span class="number">0</span>;</span><br><span class="line">    T[<span class="number">0</span>]=build(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">char</span> op; <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'T'</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp; <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">            cnt++;</span><br><span class="line">            val[++len1]=tmp;</span><br><span class="line">            T[cnt]=update(T[cnt<span class="number">-1</span>],<span class="number">1</span>,n,len1,tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'U'</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp; <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">            cnt++;</span><br><span class="line">            T[cnt]=T[cnt-tmp<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> k; <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,val[query(T[cnt],<span class="number">1</span>,n,k)]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一种是把主席树当森林的那种状态存的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> lson,rson,date;</span><br><span class="line">    <span class="keyword">char</span> res;</span><br><span class="line">&#125;node[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> tot,len[maxn],T[maxn&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    node[rt].date=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> rt;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    node[rt].lson=build(l,mid);</span><br><span class="line">    node[rt].rson=build(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k,<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=++tot;</span><br><span class="line">    node[rt].lson=node[pre].lson,node[rt].rson=node[pre].rson;node[rt].date=node[pre].date+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        node[rt].res=c;</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=k) node[rt].lson=update(node[pre].lson,l,mid,k,c);</span><br><span class="line">    <span class="keyword">else</span> node[rt].rson=update(node[pre].rson,mid+<span class="number">1</span>,r,k,c);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lp=node[rt].lson;</span><br><span class="line">    <span class="keyword">int</span> lr=node[rt].rson;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> node[rt].res;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="comment">//    cout&lt;&lt;node[lp].date&lt;&lt;' '&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;' ';</span></span><br><span class="line"><span class="comment">//    cout&lt;&lt;node[lr].date&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(node[lp].date&gt;=k) <span class="keyword">return</span> query(node[rt].lson,l,mid,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node[lp].date&lt;k) <span class="keyword">return</span> query(node[rt].rson,mid+<span class="number">1</span>,r,k-node[lp].date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> n=t;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    T[<span class="number">0</span>]=build(<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">char</span> op; <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">        <span class="keyword">if</span>(op==<span class="string">'T'</span>)&#123;</span><br><span class="line">            <span class="keyword">char</span> tmp; <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">            cnt++;</span><br><span class="line">            len[cnt]=len[cnt<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            T[cnt]=update(T[cnt<span class="number">-1</span>],<span class="number">1</span>,n,len[cnt],tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="string">'U'</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> tmp; <span class="built_in">cin</span>&gt;&gt;tmp;</span><br><span class="line">            cnt++;</span><br><span class="line">            len[cnt]=len[cnt-tmp<span class="number">-1</span>];</span><br><span class="line">            T[cnt]=T[cnt-tmp<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> k; <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c\n"</span>,query(T[cnt],<span class="number">1</span>,n,k));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minimize The Integer</title>
      <link href="/2019/10/27/Minimize%20The%20Integer/"/>
      <url>/2019/10/27/Minimize%20The%20Integer/</url>
      
        <content type="html"><![CDATA[<h4 id="Minimize-The-Integer"><a href="#Minimize-The-Integer" class="headerlink" title="Minimize The Integer"></a>Minimize The Integer</h4><a id="more"></a><p>思考一下可以发现奇数和偶数相邻的时候才能交换，而奇数和奇数，偶数和偶数不能交换，所以相同奇偶性的相对顺序不会再发生改变。所以归并排序一下就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">string</span> str,odd=<span class="string">""</span>,even=<span class="string">""</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:str)&#123;</span><br><span class="line">            <span class="keyword">if</span>((c-<span class="string">'0'</span>)%<span class="number">2</span>==<span class="number">1</span>) odd+=c;</span><br><span class="line">            <span class="keyword">else</span> even+=c;</span><br><span class="line">        &#125;</span><br><span class="line">        merge(odd.begin(),odd.end(),even.begin(),even.end(),str.begin());</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>p-binary</title>
      <link href="/2019/10/26/p-binary/"/>
      <url>/2019/10/26/p-binary/</url>
      
        <content type="html"><![CDATA[<h3 id="思维好题"><a href="#思维好题" class="headerlink" title="思维好题"></a>思维好题</h3><a id="more"></a><p>枚举有多少组（有多少组相加）我的做法是枚举最少二进制下1的个数的情况。（这里一定要明白所有的数都一定可以被二进制瓜分完）因为是要最小组数的情况。所以这里遍历枚举的时候也是满足了题意的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span>+<span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>; <span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123; <span class="keyword">if</span>(ch==<span class="string">'-'</span>) ch=<span class="number">-1</span>; ch = getchar(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch)) x=x*<span class="number">10</span>+ch<span class="number">-48</span>,ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LL n,p;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">200000</span>;i++)&#123;</span><br><span class="line">        LL tmp = n - i*p;</span><br><span class="line">        LL minn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tmp&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tmp&amp;<span class="number">1</span>) minn++;</span><br><span class="line">            tmp&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minn&lt;=i &amp;&amp; i&lt;=n-i*p)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客小白月赛-Forsaken的三维数点</title>
      <link href="/2019/10/26/Forsaken%E7%9A%84%E4%B8%89%E7%BB%B4%E6%95%B0%E7%82%B9/"/>
      <url>/2019/10/26/Forsaken%E7%9A%84%E4%B8%89%E7%BB%B4%E6%95%B0%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="线段树单点更新-二分"><a href="#线段树单点更新-二分" class="headerlink" title="线段树单点更新+二分"></a>线段树单点更新+二分</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> op,x;</span><br><span class="line">&#125;q[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">seg</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,s;</span><br><span class="line">&#125;t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">t[p].l=l; t[p].r=r;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> ; <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(p&lt;&lt;<span class="number">1</span>,l,mid);build(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].l==t[p].r)<span class="keyword">return</span> <span class="keyword">void</span>(t[p].s++);</span><br><span class="line"><span class="keyword">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(x&lt;=mid)change(p&lt;&lt;<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">else</span>change(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x);</span><br><span class="line">t[p].s=t[p&lt;&lt;<span class="number">1</span>].s+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(t[p].l==l&amp;&amp;t[p].r==r)<span class="keyword">return</span> t[p].s;</span><br><span class="line"><span class="keyword">int</span> mid=t[p].l+t[p].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=mid)<span class="keyword">return</span> ask(p&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)<span class="keyword">return</span> ask(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">else</span><span class="keyword">return</span> ask(p&lt;&lt;<span class="number">1</span>,l,mid)+ask(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> val)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">0</span>,r=<span class="number">2e5</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(val==<span class="number">0</span>)    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ask(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1e6</span>)&lt;val)    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ask(<span class="number">1</span>,<span class="number">1</span>,mid)&gt;=val)r=mid;</span><br><span class="line"><span class="keyword">else</span>l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1000000</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q[i].op);</span><br><span class="line"><span class="keyword">if</span>(q[i].op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,z;<span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;x,&amp;y,&amp;z);q[i].x=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>((<span class="keyword">double</span>)<span class="number">1.0</span>*x*x+y*y+z*z))+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q[i].x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(q[i].op==<span class="number">1</span>)change(<span class="number">1</span>,q[i].x);</span><br><span class="line"><span class="keyword">else</span><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,bsearch(q[i].x));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Binary Palindromes</title>
      <link href="/2019/10/26/Binary%20Palindromes/"/>
      <url>/2019/10/26/Binary%20Palindromes/</url>
      
        <content type="html"><![CDATA[<h3 id="贪心-思维"><a href="#贪心-思维" class="headerlink" title="贪心+思维"></a>贪心+思维</h3><a id="more"></a><p>分类讨论，如果总长度为奇数，那么0和1必然有一个为奇数，那么某一行也必然为奇数，那么就直接n就行了。如果为偶数，那么分奇数+奇数和偶数+偶数讨论，前者讨论是否奇数行大于等于2。后者直接是n。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> num_0=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> num_1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        num_0=<span class="number">0</span>,len=<span class="number">0</span>,num_1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> len1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">            num_0+=count(s.begin(),s.end(),<span class="string">'0'</span>);</span><br><span class="line">            num_1+=count(s.begin(),s.end(),<span class="string">'1'</span>);</span><br><span class="line">            len+=s.size()%<span class="number">2</span>==<span class="number">1</span>;</span><br><span class="line">            len1+=s.size();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len1&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(num_0%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;num_1%<span class="number">2</span>==<span class="number">0</span>) <span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num_0%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;num_1%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;len&gt;=<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;n&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;n<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU1542</title>
      <link href="/2019/10/23/HDU1542/"/>
      <url>/2019/10/23/HDU1542/</url>
      
        <content type="html"><![CDATA[<h4 id="扫描线入门"><a href="#扫描线入门" class="headerlink" title="扫描线入门"></a>扫描线入门</h4><a id="more"></a><p>难点也就是一个pushUp的时候为啥有lazy标记要x数组中r+1的位置减去l，因为没有到上界，所有这个时候右子树区域也是有贡献的，而离散化过后，自然就要r的下标减一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Author:CC</span></span><br><span class="line"><span class="comment">* Date: 2019-10-23-13.27.03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1123</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> l,r,h;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    edge(<span class="keyword">double</span> l=<span class="number">0</span>,<span class="keyword">double</span> r=<span class="number">0</span>,<span class="keyword">double</span> h=<span class="number">0</span>,<span class="keyword">int</span> f=<span class="number">0</span>):l(l),r(r),h(h),f(f)&#123;&#125;;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span> &lt;(edge a,edge b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.h&lt;b.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    <span class="keyword">int</span> lazy;</span><br><span class="line">    <span class="keyword">double</span> len;</span><br><span class="line">&#125;node[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[i].l=l,node[i].r=r,node[i].len=<span class="number">0</span>;</span><br><span class="line">    node[i].lazy=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> x[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[i].lazy) node[i].len=x[node[i].r+<span class="number">1</span>]-x[node[i].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node[i].l==node[i].r) node[i].len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        node[i].len=node[i&lt;&lt;<span class="number">1</span>].len+node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[i].l&gt;=l&amp;&amp;node[i].r&lt;=r)&#123;</span><br><span class="line">        node[i].lazy+=c;</span><br><span class="line">        pushUp(i);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,c);</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=l) update(i&lt;&lt;<span class="number">1</span>,l,r,c);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,cas=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n),n)&#123;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1,x2,y1,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            x[tot]=x1;</span><br><span class="line">            e[tot++]=edge(x1,x2,y1,<span class="number">1</span>);</span><br><span class="line">            x[tot]=x2;</span><br><span class="line">            e[tot++]=edge(x1,x2,y2,<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x+<span class="number">1</span>,x+tot);</span><br><span class="line">        sort(e+<span class="number">1</span>,e+tot);</span><br><span class="line">        <span class="keyword">int</span> k=unique(x+<span class="number">1</span>,x+tot)-x;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,k<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Test case #%d\n"</span>,cas++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tot;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l=lower_bound(x+<span class="number">1</span>,x+k,e[i].l)-x;</span><br><span class="line">            <span class="keyword">int</span> r=lower_bound(x+<span class="number">1</span>,x+k,e[i].r)-x<span class="number">-1</span>;</span><br><span class="line">            update(<span class="number">1</span>,l,r,e[i].f);</span><br><span class="line">            res+=(e[i+<span class="number">1</span>].h-e[i].h)*node[<span class="number">1</span>].len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Total explored area: %.2lf\n\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU1225</title>
      <link href="/2019/10/23/HDU1225/"/>
      <url>/2019/10/23/HDU1225/</url>
      
        <content type="html"><![CDATA[<h3 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h3><a id="more"></a><p>这道题有和前一个扫描线不一样的地方是只有多次覆盖才算覆盖面积。<br>所以我们线段树中定义了两个变量。一个是覆盖一次的长度和覆盖两次的长度。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Author:CC</span></span><br><span class="line"><span class="comment">* Date: 2019-10-23-13.27.03</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> l,r,h;</span><br><span class="line">    <span class="keyword">int</span> f;</span><br><span class="line">    edge(<span class="keyword">double</span> l=<span class="number">0</span>,<span class="keyword">double</span> r=<span class="number">0</span>,<span class="keyword">double</span> h=<span class="number">0</span>,<span class="keyword">int</span> f=<span class="number">0</span>):l(l),r(r),h(h),f(f)&#123;&#125;;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span> &lt;(edge a,edge b)&#123;</span><br><span class="line">        <span class="keyword">return</span> a.h&lt;b.h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,lazy;</span><br><span class="line">    <span class="keyword">double</span> len,len1;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[i].l=l,node[i].r=r,node[i].len=<span class="number">0</span>,node[i].lazy=<span class="number">0</span>;</span><br><span class="line">    node[i].len1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> x[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[i].lazy!=<span class="number">0</span>) node[i].len1=x[node[i].r+<span class="number">1</span>]-x[node[i].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node[i].l==node[i].r) node[i].len1=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> node[i].len1=node[i&lt;&lt;<span class="number">1</span>].len1+node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(node[i].lazy&gt;=<span class="number">2</span>) node[i].len=x[node[i].r+<span class="number">1</span>]-x[node[i].l];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node[i].lazy==<span class="number">1</span>) node[i].len=node[i&lt;&lt;<span class="number">1</span>].len1+node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len1;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(node[i].l==node[i].r) node[i].len=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> node[i].len=node[i&lt;&lt;<span class="number">1</span>].len+node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[i].l&gt;=l&amp;&amp;node[i].r&lt;=r)&#123;</span><br><span class="line">        node[i].lazy+=c;</span><br><span class="line">        pushUp(i);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=l) update(i&lt;&lt;<span class="number">1</span>,l,r,c);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;r) update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,c);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> tot=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">double</span> x1,y1,x2,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            x[tot]=x1;</span><br><span class="line">            e[tot++]=edge(x1,x2,y1,<span class="number">1</span>);</span><br><span class="line">            x[tot]=x2;</span><br><span class="line">            e[tot++]=edge(x1,x2,y2,<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x+<span class="number">1</span>,x+tot);</span><br><span class="line">        sort(e+<span class="number">1</span>,e+tot);</span><br><span class="line">        <span class="keyword">int</span> k=unique(x+<span class="number">1</span>,x+tot)-x;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,k<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">//for(int i=1;i&lt;=tot;i++) cout&lt;&lt;"---"&lt;&lt;e[i].h&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//for(int i=1;i&lt;k;i++) cout&lt;&lt;x[i]&lt;&lt;' ';</span></span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;tot;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> l=lower_bound(x+<span class="number">1</span>,x+k,e[i].l)-x;</span><br><span class="line">            <span class="keyword">int</span> r=lower_bound(x+<span class="number">1</span>,x+k,e[i].r)-x<span class="number">-1</span>;</span><br><span class="line">            update(<span class="number">1</span>,l,r,e[i].f);</span><br><span class="line">            res+=(e[i+<span class="number">1</span>].h-e[i].h)*node[<span class="number">1</span>].len;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"l: "&lt;&lt;l&lt;&lt;" r: "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">//cout&lt;&lt;"-----"&lt;&lt;e[i+1].h&lt;&lt;' '&lt;&lt;e[i].h&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">//cout&lt;&lt;"----"&lt;&lt;node[1].len&lt;&lt;endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.2lf\n"</span>,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相遇</title>
      <link href="/2019/10/21/%E8%8C%83%E6%88%90%E6%95%8F/"/>
      <url>/2019/10/21/%E8%8C%83%E6%88%90%E6%95%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="和小范的第一次相遇"><a href="#和小范的第一次相遇" class="headerlink" title="和小范的第一次相遇"></a>和小范的第一次相遇</h3><a id="more"></a><p>说起来真的是缘分，我也没想到自己会被要QQ毕竟很久都没有这么动心过了，哈哈哈哈哈哈哈哈。女孩子很漂亮，很天真，关键是很开朗，很活泼。不知道能不能走在一起，先留一个坑在这里吧。万一就在一起了喃？哈哈哈哈哈哈哈哈。</p>]]></content>
      
      
      <categories>
          
          <category> 情感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Count Color</title>
      <link href="/2019/10/16/Count%20Color/"/>
      <url>/2019/10/16/Count%20Color/</url>
      
        <content type="html"><![CDATA[<h4 id="线段树-状态压缩（染色问题）"><a href="#线段树-状态压缩（染色问题）" class="headerlink" title="线段树+状态压缩（染色问题）"></a>线段树+状态压缩（染色问题）</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> lazy[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,sum;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line"><span class="keyword">int</span> T,O,L;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[i].sum=node[i&lt;&lt;<span class="number">1</span>].sum|node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[i].l=l, node[i].r=r;</span><br><span class="line">    lazy[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        node[i].sum=<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;node[i].l&lt;&lt;"----"&lt;&lt;node[i].r&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[i])&#123;</span><br><span class="line">        node[i&lt;&lt;<span class="number">1</span>].sum=lazy[i];</span><br><span class="line">        lazy[i&lt;&lt;<span class="number">1</span>]=lazy[i];</span><br><span class="line">        node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=lazy[i];</span><br><span class="line">        lazy[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[i];</span><br><span class="line">        lazy[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"----"&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(node[i].l&gt;=l&amp;&amp;node[i].r&lt;=r)&#123;</span><br><span class="line">        node[i].sum=(<span class="number">1</span>&lt;&lt;(val<span class="number">-1</span>));</span><br><span class="line">        lazy[i]=(<span class="number">1</span>&lt;&lt;(val<span class="number">-1</span>));</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    <span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=r) update(i&lt;&lt;<span class="number">1</span>,l,r,val);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,val);</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        update(i&lt;&lt;<span class="number">1</span>,l,mid,val);</span><br><span class="line">        update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,val);</span><br><span class="line">    &#125;</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">fun</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&amp;<span class="number">1</span>) res++;</span><br><span class="line">        x&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[i].l&gt;=l&amp;&amp;node[i].r&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">return</span> node[i].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=r) ans=query(i&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l) ans=query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ans=query(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        ans|=query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">    pushUp(i);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;L,&amp;T,&amp;O))&#123;</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,L);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=O;i++)&#123;</span><br><span class="line">            <span class="keyword">char</span> op;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;op;</span><br><span class="line">            <span class="keyword">if</span>(op==<span class="string">'C'</span>)&#123;</span><br><span class="line">                <span class="comment">//cout&lt;&lt;"----"&lt;&lt;endl;</span></span><br><span class="line">                <span class="keyword">int</span> a,b,c; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;a,&amp;b,&amp;c);</span><br><span class="line">                <span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">                update(<span class="number">1</span>,a,b,c);</span><br><span class="line">                <span class="comment">//cout&lt;&lt;"----"&lt;&lt;endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> a,b; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">                <span class="keyword">if</span>(a&gt;b) swap(a,b);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,fun(query(<span class="number">1</span>,a,b)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bicycle Race</title>
      <link href="/2019/10/14/Bicycle%20Race/"/>
      <url>/2019/10/14/Bicycle%20Race/</url>
      
        <content type="html"><![CDATA[<h4 id="关于多边形的一些知识。"><a href="#关于多边形的一些知识。" class="headerlink" title="关于多边形的一些知识。"></a>关于多边形的一些知识。</h4><a id="more"></a><p>我们都知道多边形的内角和是180*(n-2)，而我们这道题就是找内角为270°的角有多少个那么我们的答案就是他，列公式我们知道180x(n-2)=270xa1+(n-a1)x90<br>这样就算出x=n/2-2;</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=t;i++) <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;t/<span class="number">2</span><span class="number">-2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Green and Black Tea</title>
      <link href="/2019/10/13/Green%20and%20Black%20Tea/"/>
      <url>/2019/10/13/Green%20and%20Black%20Tea/</url>
      
        <content type="html"><![CDATA[<h3 id="思维"><a href="#思维" class="headerlink" title="思维"></a>思维</h3><a id="more"></a><p>很好的一题思维题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, K, A, B;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;N, &amp;K, &amp;A, &amp;B);</span><br><span class="line"><span class="keyword">char</span> ch[] = &#123;<span class="string">'G'</span>, <span class="string">'B'</span>&#125;;</span><br><span class="line"><span class="keyword">if</span> (A &gt; B) &#123;</span><br><span class="line">swap(A, B);</span><br><span class="line">swap(ch[<span class="number">0</span>], ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (B &gt; <span class="number">1l</span>l * K * (A + <span class="number">1</span>)) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= A; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> num = (B / (A + <span class="number">1</span>) + (B % (A + <span class="number">1</span>) &gt; i));<span class="comment">//每次分k-1个B，余下的B再加进来最后分成k个B末尾加一个A</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num; j++) &#123;             <span class="comment">//如果余下的B全部用完了，则不用再分B了。</span></span><br><span class="line"><span class="built_in">putchar</span>(ch[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i &lt; A) &#123;</span><br><span class="line"><span class="built_in">putchar</span>(ch[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pythagorean Triples</title>
      <link href="/2019/10/13/Pythagorean%20Triples/"/>
      <url>/2019/10/13/Pythagorean%20Triples/</url>
      
        <content type="html"><![CDATA[<h3 id="勾股数结论"><a href="#勾股数结论" class="headerlink" title="勾股数结论"></a>勾股数结论</h3><a id="more"></a><p>1 当a为大于1的奇数2n+1时，b=2n^2+2n, c=2n^2+2n+1。<br>2 当a为大于4的偶数2n时，b=n^2-1, c=n^2+1<br>然后注意下小于3没法形成勾股数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Author:CC</span></span><br><span class="line"><span class="comment">* Date: 2019-10-13-09.34.11</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ss=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ss&lt;<span class="string">'0'</span>|ss&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ss==<span class="string">'-'</span>)f=<span class="number">-1</span>;ss=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ss&gt;=<span class="string">'0'</span>&amp;&amp;ss&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ss-<span class="string">'0'</span>;ss=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qmul</span><span class="params">(ll a, ll b, ll P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res + a) % P;</span><br><span class="line">        a = (a + a) % P;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll n; <span class="built_in">cin</span>&gt;&gt;n; ll a,b;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            n=(n<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            a=<span class="number">2</span>*n*n+<span class="number">2</span>*n;</span><br><span class="line">            b=<span class="number">2</span>*n*n+<span class="number">2</span>*n+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            n/=<span class="number">2</span>;</span><br><span class="line">            a=n*n<span class="number">-1</span>;</span><br><span class="line">            b=n*n+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="string">' '</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZQ的杀龙之旅（2）</title>
      <link href="/2019/10/13/ZQ%E7%9A%84%E6%9D%80%E9%BE%99%E4%B9%8B%E6%97%85%EF%BC%882%EF%BC%89/"/>
      <url>/2019/10/13/ZQ%E7%9A%84%E6%9D%80%E9%BE%99%E4%B9%8B%E6%97%85%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="一道很好的线段树-树状数组的题"><a href="#一道很好的线段树-树状数组的题" class="headerlink" title="一道很好的线段树+树状数组的题"></a>一道很好的线段树+树状数组的题</h4><a id="more"></a><p>我们用线段树维护的是区间士兵的血线最小值，其实也间接维护了区间内士兵的数量，如果发现这个区间的最小值小于0，那么我们pushDown找到这个叶子节点并且把他线段树上的值变成最大值，原数组改为0，并且更新树状数组（把攻击力更新）。<strong>值得一提的是这里的pushDwon操作有两种作用，一种是正常的区间内的更新向下传递，另一种就是发现有士兵死亡而更新的操作。所以我们直接对pushdown传0，1的参数来控制我们操作就行了。</strong>最后因为我们输出的士兵血量都为叶子节点的数值。所以递归下去找到叶子节点就可以了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r;</span><br><span class="line">    ll sum;</span><br><span class="line">&#125;node[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line">ll m,n,bit[N],a[N],lazy[N],x[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[i].sum=min(node[i&lt;&lt;<span class="number">1</span>].sum,node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[i].l=l, node[i].r=r;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        node[i].sum=a[l];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        bit[i]+=x;</span><br><span class="line">        i+=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i)&#123;</span><br><span class="line">        ans+=bit[i];</span><br><span class="line">        i-=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mid_f</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=n,ans=n+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum(mid)&lt;x)&#123;</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ans=mid;</span><br><span class="line">            r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[i]!=<span class="number">0</span>&amp;&amp;node[i].l!=node[i].r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i&lt;&lt;<span class="number">1</span>].sum!=inf)&#123;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"---"&lt;&lt;node[i].sum&lt;&lt;endl;</span></span><br><span class="line">            lazy[i&lt;&lt;<span class="number">1</span>]+=lazy[i];</span><br><span class="line">            node[i&lt;&lt;<span class="number">1</span>].sum+=lazy[i];</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            if(node[i&lt;&lt;1].sum&lt;0) pushDown(i&lt;&lt;1,true);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum!=inf)&#123;</span><br><span class="line">            lazy[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[i];</span><br><span class="line">            node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum+=lazy[i];</span><br><span class="line">            <span class="comment">//if(node[i&lt;&lt;1|1].sum&lt;0) pushDown(i&lt;&lt;1|1,true);</span></span><br><span class="line">        &#125;</span><br><span class="line">        lazy[i]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node[i].sum&gt;<span class="number">0</span>) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">if</span>(node[i].l==node[i].r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            update(node[i].l,-x[node[i].l]);</span><br><span class="line">            x[node[i].l]=<span class="number">0</span>;</span><br><span class="line">            node[node[i].l].sum=inf;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        pushDown(i&lt;&lt;<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">        pushDown(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">        pushUp(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateTree</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(node[i].sum==inf) <span class="keyword">return</span> ;</span><br><span class="line">     <span class="keyword">if</span>(node[i].l&gt;=ll&amp;&amp;node[i].r&lt;=rr)&#123;</span><br><span class="line">        node[i].sum+=val;</span><br><span class="line">        lazy[i]+=val;</span><br><span class="line">        <span class="keyword">if</span>(node[i].sum&lt;=<span class="number">0</span>) pushDown(i,<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">     &#125;</span><br><span class="line">     pushDown(i,<span class="literal">false</span>);</span><br><span class="line">     <span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(ll&lt;=mid) updateTree(i&lt;&lt;<span class="number">1</span>,l,mid,ll,rr,val);</span><br><span class="line">     <span class="keyword">if</span>(rr&gt;mid) updateTree(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ll,rr,val);</span><br><span class="line">     pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[i].l==node[i].r)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld"</span>,(node[i].sum==inf || node[i].sum&lt;<span class="number">0</span>)?<span class="number">0</span>:node[i].sum);</span><br><span class="line">        <span class="built_in">printf</span>(node[i].l==n?<span class="string">"\n"</span>:<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i,<span class="literal">false</span>);</span><br><span class="line">    solve(i&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    solve(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;n,&amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=(n&lt;&lt;<span class="number">2</span>); i++) &#123;bit[i]=<span class="number">0</span>; node[i].sum=<span class="number">0</span>; lazy[i]=<span class="number">0</span>; x[i]=<span class="number">0</span>;&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;x[i]);</span><br><span class="line">            update(i,x[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            ll hp,k; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;hp,&amp;k);</span><br><span class="line">            <span class="keyword">int</span> pos=mid_f(hp);</span><br><span class="line">            <span class="keyword">if</span>(pos==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            updateTree(<span class="number">1</span>,<span class="number">1</span>,n,<span class="number">1</span>,pos,-k);</span><br><span class="line">        &#125;</span><br><span class="line">        solve(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;"----"&lt;&lt;inf&lt;&lt;endl;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swap Adjacent Elements</title>
      <link href="/2019/10/12/Swap%20Adjacent%20Elements/"/>
      <url>/2019/10/12/Swap%20Adjacent%20Elements/</url>
      
        <content type="html"><![CDATA[<h4 id="思维题OR线段树"><a href="#思维题OR线段树" class="headerlink" title="思维题OR线段树"></a>思维题OR线段树</h4><a id="more"></a><p>版本1：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Author:CC</span></span><br><span class="line"><span class="comment">* Date: 2019-10-12-07.14.08</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,flag=<span class="number">0</span>;</span><br><span class="line">&#125;tree[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val,id;</span><br><span class="line">&#125;node[N];</span><br><span class="line"><span class="keyword">char</span> str[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i&lt;&lt;<span class="number">1</span>].flag||tree[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].flag) tree[i].flag=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> tree[i].flag=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[i].l=l,tree[i].r=r,tree[i];</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(str[l]==<span class="string">'0'</span>) tree[i].flag=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> tree[i].flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[i].flag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=tree[i].l+tree[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mid&gt;=r)&#123;</span><br><span class="line">        <span class="keyword">return</span> query(i&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(mid&lt;l)&#123;</span><br><span class="line">        <span class="keyword">return</span> query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(query(i&lt;&lt;<span class="number">1</span>,l,mid)==<span class="number">0</span>||query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r)==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;node[i].val); node[i].id=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,str+<span class="number">1</span>);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,t<span class="number">-1</span>);</span><br><span class="line">    <span class="comment">//for(int i=1;i&lt;=t-1;i++) cout&lt;&lt;str[i]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(node[i].val!=node[i].id)&#123;</span><br><span class="line">            <span class="keyword">int</span> Min=min(node[i].val,node[i].id);</span><br><span class="line">            <span class="keyword">int</span> Max=max(node[i].val,node[i].id)<span class="number">-1</span>;</span><br><span class="line">            <span class="comment">//cout&lt;&lt;"min :"&lt;&lt;Min&lt;&lt;" max: "&lt;&lt;Max&lt;&lt;endl;</span></span><br><span class="line">            <span class="comment">//cout&lt;&lt;"---"&lt;&lt;str[Min]&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">if</span>(query(<span class="number">1</span>,Min,Max)==<span class="number">0</span>)&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">"YES\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"NO\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>版本2：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 思路就是，对于第二个二进制串；用一个i和j表示连续1的一个区间，每次对连续1区间进行sort,</span></span><br><span class="line"><span class="comment"> * 看最后的序列是否是递增的，就OK了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,a[N+<span class="number">10</span>];</span><br><span class="line"><span class="keyword">char</span> s[N+<span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;(s+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">if</span> (s[i]==<span class="string">'1'</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span> (j+<span class="number">1</span>&lt;=n<span class="number">-1</span> &amp;&amp; s[j+<span class="number">1</span>]==s[i]) j++;</span><br><span class="line">            sort(a+i,a+<span class="number">1</span>+j+<span class="number">1</span>);</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">if</span> (a[i]!=i)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"NO"</span>&lt;&lt;<span class="built_in">endl</span>,<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"YES"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Panda HDU - 4046</title>
      <link href="/2019/10/10/Panda%20HDU%20-%204046/"/>
      <url>/2019/10/10/Panda%20HDU%20-%204046/</url>
      
        <content type="html"><![CDATA[<h4 id="全面复习为树套数做准备了"><a href="#全面复习为树套数做准备了" class="headerlink" title="全面复习为树套数做准备了"></a>全面复习为树套数做准备了</h4><a id="more"></a><p>这里只讲一下为啥e2+2,e3+1。因为存的时候是从1开始存的，所以我的e3+1，e2为什么要+2，举个例子bwbwb我们统计2-5的时候，应该是sum(5)-sum(3)有可能2那个位置有前面组成了bwb的但是并不属于这个区间。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) (x&amp;(-x))</span></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> bit[<span class="number">55005</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50005</span>],ch[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y,<span class="keyword">char</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x==<span class="string">'w'</span>&amp;&amp;y==<span class="string">'b'</span>&amp;&amp;z==<span class="string">'w'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i)&#123;</span><br><span class="line">        res+=bit[i];</span><br><span class="line">        i-=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=n)&#123;</span><br><span class="line">        bit[i]+=x;</span><br><span class="line">        i+=lowbit(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">int</span> Case=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(bit,<span class="number">0</span>,<span class="keyword">sizeof</span> bit);</span><br><span class="line">        <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span> s);</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(check(s[i<span class="number">-2</span>],s[i<span class="number">-1</span>],s[i]))&#123;</span><br><span class="line">                update(i,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,Case++);</span><br><span class="line">        <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">            <span class="keyword">int</span> e1,e2,e3; <span class="built_in">cin</span>&gt;&gt;e1&gt;&gt;e2;</span><br><span class="line">            <span class="keyword">if</span>(e1==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;e3; <span class="keyword">if</span>(e3-e2&lt;<span class="number">2</span>) <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;sum(e3+<span class="number">1</span>)-sum(e2+<span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>,ch);</span><br><span class="line">                e2++;</span><br><span class="line">                <span class="keyword">if</span>(ch[<span class="number">0</span>]==s[e2]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(e2&gt;=<span class="number">1</span> &amp;&amp; e2&lt;=n<span class="number">-2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(check(ch[<span class="number">0</span>], s[e2+<span class="number">1</span>], s[e2+<span class="number">2</span>]) &amp;&amp; !check(s[e2], s[e2+<span class="number">1</span>], s[e2+<span class="number">2</span>])) update(e2+<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!check(ch[<span class="number">0</span>], s[e2+<span class="number">1</span>], s[e2+<span class="number">2</span>]) &amp;&amp; check(s[e2], s[e2+<span class="number">1</span>], s[e2+<span class="number">2</span>])) update(e2+<span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(e2&gt;=<span class="number">2</span> &amp;&amp; e2&lt;=n<span class="number">-1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(check(s[e2<span class="number">-1</span>], ch[<span class="number">0</span>], s[e2+<span class="number">1</span>]) &amp;&amp; !check(s[e2<span class="number">-1</span>], s[e2], s[e2+<span class="number">1</span>])) update(e2+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!check(s[e2<span class="number">-1</span>], ch[<span class="number">0</span>], s[e2+<span class="number">1</span>]) &amp;&amp; check(s[e2<span class="number">-1</span>], s[e2], s[e2+<span class="number">1</span>])) update(e2+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(e2&gt;=<span class="number">3</span> &amp;&amp; e2&lt;=n)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(check(s[e2<span class="number">-2</span>], s[e2<span class="number">-1</span>], ch[<span class="number">0</span>]) &amp;&amp; !check(s[e2<span class="number">-2</span>], s[e2<span class="number">-1</span>], s[e2])) update(e2, <span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span>(!check(s[e2<span class="number">-2</span>], s[e2<span class="number">-1</span>], ch[<span class="number">0</span>]) &amp;&amp; check(s[e2<span class="number">-2</span>], s[e2<span class="number">-1</span>], s[e2])) update(e2, <span class="number">-1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                s[e2]=ch[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu 4348</title>
      <link href="/2019/10/09/hdu%204348/"/>
      <url>/2019/10/09/hdu%204348/</url>
      
        <content type="html"><![CDATA[<h3 id="第一个主席树-懒惰标记，先码在这里感悟后面写。"><a href="#第一个主席树-懒惰标记，先码在这里感悟后面写。" class="headerlink" title="第一个主席树+懒惰标记，先码在这里感悟后面写。"></a>第一个主席树+懒惰标记，先码在这里感悟后面写。</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM=MAXN*<span class="number">30</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> T[MAXN],lson[MAXM],rson[MAXM],lazy[MAXM],tot;</span><br><span class="line">ll sum[MAXM],a[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum[rt]=sum[lson[rt]]+sum[rson[rt]]+(ll)lazy[rt]*(r-l+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=tot++;</span><br><span class="line">    lazy[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        sum[rt]=a[l];</span><br><span class="line">        <span class="keyword">return</span> rt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    lson[rt]=build(l,mid);</span><br><span class="line">    rson[rt]=build(mid+<span class="number">1</span>,r);</span><br><span class="line">    pushUp(rt,l,r);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newrt=tot++;</span><br><span class="line">    lazy[newrt]=lazy[rt];</span><br><span class="line">    <span class="keyword">if</span>(ll&lt;=l&amp;&amp;r&lt;=rr)&#123;</span><br><span class="line">        lson[newrt]=lson[rt]; rson[newrt]=rson[rt];</span><br><span class="line">        lazy[newrt]=lazy[rt]+v;</span><br><span class="line">        sum[newrt]=sum[rt]+(<span class="keyword">long</span> <span class="keyword">long</span>)v*(r-l+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> newrt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(rr&lt;=mid)&#123;</span><br><span class="line">        rson[newrt]=rson[rt];</span><br><span class="line">        lson[newrt]=update(lson[rt],l,mid,ll,rr,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ll&gt;mid)&#123;</span><br><span class="line">        lson[newrt]=lson[rt];</span><br><span class="line">        rson[newrt]=update(rson[rt],mid+<span class="number">1</span>,r,ll,rr,v);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        lson[newrt]=update(lson[rt],l,mid,ll,rr,v);</span><br><span class="line">        rson[newrt]=update(rson[rt],mid+<span class="number">1</span>,r,ll,rr,v);</span><br><span class="line">    &#125;</span><br><span class="line">    pushUp(newrt,l,r);</span><br><span class="line">    <span class="keyword">return</span> newrt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> la)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;"l : "&lt;&lt;l&lt;&lt;"r: "&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(ll&lt;=l&amp;&amp;r&lt;=rr)&#123;</span><br><span class="line">        <span class="keyword">return</span> sum[rt]+(<span class="keyword">long</span> <span class="keyword">long</span>)la*(r-l+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    la+=lazy[rt];</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(rr&lt;=mid) <span class="keyword">return</span> query(lson[rt],l,mid,ll,rr,la);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ll&gt;mid) <span class="keyword">return</span> query(rson[rt],mid+<span class="number">1</span>,r,ll,rr,la);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> query(lson[rt],l,mid,ll,mid,la)+query(rson[rt],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,rr,la);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,q;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;q)&#123;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        T[<span class="number">0</span>]=build(<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">int</span> tag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="keyword">char</span> a;</span><br><span class="line">            <span class="keyword">int</span> l,r;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;l;</span><br><span class="line">            <span class="keyword">if</span>(a==<span class="string">'B'</span>) tag=l;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">int</span> d;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;r;</span><br><span class="line">                <span class="keyword">if</span>(a==<span class="string">'Q'</span>)&#123;</span><br><span class="line">                    ll res=query(T[tag],<span class="number">1</span>,n,l,r,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="string">'C'</span>)&#123;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;d;</span><br><span class="line">                    tag++;</span><br><span class="line">                    T[tag]=update(T[tag<span class="number">-1</span>],<span class="number">1</span>,n,l,r,d);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">cin</span>&gt;&gt;d;</span><br><span class="line">                    ll res=query(T[d],<span class="number">1</span>,n,l,r,<span class="number">0</span>);</span><br><span class="line">                    <span class="built_in">cout</span>&lt;&lt;res&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>线段树的懒惰操作是为了节约时间，主席树有点像节约内存，不然每次都新开估计会炸掉的。其他的操作就这题而言对一个初学者还是很有意义的，后面仔细学习品味（留坑）</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stas and the Queue at the Buffet</title>
      <link href="/2019/10/08/Super%20Mario/"/>
      <url>/2019/10/08/Super%20Mario/</url>
      
        <content type="html"><![CDATA[<h4 id="主席树裸题-这段时间做主席树的感悟。"><a href="#主席树裸题-这段时间做主席树的感悟。" class="headerlink" title="主席树裸题+这段时间做主席树的感悟。"></a>主席树裸题+这段时间做主席树的感悟。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxm=maxn*<span class="number">30</span>;</span><br><span class="line"><span class="keyword">int</span> sum[maxm],lson[maxm],rson[maxm],T[maxm];</span><br><span class="line"><span class="keyword">int</span> a[maxn],b[<span class="number">2</span>*maxn],tot,l[maxn],r[maxn],h[maxn];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rt=tot++;</span><br><span class="line">    sum[rt]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span> rt;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    lson[rt]=build(l,mid);</span><br><span class="line">    rson[rt]=build(mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt,<span class="keyword">int</span> pos,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newrt=tot++; <span class="keyword">int</span> temp=newrt;</span><br><span class="line">    sum[newrt]=sum[rt]+v;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=N;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)&#123;</span><br><span class="line">            lson[newrt]=tot++; rson[newrt]=rson[rt];</span><br><span class="line">            newrt=lson[newrt]; rt=lson[rt];</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            rson[newrt]=tot++; lson[newrt]=lson[rt];</span><br><span class="line">            newrt=rson[newrt]; rt=rson[rt];</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[newrt]=sum[rt]+v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> lrt,<span class="keyword">int</span> rrt,<span class="keyword">int</span> pos)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>,r=N;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(pos&lt;=mid)&#123;</span><br><span class="line">            lrt=lson[lrt]; rrt=lson[rrt];</span><br><span class="line">            r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            ret+=sum[lson[rrt]]-sum[lson[lrt]];</span><br><span class="line">            lrt=rson[lrt]; rrt=rson[rrt];</span><br><span class="line">            l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ret+=sum[rrt]-sum[lrt];</span><br><span class="line">    <span class="comment">//cout&lt;&lt;ret&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">int</span> cas=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n,m; <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;l[i]&gt;&gt;r[i]&gt;&gt;h[i];</span><br><span class="line">            b[n+i]=h[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b+<span class="number">1</span>,b+<span class="number">1</span>+n+m);</span><br><span class="line">        N=unique(b+<span class="number">1</span>,b+<span class="number">1</span>+n+m)-b;</span><br><span class="line">        tot=<span class="number">0</span>;</span><br><span class="line">        T[<span class="number">0</span>]=build(<span class="number">1</span>,N);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+N,a[i])-b;</span><br><span class="line">            T[i]=update(T[i<span class="number">-1</span>],v,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//for(int i=0;i&lt;=n;i++) cout&lt;&lt;T[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,cas++);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> v=lower_bound(b+<span class="number">1</span>,b+<span class="number">1</span>+N,h[i])-b;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,query(T[l[i]],T[r[i]+<span class="number">1</span>],v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主席树的一些感悟：</strong><br>主席树都是一种前缀和的思想我向大家都明白，我这里总结一下自己的傻逼问题。为啥询问的时候都是左树去减去，而右树只是起递归的作用。因为我们都是用位置和中间位置比较，所以我们如果位置在左边那么就可以直接用左树的前缀和来计算。如果在右树那么就递归找左边，所以用到的只是左树。<br>再看看我们update的时候的操作 举个更新左树的例子:<br>lson[newrt]=tot++; rson[newrt]=rson[rt]<br>newrt=lson[newrt]; rt=lson[rt];<br>因为此时我们只更新左树，右树依然是以前的那个不需要开新点。<br>T数组就是我们动态开的树。<br>并且update在二分的过程中我们需要有sum[newrt]=sum[rt]+b;<br>不然他们的节点就是0，然而我们这个时候已经开了很多节点了。<br>主函数中的操作大家都能想明白，我就不一一解释了。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodePlus 2017 12 月赛 可做题2</title>
      <link href="/2019/10/03/CodePlus%202017%2012%20%E6%9C%88%E8%B5%9B%20%E5%8F%AF%E5%81%9A%E9%A2%982/"/>
      <url>/2019/10/03/CodePlus%202017%2012%20%E6%9C%88%E8%B5%9B%20%E5%8F%AF%E5%81%9A%E9%A2%982/</url>
      
        <content type="html"><![CDATA[<h4 id="矩阵快速幂-exgcd"><a href="#矩阵快速幂-exgcd" class="headerlink" title="矩阵快速幂+exgcd"></a>矩阵快速幂+exgcd</h4><a id="more"></a><p>很好的一道题根据矩阵快速幂并且知道</p><script type="math/tex; mode=display">a_1</script><p>我们可以算出ak-2=a1*矩阵对应系数，然后等价替换掉ak(ak=ak-1+ak-2）再根据模方程列出欧几里得，最后根据定理该方程的全部解是x0+(b/d)n,y0-(a/d)n。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pa pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="function">LL <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LL x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>),ch=getchar();</span><br><span class="line">    <span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line">LL a1,l,r,k,p,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Matrix</span>&#123;</span>LL v[<span class="number">3</span>][<span class="number">3</span>];&#125;M,st;</span><br><span class="line">Matrix <span class="keyword">operator</span> *(Matrix a,Matrix b)</span><br><span class="line">&#123;</span><br><span class="line">    Matrix c;</span><br><span class="line">    c.v[<span class="number">1</span>][<span class="number">1</span>]=c.v[<span class="number">1</span>][<span class="number">2</span>]=c.v[<span class="number">2</span>][<span class="number">1</span>]=c.v[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>;j++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">2</span>;k++)</span><br><span class="line">    c.v[i][j]=(c.v[i][j]+a.v[k][j]*b.v[i][k]%p)%p;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Matrix <span class="title">Pow</span><span class="params">(Matrix x,LL y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">1</span>)<span class="keyword">return</span> x;</span><br><span class="line">    Matrix t=Pow(x,y&gt;&gt;<span class="number">1</span>),re=t*t;</span><br><span class="line">    <span class="keyword">if</span>(y&amp;<span class="number">1</span>)re=re*x;<span class="keyword">return</span> re;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">exgcd</span><span class="params">(LL a,LL b,LL &amp;x,LL &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!a)&#123;x=<span class="number">0</span>,y=<span class="number">1</span>;<span class="keyword">return</span> b;&#125;</span><br><span class="line">    LL tx,ty,d=exgcd(b%a,a,tx,ty);</span><br><span class="line">    x=ty-(b/a)*tx;y=tx;<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    M.v[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">0</span>,M.v[<span class="number">1</span>][<span class="number">2</span>]=M.v[<span class="number">2</span>][<span class="number">1</span>]=M.v[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> T=read();</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        a1=read(),l=read(),r=read(),k=read(),p=read(),m=read();a1%=p;</span><br><span class="line">        st.v[<span class="number">1</span>][<span class="number">1</span>]=st.v[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>,st.v[<span class="number">1</span>][<span class="number">2</span>]=st.v[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(k!=<span class="number">3</span>)st=st*Pow(M,k<span class="number">-3</span>);</span><br><span class="line">        LL ak=(st.v[<span class="number">2</span>][<span class="number">1</span>]*(l%p)%p+st.v[<span class="number">1</span>][<span class="number">1</span>]*a1%p)%p;</span><br><span class="line">        LL ans=<span class="number">0</span>;m=(m-ak+p)%p;</span><br><span class="line">        LL x,y;LL d=exgcd(st.v[<span class="number">2</span>][<span class="number">1</span>],p,x,y);</span><br><span class="line">        <span class="keyword">if</span>(m%d)&#123;<span class="built_in">puts</span>(<span class="string">"0"</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        x=(x*(m/d)%(p/d)+(p/d))%(p/d);</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=r-l)ans=((r-l-x)/(p/d)+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All the Vowels Please</title>
      <link href="/2019/10/03/All%20the%20Vowels%20Please/"/>
      <url>/2019/10/03/All%20the%20Vowels%20Please/</url>
      
        <content type="html"><![CDATA[<h4 id="All-the-Vowels-Please"><a href="#All-the-Vowels-Please" class="headerlink" title="All the Vowels Please"></a>All the Vowels Please</h4><a id="more"></a><p>思维+构造<br><strong>对角线填充就能保证每一行都有完整的五个元音字母</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;//算法库</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> arr=<span class="string">"aeiou"</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">5</span>;i&lt;=t;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(t%i==<span class="number">0</span>&amp;&amp;t/i&gt;=<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;k++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;t/i;j++)&#123;</span><br><span class="line">                    ans+=arr[(k+j)%<span class="number">5</span>];<span class="comment">//对角线填充</span></span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Stas and the Queue at the Buffet</title>
      <link href="/2019/10/03/Stas%20and%20the%20Queue%20at%20the%20Buffet/"/>
      <url>/2019/10/03/Stas%20and%20the%20Queue%20at%20the%20Buffet/</url>
      
        <content type="html"><![CDATA[<h4 id="简单思维题"><a href="#简单思维题" class="headerlink" title="简单思维题"></a>简单思维题</h4><a id="more"></a><p>题意：让不满度最小，列一系列方程然后就可以得出答案了。最后排下序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Author:CC</span></span><br><span class="line"><span class="comment">* Date: 2019-10-05-21.40.38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ss=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ss&lt;<span class="string">'0'</span>|ss&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ss==<span class="string">'-'</span>)f=<span class="number">-1</span>;ss=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ss&gt;=<span class="string">'0'</span>&amp;&amp;ss&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ss-<span class="string">'0'</span>;ss=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qmul</span><span class="params">(ll a, ll b, ll P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res + a) % P;</span><br><span class="line">        a = (a + a) % P;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll a,ll b,ll c,ll mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a*mid+b+c&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll a_b[<span class="number">100000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    ll sum_a=<span class="number">0</span>,sum_nb=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ll a,b; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a,&amp;b);</span><br><span class="line">        a_b[i]=a-b;</span><br><span class="line">        sum_a+=<span class="number">-1</span>*(a);</span><br><span class="line">        sum_nb+=n*b;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a_b+<span class="number">1</span>,a_b+<span class="number">1</span>+n,cmp);</span><br><span class="line">    ll sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum+=a_b[i]*i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;sum+sum_a+sum_nb&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Primes and Multiplication</title>
      <link href="/2019/10/02/%E9%BB%91%E5%A6%B9%E7%9A%84%E6%B8%B8%E6%88%8FI/"/>
      <url>/2019/10/02/%E9%BB%91%E5%A6%B9%E7%9A%84%E6%B8%B8%E6%88%8FI/</url>
      
        <content type="html"><![CDATA[<h4 id="裴蜀定理变形"><a href="#裴蜀定理变形" class="headerlink" title="裴蜀定理变形"></a>裴蜀定理变形</h4><a id="more"></a><p>之前对裴蜀定理的理解太肤浅了，只拿来做gcd=1的情况，其实这道题可以做， 我们gcd=n，相当于每隔n个地砖铺一个，所以我们这道题，相当于区间长度（最大的数）除以gcd再减去3（本来就铺好了3个数字）<br>就是答案了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Author:CC</span></span><br><span class="line"><span class="comment">* Date: 2019-10-02-19.53.58</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll l,mod;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f=<span class="number">1</span>,x=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ss=getchar();</span><br><span class="line">    <span class="keyword">while</span>(ss&lt;<span class="string">'0'</span>|ss&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ss==<span class="string">'-'</span>)f=<span class="number">-1</span>;ss=getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>(ss&gt;=<span class="string">'0'</span>&amp;&amp;ss&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ss-<span class="string">'0'</span>;ss=getchar();&#125;</span><br><span class="line">    <span class="keyword">return</span> f*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">qmul</span><span class="params">(ll a, ll b, ll P)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>) res = (res + a) % P;</span><br><span class="line">        a = (a + a) % P;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        ll a,b,c; <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        ll gcd=__gcd(a,__gcd(b,c));</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;max(a,max(b,c))/gcd<span class="number">-3</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Primes and Multiplication</title>
      <link href="/2019/09/28/Primes%20and%20Multiplication/"/>
      <url>/2019/09/28/Primes%20and%20Multiplication/</url>
      
        <content type="html"><![CDATA[<h4 id="质因子分解-快速幂"><a href="#质因子分解-快速幂" class="headerlink" title="质因子分解+快速幂"></a>质因子分解+快速幂</h4><a id="more"></a><p>直接计算质因子的贡献度，只要能除以质因数的那么他们的倍数也能除以质因数，所以我们直接找1-n里有多少个数能够除这个质因子，然后这里我们直接把质因数的次幂一起找了（下面代码有个地方可能有点难理解，我的理解是铺地砖一样，举个例子，先铺2的一次幂，有n/2个数，然后能铺2的2次幂的数有n/4个则，累加起来就是2的一共多少次幂了）<br>最后统计，质因数的幂次就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rint register int</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e7</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">LL x,cnt=<span class="number">0</span>;</span><br><span class="line">LL n;</span><br><span class="line"><span class="keyword">bool</span> vis[MAXN];</span><br><span class="line">LL prime[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;LL&gt; v;</span><br><span class="line"><span class="built_in">map</span>&lt;LL,LL&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">quick_pow</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line">    LL res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) res = (res*a)%MOD;</span><br><span class="line">        a = (a*a)%MOD;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">2</span>;i&lt;=MAXN<span class="number">-10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">            prime[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(LL j=<span class="number">0</span>;j&lt;cnt &amp;&amp; i*prime[j]&lt;=MAXN<span class="number">-10</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*prime[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%prime[j]==<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_x_prime</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;cnt;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">            v.push_back(prime[i]);</span><br><span class="line">            <span class="keyword">while</span>(x%prime[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                x /= prime[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x!=<span class="number">1</span>) v.push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x&gt;&gt;n;</span><br><span class="line">    get_prime();</span><br><span class="line">    get_x_prime(x);</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">        LL tmp = <span class="number">1L</span>L*v[i];</span><br><span class="line">        <span class="keyword">while</span>(tmp &lt;= n)&#123;</span><br><span class="line">            mp[v[i]] += n/tmp;<span class="comment">//铺地砖 </span></span><br><span class="line">            <span class="keyword">if</span>(tmp*v[i] &gt; tmp) tmp = tmp*v[i];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LL ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=<span class="number">0</span>;i&lt;v.size();i++)&#123;</span><br><span class="line">        ans = (ans*(quick_pow(<span class="number">1L</span>L*v[i],mp[v[i]])%MOD)+MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fox And Jumping-裴蜀定理</title>
      <link href="/2019/09/28/Fox%20And%20Jumping/"/>
      <url>/2019/09/28/Fox%20And%20Jumping/</url>
      
        <content type="html"><![CDATA[<h3 id="裴蜀定理"><a href="#裴蜀定理" class="headerlink" title="裴蜀定理"></a>裴蜀定理</h3><a id="more"></a><p>题意： 给你N个数让我们选其中的数字组成来铺满整个数轴。分析该问题，先考虑两个数的情况，发现想要跳到每一个格子上，必须使得这些数通过数次相加或相减得出的绝对值为 1，进而想到了<a href="https://baike.baidu.com/item/%25E8%25A3%25B4%25E8%259C%2580%25E5%25AE%259A%25E7%2590%2586/5186593?fr=aladdin" target="_blank" rel="noopener">裴蜀定理</a>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">map&lt;int,int&gt; H;</span><br><span class="line">int gcd(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    if(y==0)return x;</span><br><span class="line">    return gcd(y,x%y);</span><br><span class="line">&#125;</span><br><span class="line">#define maxn 350</span><br><span class="line">int a[maxn];</span><br><span class="line">int val[maxn];</span><br><span class="line">void updata(int x,int val)</span><br><span class="line">&#123;</span><br><span class="line">    if(H[x]==0)H[x]=1e9;</span><br><span class="line">    H[x]=min(H[x],val);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    map&lt;int,int&gt;::iterator it;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;val[i]);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        updata(a[i],val[i]);</span><br><span class="line">        for(it=H.begin();it!=H.end();it++)</span><br><span class="line">            updata(gcd(it-&gt;first,a[i]),val[i]+it-&gt;second);</span><br><span class="line">    &#125;</span><br><span class="line">    if(H[1]==0)return puts(&quot;-1&quot;);</span><br><span class="line">    else printf(&quot;%d\n&quot;,H[1]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3455 [POI2007]ZAP-Queries</title>
      <link href="/2019/09/20/P3455%20%5BPOI2007%5DZAP-Queries/"/>
      <url>/2019/09/20/P3455%20%5BPOI2007%5DZAP-Queries/</url>
      
        <content type="html"><![CDATA[<h4 id="莫比乌斯第二题"><a href="#莫比乌斯第二题" class="headerlink" title="莫比乌斯第二题"></a>莫比乌斯第二题</h4><a id="more"></a><p><strong>相比于前一个题，这道题更简单一些。公式大家也会我直接发代码把。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define N 1000010</span><br><span class="line">using namespace std;</span><br><span class="line">bool vis[N];</span><br><span class="line">long long sum[N];</span><br><span class="line">int prim[N];</span><br><span class="line">int mu[N],g[N];</span><br><span class="line">int cnt,pris;</span><br><span class="line">void get_mu(int n)</span><br><span class="line">&#123;</span><br><span class="line">    mu[1]=1;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!vis[i])&#123;mu[i]=-1;prim[++cnt]=i;&#125;</span><br><span class="line">        for(int j=1;j&lt;=cnt&amp;&amp;prim[j]*i&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*prim[j]]=1;</span><br><span class="line">            if(i%prim[j]==0)break;</span><br><span class="line">            else mu[prim[j]*i]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=n;i++) sum[i]=sum[i-1]+(long long)mu[i];//u的前缀和</span><br><span class="line">&#125;</span><br><span class="line">int n,m;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    get_mu(50005);</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;,&amp;n,&amp;m,&amp;pris);</span><br><span class="line">        long long ans=0;</span><br><span class="line">        if(n&gt;m) swap(n,m);</span><br><span class="line">        int r=1;</span><br><span class="line">        for(int l=1;l&lt;=n;l=r+1)&#123;</span><br><span class="line">            r=min(n/(n/l),m/(m/l));</span><br><span class="line">            ans+=1ll*(n/(l*pris))*(m/(l*pris))*(sum[r]-sum[l-1]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%lld\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2257 YY的GCD</title>
      <link href="/2019/09/20/P2257%20YY%E7%9A%84GCD/"/>
      <url>/2019/09/20/P2257%20YY%E7%9A%84GCD/</url>
      
        <content type="html"><![CDATA[<h3 id="第一道莫比乌斯的题："><a href="#第一道莫比乌斯的题：" class="headerlink" title="第一道莫比乌斯的题："></a>第一道莫比乌斯的题：</h3><a id="more"></a><p>markdown语言太难写了，不过要纪念下！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define N 10000100</span><br><span class="line">using namespace std;</span><br><span class="line">bool vis[N];</span><br><span class="line">long long sum[N];</span><br><span class="line">int prim[N];</span><br><span class="line">int mu[N],g[N];</span><br><span class="line">int cnt;</span><br><span class="line">void get_mu(int n)</span><br><span class="line">&#123;</span><br><span class="line">    mu[1]=1;</span><br><span class="line">    for(int i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!vis[i])&#123;mu[i]=-1;prim[++cnt]=i;&#125;</span><br><span class="line">        for(int j=1;j&lt;=cnt&amp;&amp;prim[j]*i&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[i*prim[j]]=1;</span><br><span class="line">            if(i%prim[j]==0)break;</span><br><span class="line">            else mu[prim[j]*i]=-mu[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=1;i&lt;=cnt;i++)</span><br><span class="line">        for(int j=1;j*prim[i]&lt;=n;j++)</span><br><span class="line">        g[j*prim[i]]+=mu[j];//枚举k来枚举所有的T,并对g(T)函数求和</span><br><span class="line">    for(int i=1;i&lt;=n;i++) sum[i]=sum[i-1]+(long long)g[i];//u的前缀和</span><br><span class="line">&#125;</span><br><span class="line">int n,m;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    get_mu(10000000);</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;n,&amp;m); long long ans=0;</span><br><span class="line">        if(n&gt;m) swap(n,m);</span><br><span class="line">        int r=1;</span><br><span class="line">        for(int l=1;l&lt;=n;l=r+1)&#123;</span><br><span class="line">            r=min(n/(n/l),m/(m/l));</span><br><span class="line">            ans+=1ll*(n/l)*(m/l)*(sum[r]-sum[l-1]);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%lld\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Feat</title>
      <link href="/2019/09/20/GCD%20-%20Extreme%20(II)/"/>
      <url>/2019/09/20/GCD%20-%20Extreme%20(II)/</url>
      
        <content type="html"><![CDATA[<h4 id="欧拉函数-打表"><a href="#欧拉函数-打表" class="headerlink" title="欧拉函数+打表"></a>欧拉函数+打表</h4><a id="more"></a><p>在本子上理清楚了欧拉函数和gcd之间 的关系，这道题我们假设gcd(i,j)=d，可以得到gcd(i/d,j/d)=1,所以此时和j/d互质的数为Oula（j/d）个，并且oula(j/d)*d就是i到j所有gcd的和。然后我们就可以通过枚举d来算出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int N=4e6+10;</span><br><span class="line">long long phi[N],b[N],sum[N];</span><br><span class="line">void euler() &#123;</span><br><span class="line">    for(int i = 2; i &lt; N; i++) &#123;</span><br><span class="line">        if(!phi[i])</span><br><span class="line">            for(int j = i; j &lt; N; j += i) &#123;</span><br><span class="line">                if(!phi[j])</span><br><span class="line">                    phi[j] = j;</span><br><span class="line">                phi[j] = phi[j] / i * (i - 1);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">euler();</span><br><span class="line">ll n; </span><br><span class="line">for(int i=1;i&lt;=N;i++)&#123;</span><br><span class="line">for(int j=i*2;j&lt;=N;j+=i)&#123;</span><br><span class="line">b[j]+=phi[j/i]*i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=2;i&lt;=N;i++)&#123;</span><br><span class="line">sum[i]=sum[i-1]+b[i];</span><br><span class="line">&#125;</span><br><span class="line">while(cin&gt;&gt;n,n)&#123;</span><br><span class="line">cout&lt;&lt;sum[n]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CCPC2018网络赛-Dream-费马小定理。</title>
      <link href="/2019/09/20/Dream/"/>
      <url>/2019/09/20/Dream/</url>
      
        <content type="html"><![CDATA[<h4 id="费马小定理。"><a href="#费马小定理。" class="headerlink" title="费马小定理。"></a>费马小定理。</h4><a id="more"></a><p>题目有点难懂，但是看懂还是比较简单的，他给了一个质数p，并且是幂的形式给出来的，所以我们很容易想得到费马小定理。<br>他让m^p+n^p=(m+n)^p<br>我们两边同时%p，可以轻松证明两式相等。<br>所以我们直接讲输出的结果%p就好了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t; cin&gt;&gt;t;</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">    int n; cin&gt;&gt;n;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;(i+j)%n&lt;&lt;&apos; &apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;n;i++)&#123;</span><br><span class="line">        for(int j=0;j&lt;n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;(i*j)%n&lt;&lt;&apos; &apos;;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Trailing Zeroes</title>
      <link href="/2019/09/19/Trailing%20Zeroes/"/>
      <url>/2019/09/19/Trailing%20Zeroes/</url>
      
        <content type="html"><![CDATA[<h4 id="思维题"><a href="#思维题" class="headerlink" title="思维题"></a>思维题</h4><a id="more"></a><p>规律+二分。我们列举几个数可以发现一个数除以5等于多少代表了这个数的阶乘包含了几个5。但是线性扫过去会超时，所以我们直接二分查找。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="function">ll <span class="title">tot</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x)&#123;</span><br><span class="line">ans+=x/<span class="number">5</span>;</span><br><span class="line">x/=<span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">bin</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll l=<span class="number">1</span>,r=<span class="number">500000000</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">ll m=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(tot(m)&lt;x) l=m+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=m<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tot(l)==x) <span class="keyword">return</span> l;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T,k=<span class="number">0</span>; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T); </span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">ll q; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;q);</span><br><span class="line"><span class="keyword">if</span>(bin(q)==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Case %d: impossible\n"</span>,++k);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>,++k,bin(q));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Code Feat</title>
      <link href="/2019/09/19/Code%20Feat/"/>
      <url>/2019/09/19/Code%20Feat/</url>
      
        <content type="html"><![CDATA[<h4 id="中国剩余定理-枚举"><a href="#中国剩余定理-枚举" class="headerlink" title="中国剩余定理+枚举"></a>中国剩余定理+枚举</h4><a id="more"></a><p><strong>枚举或者CRT。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">15</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M = <span class="number">105</span>;</span><br><span class="line"><span class="keyword">int</span> c, s, x[N], k[N], y[N][M], now;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; value[N];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt; ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_enum</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (c == now) <span class="keyword">continue</span>;</span><br><span class="line">value[i].clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k[i]; j++)</span><br><span class="line">value[i].insert(y[i][j]);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">0</span>; ; t++)&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k[now]; i++)&#123;</span><br><span class="line"> <span class="keyword">long</span> <span class="keyword">long</span> n = (<span class="keyword">long</span> <span class="keyword">long</span>)x[now] * t + y[now][i];</span><br><span class="line"> <span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"> <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (i == now) <span class="keyword">continue</span>;</span><br><span class="line"> <span class="keyword">if</span> (!value[i].count(n % x[i])) &#123;ok = <span class="literal">false</span>; <span class="keyword">break</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ok) &#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n); <span class="keyword">if</span> (--s == <span class="number">0</span>) <span class="keyword">return</span>;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> &amp;x, <span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> a;&#125;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> d = exgcd(b, a % b, y, x);</span><br><span class="line">y -= a / b * x;</span><br><span class="line"> <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">china</span><span class="params">()</span><span class="comment">//利用CRT来算出结果。 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> M = <span class="number">1</span>, ans = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++)</span><br><span class="line"> M *= x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> w = M / x[i];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> xx, yy;</span><br><span class="line">exgcd(x[i], w, xx, yy);</span><br><span class="line">ans = (ans + w * yy * a[i]) % M;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> (ans + M) % M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> d)</span><span class="comment">//把每一列的余数存进a数组 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (d == c)&#123;</span><br><span class="line">ans.push_back(china());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k[d]; i++)&#123;</span><br><span class="line"> a[d] = y[d][i];</span><br><span class="line"> dfs(d + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve_china</span><span class="params">()</span></span>&#123;</span><br><span class="line">ans.clear();</span><br><span class="line">dfs(<span class="number">0</span>);</span><br><span class="line">sort(ans.begin(), ans.end());</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> M = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++) M *= x[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ans.size(); j++)&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n = M * i + ans[j];<span class="comment">//通解 M*i +x </span></span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n); <span class="keyword">if</span> (--s == <span class="number">0</span>) <span class="keyword">return</span>;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;c, &amp;s) &amp;&amp; s || c)&#123;</span><br><span class="line">now = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x[i], &amp;k[i]);</span><br><span class="line">sum *= k[i];</span><br><span class="line"><span class="keyword">if</span> (k[i]*x[now]&lt;k[now]*x[i])</span><br><span class="line">now = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k[i]; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;y[i][j]);</span><br><span class="line">sort(y[i], y[i] + k[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (sum &gt; <span class="number">10000</span>) solve_enum();</span><br><span class="line">  <span class="keyword">else</span> solve_china();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Help Hanzo</title>
      <link href="/2019/09/19/Help%20Hanzo/"/>
      <url>/2019/09/19/Help%20Hanzo/</url>
      
        <content type="html"><![CDATA[<h4 id="大区间筛素数。"><a href="#大区间筛素数。" class="headerlink" title="大区间筛素数。"></a>大区间筛素数。</h4><a id="more"></a><p><strong>我们先把一个大区间的素数全部筛出来，然后根据区间的移动来筛取他的的素数。如果左区间是1，则要多减一个。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mx = <span class="number">1e6</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[mx];</span><br><span class="line"><span class="keyword">bool</span> isprime[mx];</span><br><span class="line"><span class="keyword">int</span> prime[mx];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getPrime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> m = (<span class="keyword">int</span>)<span class="built_in">sqrt</span>(mx+<span class="number">0.5</span>);</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;mx;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])&#123;</span><br><span class="line">prime[cnt++]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;mx;j+=i)&#123;</span><br><span class="line">vis[j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">getPrime();</span><br><span class="line"><span class="keyword">int</span> con=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">memset</span>(isprime,<span class="number">0</span>,<span class="keyword">sizeof</span> isprime);</span><br><span class="line">ll a,b; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>,&amp;a,&amp;b);</span><br><span class="line">ll ans=b-a+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">1</span>) ans--; <span class="comment">//筛的时候1的倍数不会筛，如果左区间是1会把他算成素数所以要减去。 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cnt&amp;&amp;<span class="number">1L</span>L*prime[i]*prime[i]&lt;=b;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=a/prime[i]*prime[i];j&lt;=b;j+=prime[i])&#123;<span class="comment">//j=a/prime[i]*prime[i]让j最接近a。 </span></span><br><span class="line"><span class="keyword">if</span>(j&gt;=a&amp;&amp;j&gt;prime[i]) isprime[j-a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=b-a;i++) <span class="keyword">if</span>(isprime[i]) ans--;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>,con++,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vases and Flowers</title>
      <link href="/2019/09/17/Vases%20and%20Flowers/"/>
      <url>/2019/09/17/Vases%20and%20Flowers/</url>
      
        <content type="html"><![CDATA[<h4 id="二分-区间修改"><a href="#二分-区间修改" class="headerlink" title="二分+区间修改"></a>二分+区间修改</h4><p>二分找到最左和最右的空瓶子的位置。<br><a id="more"></a><br><strong>下标是0-n-1！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> m,n,arr[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,sum;<span class="comment">//空瓶子数量</span></span><br><span class="line"><span class="keyword">int</span> lazy;</span><br><span class="line">&#125;node[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;node[i].sum=node[i&lt;&lt;<span class="number">1</span>].sum+node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"i: "&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line">node[i].l=l,node[i].r=r,node[i].lazy=<span class="number">-1</span>;</span><br><span class="line">node[i].sum=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].lazy!=<span class="number">-1</span>)&#123;</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>].lazy=node[i].lazy;</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=node[i].lazy;</span><br><span class="line"><span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>].sum=(mid-node[i&lt;&lt;<span class="number">1</span>].l+<span class="number">1</span>)*node[i].lazy;</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum=(node[i].r-mid)*node[i].lazy;</span><br><span class="line">node[i].lazy=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].l&gt;r||node[i].r&lt;l) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(node[i].l&gt;=l&amp;&amp;node[i].r&lt;=r)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"node :"&lt;&lt;node[i].sum&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> node[i].sum;</span><br><span class="line">&#125;</span><br><span class="line">pushDown(i);</span><br><span class="line"><span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) res+=query(i&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) res+=query(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line"><span class="comment">//cout&lt;&lt;"res :"&lt;&lt;res&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> res; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].l&gt;=l&amp;&amp;node[i].r&lt;=r)&#123;</span><br><span class="line">node[i].sum=(node[i].r-node[i].l+<span class="number">1</span>)*c;</span><br><span class="line">node[i].lazy=c;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">pushDown(i);</span><br><span class="line"><span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=mid) update(i&lt;&lt;<span class="number">1</span>,l,r,c);</span><br><span class="line"><span class="keyword">if</span>(r&gt;mid) update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,c);</span><br><span class="line">pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bin_sera</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = x, r = m;</span><br><span class="line">    <span class="keyword">int</span> mid = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(query(<span class="number">1</span>, x, mid) &gt;= num) ans = mid, r = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;m,&amp;n);</span><br><span class="line">build(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">int</span> op; <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;op);</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> A,F; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;A,&amp;F);</span><br><span class="line">A++;</span><br><span class="line"><span class="keyword">int</span> cnt=query(<span class="number">1</span>,A,m);</span><br><span class="line"><span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Can not put any one.\n"</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> L=bin_sera(A,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> R=bin_sera(A,min(cnt,F));</span><br><span class="line"><span class="comment">//cout&lt;&lt;"L ;"&lt;&lt;L&lt;&lt;' '&lt;&lt;R&lt;&lt;endl;</span></span><br><span class="line">update(<span class="number">1</span>,L,R,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, L - <span class="number">1</span>, R - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> L, R;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;L, &amp;R);</span><br><span class="line">                L++; R++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, R - L + <span class="number">1</span> - query(<span class="number">1</span>, L, R));</span><br><span class="line">                update(<span class="number">1</span>, L, R, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Large Division</title>
      <link href="/2019/09/17/Large%20Division/"/>
      <url>/2019/09/17/Large%20Division/</url>
      
        <content type="html"><![CDATA[<h4 id="大数取余"><a href="#大数取余" class="headerlink" title="大数取余."></a>大数取余.</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">int</span> kk=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">string</span> a;</span><br><span class="line">ll b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">ll s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(b&lt;<span class="number">0</span>) b=-b;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.size();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]==<span class="string">'-'</span>) <span class="keyword">continue</span> ;</span><br><span class="line">s=(s*<span class="number">10</span>+a[i]-<span class="string">'0'</span>)%b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(s==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: divisible\n"</span>,kk++);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: not divisible\n"</span>,kk++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fantasy of a Summation</title>
      <link href="/2019/09/17/Fantasy%20of%20a%20Summation/"/>
      <url>/2019/09/17/Fantasy%20of%20a%20Summation/</url>
      
        <content type="html"><![CDATA[<h4 id="结论-快速幂"><a href="#结论-快速幂" class="headerlink" title="结论+快速幂"></a>结论+快速幂</h4><a id="more"></a><p>我们每次推一层循环进去可以发现每个数出现的次数是</p><script type="math/tex; mode=display">n^{k-1}*k</script><p>所以每个数都要乘以这个值并且模MOD，所以我们直接相加所有的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">1005</span>];</span><br><span class="line">ll a,b,mod;</span><br><span class="line"><span class="function">ll <span class="title">q_pow</span><span class="params">(ll a,ll b)</span></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1</span>) ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;mod;</span><br><span class="line">ll sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;arr[i];</span><br><span class="line">sum+=arr[i]%mod;</span><br><span class="line">&#125;</span><br><span class="line">ll ans=sum;</span><br><span class="line">sum=q_pow(a,b<span class="number">-1</span>);</span><br><span class="line">ll result=ans*b%mod;</span><br><span class="line">result=result*sum%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %lld\n"</span>,cnt++,result);</span><br><span class="line"><span class="comment">//cout&lt;&lt;result&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速乘听说也能过后面补。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019ICPC-南昌网络赛-Fire-Fighting Hero</title>
      <link href="/2019/09/10/Fire-Fighting%20Hero/"/>
      <url>/2019/09/10/Fire-Fighting%20Hero/</url>
      
        <content type="html"><![CDATA[<h4 id="多源最短路。"><a href="#多源最短路。" class="headerlink" title="多源最短路。"></a>多源最短路。</h4><a id="more"></a><p><strong>消防员的营地可以看成一个点，所以我们用一个超级源点与他们相连接距离是0，然后我们跑两次dij，再根据题意来比较答案就行了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int inf=0x3f3f3f3f;</span><br><span class="line">const int N=1e6+5;</span><br><span class="line">bool vis[N];</span><br><span class="line">int cnt,dis[N],head[N],v,e,s,k,c;</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">int nex,v,cost;</span><br><span class="line">&#125;node[N];</span><br><span class="line">struct nod</span><br><span class="line">&#123;</span><br><span class="line">int v,val;</span><br><span class="line">friend bool operator &lt;(nod a,nod b)&#123;</span><br><span class="line">return a.val&gt;b.val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">priority_queue&lt;nod&gt;q;</span><br><span class="line">void add(int u,int v,int cost)</span><br><span class="line">&#123;</span><br><span class="line">node[++cnt].nex=head[u];</span><br><span class="line">node[cnt].v=v;</span><br><span class="line">node[cnt].cost=cost;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">while(!q.empty()) q.pop();</span><br><span class="line">memset(vis,false,sizeof vis);</span><br><span class="line">memset(head,0,sizeof head);</span><br><span class="line">cnt=0;</span><br><span class="line">&#125;</span><br><span class="line">int dij(int s,int v)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1;i&lt;=v;i++) dis[i]=inf;</span><br><span class="line">dis[s]=0;</span><br><span class="line">nod temp; temp.v=s,temp.val=0;</span><br><span class="line">q.push(temp);</span><br><span class="line">while(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">nod u=q.top(); q.pop();</span><br><span class="line">for(int i=head[u.v];i;i=node[i].nex)&#123;</span><br><span class="line">int val=node[i].cost;</span><br><span class="line">int v=node[i].v;</span><br><span class="line">if(dis[v]&gt;dis[u.v]+val)&#123;</span><br><span class="line">dis[v]=dis[u.v]+val;</span><br><span class="line">nod next;</span><br><span class="line">next.v=v,next.val=dis[v];</span><br><span class="line">//cout&lt;&lt;&quot;s &quot;&lt;&lt;s&lt;&lt;&quot;dis :&quot;&lt;&lt;dis[v]&lt;&lt;endl;</span><br><span class="line">q.push(next);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int ans=-1;</span><br><span class="line">for(int i=1;i&lt;=v;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans=max(ans,dis[i]);</span><br><span class="line">//cout&lt;&lt;&quot;-----&quot;&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">//cout&lt;&lt;&quot;-------&quot;&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">while(t--)&#123;</span><br><span class="line">init();</span><br><span class="line">cin&gt;&gt;v&gt;&gt;e&gt;&gt;s&gt;&gt;k&gt;&gt;c;</span><br><span class="line">for(int i=1;i&lt;=k;i++)&#123;</span><br><span class="line">int temp; cin&gt;&gt;temp; </span><br><span class="line">add(0,temp,0); add(temp,0,0);</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=e;i++)&#123;</span><br><span class="line">int a,b,c; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">add(a,b,c); add(b,a,c);</span><br><span class="line">&#125;</span><br><span class="line">int ans1=dij(0,v);</span><br><span class="line">int ans2=dij(s,v);</span><br><span class="line">//cout&lt;&lt;&quot;ans1  :&quot;&lt;&lt;ans1&lt;&lt;&quot;ans2 :&quot;&lt;&lt;ans2&lt;&lt;endl;</span><br><span class="line">if(ans1*c&lt;ans2) printf(&quot;%d\n&quot;,ans1);</span><br><span class="line">else printf(&quot;%d\n&quot;,ans2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019南昌网络赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019南昌网络赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019ICPC-徐州网络赛-Longest subsequence</title>
      <link href="/2019/09/09/Longest%20subsequence/"/>
      <url>/2019/09/09/Longest%20subsequence/</url>
      
        <content type="html"><![CDATA[<h4 id="序列自动机"><a href="#序列自动机" class="headerlink" title="序列自动机"></a>序列自动机</h4><a id="more"></a><p>第一次遇见序列自动机，大概就是一个nxt数组nx(a)(b)，里面的意义就是,在a位置后面b字母出现的位置。<br><strong>这道题我们还需要考虑，如果我们最后找的位置仍然小于父串长度的话，我们可能存在父串包含子串的情况，所以要再取一个max（m+n-cur).</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=1e6+7;</span><br><span class="line">char s[maxn],t[maxn];</span><br><span class="line">int nx[maxn][26];</span><br><span class="line">int n,m;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">    scanf(&quot;%s%s&quot;,s+1,t+1);</span><br><span class="line">    for(register int i=0;i&lt;26;++i)&#123;</span><br><span class="line">        nx[n][i]=nx[n+1][i]=n+1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(register int i=n-1;i&gt;=0;--i)&#123;</span><br><span class="line">        for(register int j=0;j&lt;26;++j)&#123;</span><br><span class="line">            nx[i][j]=nx[i+1][j];</span><br><span class="line">        &#125;</span><br><span class="line">        int to=s[i+1]-&apos;a&apos;;</span><br><span class="line">        nx[i][to]=i+1;</span><br><span class="line">    &#125;</span><br><span class="line">    int cur=0,ans=-1;</span><br><span class="line">for(int i=1;t[i];i++)&#123;</span><br><span class="line">int pos=t[i]-&apos;a&apos;;</span><br><span class="line">for(int j=pos+1;j&lt;26;j++)&#123;</span><br><span class="line">int id=nx[cur][j];</span><br><span class="line">if(id&lt;=n)&#123;</span><br><span class="line">ans=max(ans,n-id+i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cur=nx[cur][pos];</span><br><span class="line">if(cur&gt;n) break;</span><br><span class="line">&#125;</span><br><span class="line">if(cur&lt;n) ans=max(ans,m+n-cur);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019徐州网络赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019徐州网络赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019ICPC-徐州网络赛-Center</title>
      <link href="/2019/09/09/Center/"/>
      <url>/2019/09/09/Center/</url>
      
        <content type="html"><![CDATA[<h4 id="map和pair的巧用"><a href="#map和pair的巧用" class="headerlink" title="map和pair的巧用"></a>map和pair的巧用</h4><a id="more"></a><p><strong>map来存中心点，加加操作可以理解为中心点把两个断点往中心拉往中心点(这样就可以解释代码中一个中心点的两个端点循环了了两次，并且i==j不能continue，因为可能加入的那个点刚好是中心点。我们计算的是一个中心点拉到了点的个数，所以再取一个max。就是拥有最多点数量的中心点。再用总点数-这个中心点的数量就是没有被这个中心点拉过去的点的数量。也就是答案。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef pair&lt;int,int&gt; Pa;</span><br><span class="line">typedef map&lt;Pa,int&gt; mp;</span><br><span class="line">const int N=10005;</span><br><span class="line">Pa pi[N];</span><br><span class="line">mp m;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">for(int i=1;i&lt;=t;i++)&#123;</span><br><span class="line">cin&gt;&gt;pi[i].first&gt;&gt;pi[i].second;</span><br><span class="line">&#125;</span><br><span class="line">int ans=0;</span><br><span class="line">for(int i=1;i&lt;=t;i++)&#123;</span><br><span class="line">for(int j=1;j&lt;=t;j++)&#123;</span><br><span class="line">//if(i==j) continue;</span><br><span class="line">int fx=pi[i].first+pi[j].first;</span><br><span class="line">int fy=pi[i].second+pi[j].second;</span><br><span class="line">m[&#123;fx,fy&#125;]++;</span><br><span class="line">ans=max(ans,m[&#123;fx,fy&#125;]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;t-ans&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019徐州网络赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019徐州网络赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vacation</title>
      <link href="/2019/09/07/HDU6581/"/>
      <url>/2019/09/07/HDU6581/</url>
      
        <content type="html"><![CDATA[<h4 id="思维题："><a href="#思维题：" class="headerlink" title="思维题："></a>思维题：</h4><a id="more"></a>**线性扫一遍记录最大值。注意以车头为准。**<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> len;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">200005</span>;</span><br><span class="line"><span class="keyword">double</span> l[N],s[N],v[N];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> a,<span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a&gt;b)</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;l[i]);<span class="comment">//车身长度 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;s[i]);<span class="comment">//距离终点距离 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;v[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">double</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">double</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">0</span>)</span><br><span class="line">len+=l[i];</span><br><span class="line">ans=max(ans,(len+s[i])/v[i]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;"l :"&lt;&lt;l[i]&lt;&lt;" s: "&lt;&lt;s[i]&lt;&lt;"  v "&lt;&lt;v[i]&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;"ans: "&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.10lf\n"</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019航电多校 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019航电多校 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysterious Bacteria</title>
      <link href="/2019/09/07/Mysterious%20Bacteria-%E5%94%AF%E4%B8%80%E5%88%86%E8%A7%A3%E5%AE%9A%E7%90%86/"/>
      <url>/2019/09/07/Mysterious%20Bacteria-%E5%94%AF%E4%B8%80%E5%88%86%E8%A7%A3%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h4 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h4><a id="more"></a><h5 id="题意："><a href="#题意：" class="headerlink" title="题意："></a>题意：</h5><p>给一个X，找出b^p=x，最大的p。<br><strong>有一个坑点如果给一个数是负数，那么应该是奇数次方才行，所以我们要把他们的所有偶数次方都转换为奇数次方。（因为偶数次方只可能是正数。）至于为什么要GCD举一个简单的例子就是，216=2^3*3^3=6^3，当一个次方相同的时候底数可以相乘来合并，所以要找到所有次数满足的最小次数。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> tot,d,a[<span class="number">100</span>];</span><br><span class="line">ll ans[N/<span class="number">10</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(vis,<span class="number">1</span>,<span class="keyword">sizeof</span> vis);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;N;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i]) ans[++tot]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=tot&amp;&amp;i*ans[j]&lt;N;j++)&#123;</span><br><span class="line">vis[i*ans[j]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(i%ans[j]==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sbreak</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">d=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;ans[i]&lt;=<span class="built_in">sqrt</span>(x);i++)&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(x%ans[i]==<span class="number">0</span>) d++;</span><br><span class="line"><span class="keyword">while</span>(x%ans[i]==<span class="number">0</span>)&#123;</span><br><span class="line">x/=ans[i];</span><br><span class="line">a[d]=++cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">1</span>) &#123;</span><br><span class="line">d++;a[d]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">prime();</span><br><span class="line"><span class="keyword">int</span> t,cas=<span class="number">0</span>; <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)&#123;</span><br><span class="line">ll x;</span><br><span class="line"><span class="keyword">int</span> tag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">x=-x;tag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sbreak(x);</span><br><span class="line"><span class="keyword">int</span> t=a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(tag)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i]%<span class="number">2</span>==<span class="number">0</span>) a[i]/=<span class="number">2</span>;</span><br><span class="line">t=gcd(t,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=d;i++)&#123;</span><br><span class="line">t=gcd(t,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,++cas,t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019ICPC-徐州网络赛-so easy</title>
      <link href="/2019/09/07/so%20easy/"/>
      <url>/2019/09/07/so%20easy/</url>
      
        <content type="html"><![CDATA[<h4 id="并查集-离散化"><a href="#并查集-离散化" class="headerlink" title="并查集+离散化"></a>并查集+离散化</h4><p><strong>用unordered_map来模拟pre数组，用并查集来模拟一个链表关系。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">unordered_map&lt;int,int&gt; mp;</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">if(!mp.count(x)) return x;</span><br><span class="line">return mp[x]=find(mp[x]);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">while(m--)&#123;</span><br><span class="line">int a,b;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</span><br><span class="line">if(a==1)</span><br><span class="line">&#123;</span><br><span class="line">mp[b]=find(b+1);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">int ans=find(b);</span><br><span class="line">if(ans&lt;=n)</span><br><span class="line">printf(&quot;%d\n&quot;,ans);</span><br><span class="line">else</span><br><span class="line">printf(&quot;-1\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019徐州网络赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 2019徐州网络赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wormholes</title>
      <link href="/2019/09/05/Wormholes/"/>
      <url>/2019/09/05/Wormholes/</url>
      
        <content type="html"><![CDATA[<h4 id="纪念头铁的一天："><a href="#纪念头铁的一天：" class="headerlink" title="纪念头铁的一天："></a>纪念头铁的一天：</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 505;</span><br><span class="line">int dis[N],head[N],cnt;</span><br><span class="line">int maze[N][N];</span><br><span class="line">int n,m,k;</span><br><span class="line">const int inf = 0x3f3f3f3f;</span><br><span class="line">int floy()</span><br><span class="line">&#123;</span><br><span class="line">for(int k=1;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=1;j&lt;=n;j++)</span><br><span class="line">&#123;</span><br><span class="line">int t=maze[i][k]+maze[k][j];</span><br><span class="line">                if(maze[i][j]&gt;t)maze[i][j]=t;</span><br><span class="line">&#125;</span><br><span class="line">if(maze[i][i]&lt;0) return 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">while(t--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">memset(maze,inf,sizeof maze);</span><br><span class="line">for(int i=1;i&lt;=n;i++) maze[i][i]=0;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">int a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">if(c&lt;maze[a][b]) maze[a][b]=maze[b][a]=c;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">int a,b,c;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">maze[a][b]=-c;</span><br><span class="line">&#125;</span><br><span class="line">if(floy())</span><br><span class="line">cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuangbin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路练习</title>
      <link href="/2019/09/04/Frogger/"/>
      <url>/2019/09/04/Frogger/</url>
      
        <content type="html"><![CDATA[<h4 id="是最长路最小。很绕。"><a href="#是最长路最小。很绕。" class="headerlink" title="是最长路最小。很绕。"></a>是最长路最小。很绕。</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mem(a,b) memset(a,b,sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxnum 300</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 99999999</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x[maxnum],y[maxnum],n;</span><br><span class="line"><span class="keyword">double</span> <span class="built_in">map</span>[maxnum][maxnum];</span><br><span class="line"><span class="keyword">double</span> dis[maxnum];</span><br><span class="line"><span class="keyword">int</span> vis[maxnum];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">double</span>&gt;pp;</span><br><span class="line">priority_queue&lt;pp,<span class="built_in">vector</span>&lt;pp&gt;,greater&lt;pp&gt; &gt;q;</span><br><span class="line"><span class="keyword">double</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dj</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    mem(vis,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">        dis[i]=inf;</span><br><span class="line">    dis[s]=<span class="number">0</span>;</span><br><span class="line">    q.push(make_pair(<span class="number">0</span>,s));</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=q.top().second;</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">continue</span>;vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[i]&gt;max(dis[u],<span class="built_in">map</span>[u][i]))</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=max(dis[u],<span class="built_in">map</span>[u][i]);</span><br><span class="line">q.push(make_pair(dis[i],i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> q=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        mem(<span class="built_in">map</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x[i],&amp;y[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>; j&lt;=n; j++)</span><br><span class="line">                <span class="built_in">map</span>[i][j]=<span class="built_in">map</span>[j][i]=<span class="built_in">sqrt</span>(<span class="keyword">double</span>(x[i]-x[j])*(x[i]-x[j])+<span class="keyword">double</span>(y[i]-y[j])*(y[i]-y[j]));</span><br><span class="line">        dj(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d\nFrog Distance = %.3f\n\n"</span>,q++,dis[<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kuangbin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯学习</title>
      <link href="/2019/09/01/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/09/01/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%87%BD%E6%95%B0%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>学习链接：<br><a id="more"></a><br><a href="https://blog.csdn.net/tomandjake_/article/details/81083703" target="_blank" rel="noopener">https://blog.csdn.net/tomandjake_/article/details/81083703</a><br><a href="https://blog.csdn.net/litble/article/details/72804050" target="_blank" rel="noopener">https://blog.csdn.net/litble/article/details/72804050</a><br><a href="https://www.cnblogs.com/qdscwyy/p/8012843.html" target="_blank" rel="noopener">https://www.cnblogs.com/qdscwyy/p/8012843.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Welfare State</title>
      <link href="/2019/09/01/Welfare%20State/"/>
      <url>/2019/09/01/Welfare%20State/</url>
      
        <content type="html"><![CDATA[<p>线段树裸题<br><a id="more"></a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> arr[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> l,r,date,lazy;</span><br><span class="line">&#125;node[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node[i].date=max(node[i&lt;&lt;<span class="number">1</span>].date,node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].date);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].lazy)&#123;</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>].lazy=max(node[i&lt;&lt;<span class="number">1</span>].lazy,node[i].lazy);</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy=max(node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].lazy,node[i].lazy);</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>].date=max(node[i&lt;&lt;<span class="number">1</span>].date,node[i].lazy);</span><br><span class="line">node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].date=max(node[i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].date,node[i].lazy);</span><br><span class="line">node[i].lazy=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> indexx,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].l==node[i].r)</span><br><span class="line">&#123;</span><br><span class="line">node[i].date=val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">pushDown(i);</span><br><span class="line"><span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=indexx)&#123;</span><br><span class="line">update(i&lt;&lt;<span class="number">1</span>,indexx,val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">update(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,indexx,val);</span><br><span class="line">&#125;</span><br><span class="line">pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qu</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(node[i].l==l&amp;&amp;node[i].r==r) <span class="keyword">return</span> node[i].date;</span><br><span class="line"><span class="keyword">int</span> mid=node[i].l+node[i].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">pushDown(i);</span><br><span class="line"><span class="keyword">if</span>(mid&lt;l)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> qu(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> qu(i&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_tree</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node[i].l=l;</span><br><span class="line">node[i].r=r;</span><br><span class="line">node[i].lazy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)</span><br><span class="line">&#123;</span><br><span class="line">node[i].date=arr[l];</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">build_tree(i&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">build_tree(i&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node[i].date=max(node[i].date,val);</span><br><span class="line">node[i].lazy=max(node[i].lazy,val);</span><br><span class="line">pushDown(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> q;</span><br><span class="line">build_tree(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a,b,c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a);</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;b);</span><br><span class="line">query(<span class="number">1</span>,b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;b,&amp;c);</span><br><span class="line">update(<span class="number">1</span>,b,c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,qu(<span class="number">1</span>,i,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shortest Cycle</title>
      <link href="/2019/08/23/Shortest%20Cycle/"/>
      <url>/2019/08/23/Shortest%20Cycle/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>最小换模板题。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> arr[N*<span class="number">100</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> gra[N][N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> m[N][N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b[N*<span class="number">100</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n,res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">res=inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">res=min(res,gra[i][j]+m[i][k]+m[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">gra[i][j]=min(gra[i][j],gra[i][k]+gra[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;arr[i]); <span class="keyword">if</span>(arr[i]) b[cnt++]=arr[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">200</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"3\n"</span>); <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) <span class="keyword">continue</span>;</span><br><span class="line">m[i][j]=gra[i][j]=inf;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j) <span class="keyword">continue</span> ;</span><br><span class="line"><span class="keyword">if</span>((b[i]&amp;b[j])!=<span class="number">0</span>) gra[i][j]=<span class="number">1</span>;</span><br><span class="line">m[i][j]=gra[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n=cnt;</span><br><span class="line">floy();</span><br><span class="line"><span class="keyword">if</span>(res==inf) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1384-全排列</title>
      <link href="/2019/08/21/51nod1384%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2019/08/21/51nod1384%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>写的有点憨憨</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;mp;</span><br><span class="line"><span class="keyword">int</span> m, n,cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[N];</span><br><span class="line"><span class="keyword">char</span> ans[N];</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="built_in">string</span> temp=<span class="string">""</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(s==k)</span><br><span class="line">&#123;</span><br><span class="line">temp=<span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;k;i++)</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">int</span>)ans[i]==<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line">temp+=ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mp[temp]) <span class="keyword">return</span> ;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;temp&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mp[temp]++;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= str.size();i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i])</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">vis[i] = <span class="number">1</span>;</span><br><span class="line">ans[s] = str[i];</span><br><span class="line"><span class="comment">//cout&lt;&lt;"ans :---"&lt;&lt;ans[s]&lt;&lt;"ASCLL   "&lt;&lt;(int)ans[s]&lt;&lt;endl;</span></span><br><span class="line">dfs(s + <span class="number">1</span>, k);</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">sort(str.begin(), str.end());</span><br><span class="line"><span class="comment">//cout&lt;&lt;str&lt;&lt;endl;</span></span><br><span class="line">dfs(<span class="number">0</span>,str.size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="还有一种用函数的写法。"><a href="#还有一种用函数的写法。" class="headerlink" title="还有一种用函数的写法。"></a>还有一种用函数的写法。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);n=<span class="built_in">strlen</span>(s);</span><br><span class="line">sort(s,s+n);<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line"><span class="comment">//for(int i=0;i&lt;n;i++)a[i]=s[i]-'0';</span></span><br><span class="line"><span class="keyword">while</span>(next_permutation(s,s+n))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>,s);</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51NOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四点共圆</title>
      <link href="/2019/08/21/51nod%E5%9B%9B%E7%82%B9%E5%85%B1%E5%9C%86/"/>
      <url>/2019/08/21/51nod%E5%9B%9B%E7%82%B9%E5%85%B1%E5%9C%86/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>四个点，任意组成三个不同的向量，然后组成一个行列式。如果行列式为0则在同一平面反之不成立。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,z;</span><br><span class="line">&#125; p[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">4</span>; i++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;p[i].x,&amp;p[i].y,&amp;p[i].z);</span><br><span class="line">        Point s1,s2,s3;</span><br><span class="line">        s1.x=p[<span class="number">1</span>].x-p[<span class="number">0</span>].x;</span><br><span class="line">        s1.y=p[<span class="number">1</span>].y-p[<span class="number">0</span>].y;</span><br><span class="line">        s1.z=p[<span class="number">1</span>].z-p[<span class="number">0</span>].z;</span><br><span class="line">        s2.x=p[<span class="number">2</span>].x-p[<span class="number">0</span>].x;</span><br><span class="line">        s2.y=p[<span class="number">2</span>].y-p[<span class="number">0</span>].y;</span><br><span class="line">        s2.z=p[<span class="number">2</span>].z-p[<span class="number">0</span>].z;</span><br><span class="line">        s3.x=p[<span class="number">3</span>].x-p[<span class="number">0</span>].x;</span><br><span class="line">        s3.y=p[<span class="number">3</span>].y-p[<span class="number">0</span>].y;</span><br><span class="line">        s3.z=p[<span class="number">3</span>].z-p[<span class="number">0</span>].z;</span><br><span class="line">        <span class="keyword">int</span> ans;</span><br><span class="line">        ans=s1.x*s2.y*s3.z+s1.y*s2.z*s3.x+s1.z*s2.x*s3.y-s1.z*s2.y*s3.x-s1.x*s2.z*s3.y-s1.y*s2.x*s3.z;</span><br><span class="line">        <span class="keyword">if</span>(ans==<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51NOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maximum Median</title>
      <link href="/2019/08/21/Maximum%20Median/"/>
      <url>/2019/08/21/Maximum%20Median/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>思维题，从中间往后面扫。因为没有考虑K特别大的情况WA了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> N, K;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N;i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; A[i];</span><br><span class="line"></span><br><span class="line">sort(A+<span class="number">1</span>,A+<span class="number">1</span>+N);</span><br><span class="line">    <span class="keyword">int</span> mid = (N+<span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> current = A[mid];</span><br><span class="line"><span class="comment">// cout &lt;&lt; current &lt;&lt; endl;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis = A[i] - A[mid];</span><br><span class="line"><span class="keyword">if</span>(K&gt;=(i - mid) * dis)</span><br><span class="line">&#123;</span><br><span class="line">K -= (i - mid) * dis;</span><br><span class="line">current += dis;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"------------"&lt;&lt;current&lt;&lt;endl; </span></span><br><span class="line">A[mid] += dis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">current += K / (i-mid);</span><br><span class="line">K %= (i-mid);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">if</span>(K) current += K/(N-mid+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; current &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2678-凌波微步</title>
      <link href="/2019/08/21/51nod2678%E5%87%8C%E6%B3%A2%E5%BE%AE%E6%AD%A5/"/>
      <url>/2019/08/21/51nod2678%E5%87%8C%E6%B3%A2%E5%BE%AE%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>每台机子我们最多使用1次，或者一次都不使用。最后算一下曼哈顿距离就可以了。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ll x, y, lx, ly;</span><br><span class="line">&#125;node[<span class="number">4</span>];</span><br><span class="line">ll x, y, last_x, last_y;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">4</span>];</span><br><span class="line">ll ans=<span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="function">ll <span class="title">dist</span><span class="params">(ll u,ll v,ll mx,ll my)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(u - mx) + <span class="built_in">abs</span>(v - my);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> k,ll u,ll v,ll time)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line">ans = min(ans, time+dist(u, v, last_x, last_y));</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">dfs(k + <span class="number">1</span>, u, v, time);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[i])</span><br><span class="line">&#123;</span><br><span class="line">vis[i] = <span class="number">1</span>;</span><br><span class="line">dfs(k + <span class="number">1</span>, node[i].x, node[i].y, time + <span class="number">10</span> + dist(u, v, node[i].lx, node[i].ly));</span><br><span class="line">dfs(k + <span class="number">1</span>, node[i].lx, node[i].ly, time + <span class="number">10</span> + dist(u, v, node[i].x, node[i].y));</span><br><span class="line">vis[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y &gt;&gt; last_x &gt;&gt; last_y;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; node[i].x &gt;&gt; node[i].y &gt;&gt; node[i].lx &gt;&gt; node[i].ly;</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">0</span>,x,y,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51NOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1298 圆与三角形</title>
      <link href="/2019/08/21/51nod1298%20%E5%9C%86%E4%B8%8E%E4%B8%89%E8%A7%92%E5%BD%A2/"/>
      <url>/2019/08/21/51nod1298%20%E5%9C%86%E4%B8%8E%E4%B8%89%E8%A7%92%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>把三角形看成三条边去换算。因为要计算点到直线的距离公式，所以我们写成直线的一般形式。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> x,y;</span><br><span class="line">Point()&#123;&#125;</span><br><span class="line">Point(<span class="keyword">int</span> x,<span class="keyword">int</span> y):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//圆 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span>&#123;</span></span><br><span class="line"><span class="keyword">double</span> r,x,y;</span><br><span class="line">Circle()&#123;&#125;;</span><br><span class="line">Circle(<span class="keyword">double</span> r,<span class="keyword">double</span> x,<span class="keyword">double</span> y):r(r),x(x),y(y)&#123;&#125; </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//判断直线p1p2与圆c是否相交，相交返回true，否则返回false </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(Point p1,Point p2,Circle c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag1=(p1.x-c.x)*(p1.x-c.x)+(p1.y-c.y)*(p1.y-c.y)&lt;=c.r*c.r;</span><br><span class="line"><span class="keyword">bool</span> flag2=(p2.x-c.x)*(p2.x-c.x)+(p2.y-c.y)*(p2.y-c.y)&lt;=c.r*c.r;</span><br><span class="line"><span class="keyword">if</span>(flag1&amp;&amp;flag2)<span class="comment">//情况一、两点都在圆内 :一定不相交 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(flag1||flag2) <span class="comment">//情况二、一个点在圆内，一个点在圆外：一定相交 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="comment">//情况三、两个点都在圆外 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">double</span> A,B,C,dist1,dist2,angle1,angle2;</span><br><span class="line"><span class="comment">//将直线p1p2化为一般式：Ax+By+C=0的形式。先化为两点式，然后由两点式得出一般式 </span></span><br><span class="line">A=p1.y-p2.y;</span><br><span class="line">B=p2.x-p1.x;</span><br><span class="line">C=p1.x*p2.y-p2.x*p1.y;</span><br><span class="line"><span class="comment">//使用距离公式判断圆心到直线ax+by+c=0的距离是否大于半径 </span></span><br><span class="line">dist1=A*c.x+B*c.y+C;</span><br><span class="line">dist1*=dist1;</span><br><span class="line">dist2=(A*A+B*B)*c.r*c.r;</span><br><span class="line"><span class="keyword">if</span>(dist1&gt;dist2)<span class="comment">//圆心到直线p1p2的距离大于半径，不相交 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">angle1=(c.x-p1.x)*(p2.x-p1.x)+(c.y-p1.y)*(p2.y-p1.y);</span><br><span class="line">angle2=(c.x-p2.x)*(p1.x-p2.x)+(c.y-p2.y)*(p1.y-p2.y);</span><br><span class="line"><span class="keyword">if</span>(angle1&gt;<span class="number">0</span>&amp;&amp;angle2&gt;<span class="number">0</span>)<span class="comment">//余弦为正，则是锐角，一定相交 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">Circle c;<span class="comment">//圆 </span></span><br><span class="line">Point p[<span class="number">3</span>];<span class="comment">//三角形的三个顶点 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>,&amp;c.x,&amp;c.y,&amp;c.r);<span class="comment">//读入圆的圆心和半径 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)<span class="comment">//读入三角形的三个顶点 </span></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;p[i].x,&amp;p[i].y);</span><br><span class="line"><span class="comment">//判断3条边是否与圆相交 </span></span><br><span class="line"><span class="keyword">bool</span> flag1=judge(p[<span class="number">0</span>],p[<span class="number">1</span>],c);</span><br><span class="line"><span class="keyword">bool</span> flag2=judge(p[<span class="number">1</span>],p[<span class="number">2</span>],c);</span><br><span class="line"><span class="keyword">bool</span> flag3=judge(p[<span class="number">0</span>],p[<span class="number">2</span>],c);</span><br><span class="line"><span class="keyword">if</span>(flag1||flag2||flag3)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"No\n"</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51NOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2673-最短路径</title>
      <link href="/2019/08/21/51nod2673%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/08/21/51nod2673%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">int</span> maze[<span class="number">1000</span>][<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= m;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m;j++)</span><br><span class="line">&#123;</span><br><span class="line">maze[i][j] = min(maze[i][j], maze[i][k] + maze[k][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m, &amp;n);</span><br><span class="line"><span class="built_in">memset</span>(maze,inf,<span class="keyword">sizeof</span> maze);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b, c;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">maze[a][b] = c;</span><br><span class="line">maze[b][a] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;s, &amp;t);</span><br><span class="line">floy();</span><br><span class="line"><span class="keyword">if</span>(s==t)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, maze[s][t]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 51NOD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FatMouse and Cheese-DFS</title>
      <link href="/2019/08/20/FatMouse%20and%20Cheese/"/>
      <url>/2019/08/20/FatMouse%20and%20Cheese/</url>
      
        <content type="html"><![CDATA[<h4 id="DFS练习。"><a href="#DFS练习。" class="headerlink" title="DFS练习。"></a>DFS练习。</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> maze[N][N];</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="keyword">int</span> way[<span class="number">4</span>][<span class="number">2</span>] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;node[N];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;m||x&lt;=<span class="number">0</span>||y&gt;m||y&lt;=<span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Node now,next;</span><br><span class="line">now.x = x, now.y = y;</span><br><span class="line"><span class="keyword">if</span>(dp[x][y])</span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">next.x = now.x + i * way[j][<span class="number">0</span>];</span><br><span class="line">next.y = now.y + i * way[j][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(check(next.x,next.y))</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(maze[next.x][next.y]&gt;maze[now.x][now.y])</span><br><span class="line">ans = max(ans, dfs(next.x, next.y));<span class="comment">//全部遍历</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dp[x][y] = maze[x][y]+ans;<span class="comment">//回溯相加</span></span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">cin</span>&gt;&gt;m&gt;&gt;n))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">-1</span>&amp;&amp;n==<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;maze[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs(<span class="number">1</span>,<span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Largest Rectangle in a Histogram-单调栈</title>
      <link href="/2019/08/20/Largest%20Rectangle%20in%20a%20Histogram/"/>
      <url>/2019/08/20/Largest%20Rectangle%20in%20a%20Histogram/</url>
      
        <content type="html"><![CDATA[<h4 id="单调栈练习："><a href="#单调栈练习：" class="headerlink" title="单调栈练习："></a>单调栈练习：</h4><a id="more"></a><p><strong>总结一些单调栈做这一类题的性质：</strong></p><ol><li>什么是单调栈</li></ol><p>单调栈就是保持了单调性和栈的性质；</p><p>单调递增的栈就是从栈尾到栈顶是单调递增的；</p><ol><li>单调栈能够解决的问题</li></ol><p>1） 以自己为最小或最大值找到最大的区间，（对应 单调递增/单调递减）；</p><p>2） 给定一个区间，找到这个区间的最大或最小值；</p><ol><li>单调栈的性质</li></ol><p>1） 对于第一个出栈元素，它的右宽一定为0；</p><p>2） 对于第二个出栈元素，它的右宽为前一个出栈元素的总宽；</p><p>3） 对于第三个出栈元素，它的右宽为第二个出栈元素的总宽；</p><pre><code>   …………</code></pre><p>4） 好了，终于遇到了比自己小的元素可以入栈了，那么入栈元素的左宽为上次出栈元素的总宽+1（自身）；（若无出栈元素，则左宽为1（自身）</p><p>5） 最后将栈中所有元素出栈考虑所有情况；</p><p><strong>对于本题来说，第一次入栈的左宽一定是1。第一个出栈的有宽度一定是0，对于后一个出栈的右宽一定是上一个出栈的总宽。出栈完再入栈的那个元素的左宽肯定为上一个出栈元素的总宽。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> w[N];</span><br><span class="line"><span class="keyword">int</span> st[N]=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> top;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">top = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i!=n+<span class="number">1</span>)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"><span class="keyword">else</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(st[top]&lt;temp)</span><br><span class="line">&#123;</span><br><span class="line">st[++top] = temp;</span><br><span class="line">w[top] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(top&gt;<span class="number">0</span>&amp;&amp;st[top]&gt;=temp)</span><br><span class="line">&#123;</span><br><span class="line">ans = max(ans, (w[top] + cnt) * st[top]);</span><br><span class="line">cnt = cnt+ w[top--];</span><br><span class="line">&#125;</span><br><span class="line">st[++top]=temp;</span><br><span class="line">w[top] = cnt + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lotto-DFS</title>
      <link href="/2019/08/20/Lotto/"/>
      <url>/2019/08/20/Lotto/</url>
      
        <content type="html"><![CDATA[<h4 id="排序-dfs"><a href="#排序-dfs" class="headerlink" title="排序+dfs"></a>排序+dfs</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">6</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = cur; i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">ans[x] = arr[i];</span><br><span class="line">dfs(x + <span class="number">1</span>,i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">cin</span>&gt;&gt;m),m)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + m);</span><br><span class="line">dfs(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数塔-DFS</title>
      <link href="/2019/08/20/%E6%95%B0%E5%A1%94/"/>
      <url>/2019/08/20/%E6%95%B0%E5%A1%94/</url>
      
        <content type="html"><![CDATA[<h4 id="DFS复习"><a href="#DFS复习" class="headerlink" title="DFS复习"></a>DFS复习</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> maze[N][N];</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="keyword">bool</span> vis[N][N];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dp[x][y])</span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line"><span class="keyword">if</span>(x&gt;n||y&gt;n)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">ans = max(maze[x][y] + dfs(x + <span class="number">1</span>, y), maze[x][y] + dfs(x + <span class="number">1</span>, y + <span class="number">1</span>));</span><br><span class="line">dp[x][y]=ans;</span><br><span class="line"><span class="keyword">return</span> dp[x][y];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; maze[i][j];</span><br><span class="line"><span class="keyword">if</span>(i==n)</span><br><span class="line">dp[i][j] = maze[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; dfs(<span class="number">1</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sum It Up-DFS</title>
      <link href="/2019/08/19/Sum%20It%20Up(dfs)/"/>
      <url>/2019/08/19/Sum%20It%20Up(dfs)/</url>
      
        <content type="html"><![CDATA[<h4 id="深搜复习："><a href="#深搜复习：" class="headerlink" title="深搜复习："></a>深搜复习：</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10005</span>];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> indexx,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(num&gt;n)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(num==n)</span><br><span class="line">&#123;</span><br><span class="line">flag=<span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; end;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"+"</span> &lt;&lt; ans[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = indexx; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i==indexx||arr[i<span class="number">-1</span>]!=arr[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"i :"&lt;&lt;"---------"&lt;&lt;i&lt;&lt;"\n";</span></span><br><span class="line">ans[end] = arr[i];</span><br><span class="line">dfs(arr[i] + num, i + <span class="number">1</span>, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>((<span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m),m,n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(arr + <span class="number">1</span>, arr + <span class="number">1</span> + m,cmp);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Sums of "</span>&lt;&lt;n&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line">dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;"---------"&lt;&lt;flag&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(!flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"NONE"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Connect the Cities</title>
      <link href="/2019/08/18/Connect%20the%20Cities/"/>
      <url>/2019/08/18/Connect%20the%20Cities/</url>
      
        <content type="html"><![CDATA[<h4 id="最小生成树-优先队列。"><a href="#最小生成树-优先队列。" class="headerlink" title="最小生成树+优先队列。"></a>最小生成树+优先队列。</h4><a id="more"></a><p><strong>学会了重载运算的写法。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[N], ran[N], n, m, k, a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v, cost;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (Node e1, Node e2)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> e1.cost&gt;e2.cost;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;node[N];</span><br><span class="line">priority_queue&lt;Node, <span class="built_in">vector</span>&lt;Node&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==pre[x])</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> pre[x] = Find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">krs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">Node u = q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">int</span> x = u.u, y = u.v, cost = u.cost;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;cost&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> fx = Find(x);</span><br><span class="line"><span class="keyword">int</span> fy = Find(y);</span><br><span class="line"><span class="comment">//cout&lt;&lt;fx&lt;&lt;' '&lt;&lt;fy&lt;&lt;endl; </span></span><br><span class="line"><span class="keyword">if</span>(fx!=fy)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;1&lt;&lt;endl;</span></span><br><span class="line">pre[fx] = fy;</span><br><span class="line">ans += cost;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line"><span class="keyword">if</span>(Find(i)==i)</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt&gt;<span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">Node temp;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;temp.u, &amp;temp.v, &amp;temp.cost);</span><br><span class="line">q.push(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(k--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> s;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;s);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=s; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">                <span class="keyword">if</span>(i&gt;<span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">Node temp;</span><br><span class="line">temp.u = a[i - <span class="number">1</span>];</span><br><span class="line">temp.v = a[i];</span><br><span class="line">temp.cost = <span class="number">0</span>;</span><br><span class="line">q.push(temp);</span><br><span class="line">&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; krs() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>More is better</title>
      <link href="/2019/08/18/More%20is%20better/"/>
      <url>/2019/08/18/More%20is%20better/</url>
      
        <content type="html"><![CDATA[<h5 id="最大连通块的元素个数。"><a href="#最大连通块的元素个数。" class="headerlink" title="最大连通块的元素个数。"></a>最大连通块的元素个数。</h5><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e7</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> pre[N], ran[N],n;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">mp.clear();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200005</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">pre[i] = i;</span><br><span class="line">ran[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==pre[u])</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">return</span> pre[u] = find(pre[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">un</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx = find(a);</span><br><span class="line"><span class="keyword">int</span> fy = find(b);</span><br><span class="line"><span class="keyword">if</span>(fx!=fy)</span><br><span class="line">&#123;</span><br><span class="line">pre[fx] = fy;</span><br><span class="line">ran[fy] += ran[fx];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line"><span class="keyword">if</span>(!mp[a])</span><br><span class="line">mp[a]=++cnt;</span><br><span class="line"><span class="keyword">if</span>(!mp[b])</span><br><span class="line">mp[b]=++cnt;</span><br><span class="line">un(mp[a], mp[b]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"i :"&lt;&lt;i&lt;&lt;' '&lt;&lt;ran[i]&lt;&lt;endl;</span></span><br><span class="line">ans = max(ans, ran[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell入门</title>
      <link href="/2019/08/18/Shell%E5%85%A5%E9%97%A8/"/>
      <url>/2019/08/18/Shell%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>学了几个简单的命令<br>ls-&gt;list;<br>ls -l-&gt;打印相信信息(可以指定详细信息（跟目录路径）).<br>cd-&gt;change dir；<br>cd ..-&gt;返回上一级。<br>cd~-&gt;返回默认目录<br>pwd==print working dir-&gt;打印当前目录<br><strong>刚才傻逼了，在一个文件里面找路径所以一直没有找到路径。</strong><br>mv 像移动的文件+空格+移动到的文件路径。<br>curl ‘网页地址’ （打开网页）<br> curl -L -o 下载到哪 ‘网页地址’ （下载网页).<br> 打开文件：cat 或者 less less打开的话相当于可以翻页的那种。less 打开后退出浏览模式要用小q。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Big Christmas Tree 【POJ - 3013】【优先队列优化的dijkstra】</title>
      <link href="/2019/08/17/Big%20Christmas%20Tree%20%E3%80%90POJ%20-%203013%E3%80%91%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%E7%9A%84dijkstra%E3%80%91/"/>
      <url>/2019/08/17/Big%20Christmas%20Tree%20%E3%80%90POJ%20-%203013%E3%80%91%E3%80%90%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97%E4%BC%98%E5%8C%96%E7%9A%84dijkstra%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h4 id="要开long-long-开始疯狂WA还有就是long-long-的无穷是后面加8个3f。"><a href="#要开long-long-开始疯狂WA还有就是long-long-的无穷是后面加8个3f。" class="headerlink" title="要开long long 开始疯狂WA还有就是long long 的无穷是后面加8个3f。"></a>要开long long 开始疯狂WA还有就是long long 的无穷是后面加8个3f。</h4><a id="more"></a><p>读懂题很好做，是一个优先队列优化的di板子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 100100;</span><br><span class="line">int head[N],cnt;</span><br><span class="line">long long dis[N],wight[N];</span><br><span class="line">int m, n;</span><br><span class="line">bool vis[N];</span><br><span class="line">const long long inf = 0x3f3f3f3f3f3f3f3f;</span><br><span class="line">#define pp pair&lt;int,int&gt;</span><br><span class="line">priority_queue&lt;pp, vector&lt;pp&gt;, greater&lt;pp&gt; &gt; q;</span><br><span class="line">pair&lt;int,int&gt; p;</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">    long long next, v, cost;</span><br><span class="line">&#125; node[N];</span><br><span class="line">void add(int u,int v,int cost)</span><br><span class="line">&#123;</span><br><span class="line">    node[++cnt].next = head[u];</span><br><span class="line">    node[cnt].v = v;</span><br><span class="line">    node[cnt].cost = cost;</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    memset(head, 0, sizeof head);</span><br><span class="line">    cnt = 0;</span><br><span class="line">&#125;</span><br><span class="line">void dijstra(int s)</span><br><span class="line">&#123;</span><br><span class="line">    memset(dis, inf, sizeof dis);</span><br><span class="line">    memset(vis, 0, sizeof vis);</span><br><span class="line">    q.push(make_pair(0, 1));</span><br><span class="line">    dis[s] = 0;</span><br><span class="line">    </span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        long long u = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        if(vis[u])</span><br><span class="line">            continue;</span><br><span class="line">        vis[u] = 1;</span><br><span class="line">        for (int i = head[u]; i;i=node[i].next)</span><br><span class="line">        &#123;</span><br><span class="line">            long long v = node[i].v;</span><br><span class="line">            long long cost = node[i].cost;</span><br><span class="line">            if(dis[v]&gt;dis[u]+cost)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + cost;</span><br><span class="line">                q.push(make_pair(dis[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        int flag = 0;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span><br><span class="line">        init();</span><br><span class="line">        for (int i = 1; i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%lld&quot;,&amp;wight[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int a, b;</span><br><span class="line">            long long c;</span><br><span class="line">            scanf(&quot;%d%d%lld&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            add(a, b, c);</span><br><span class="line">            add(b,a,c);</span><br><span class="line">        &#125;</span><br><span class="line">        dijstra(1);</span><br><span class="line">        long long ans = 0;</span><br><span class="line">        for (int i = 1; i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(dis[i]!=inf)</span><br><span class="line">            &#123;</span><br><span class="line">                ans += dis[i]*wight[i];</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                flag = 1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(!flag) printf(&quot;%lld\n&quot;, ans);</span><br><span class="line">        else printf(&quot;No Answer\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ - 1703（并查集变形）</title>
      <link href="/2019/08/17/%E3%80%90POJ%20-%201703%E3%80%91%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E5%8F%98%E5%BD%A2%E3%80%91/"/>
      <url>/2019/08/17/%E3%80%90POJ%20-%201703%E3%80%91%E3%80%90%E5%B9%B6%E6%9F%A5%E9%9B%86%E7%9A%84%E5%8F%98%E5%BD%A2%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h4 id="回顾篇-每次写老题有了新的感悟。"><a href="#回顾篇-每次写老题有了新的感悟。" class="headerlink" title="回顾篇-每次写老题有了新的感悟。"></a>回顾篇-每次写老题有了新的感悟。</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 500005;</span><br><span class="line">int pre[N], ran[N];</span><br><span class="line">int m,n;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 1; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">        ran[i] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(pre[x]==x)</span><br><span class="line">        return x;</span><br><span class="line">    int f = find(pre[x]);</span><br><span class="line">    ran[x] = (ran[x] + ran[pre[x]]) % 2;</span><br><span class="line">    return pre[x] = f;</span><br><span class="line">&#125;</span><br><span class="line">void un(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fx = find(a);</span><br><span class="line">    int fy = find(b);</span><br><span class="line">    if(fx!=fy)</span><br><span class="line">    &#123;</span><br><span class="line">        ran[fx] = (ran[b] - ran[a] + 1) % 2;</span><br><span class="line">        pre[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;m,&amp;n);</span><br><span class="line">        init();</span><br><span class="line">        for (int i = 1; i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            char a;</span><br><span class="line">            cin &gt;&gt; a;</span><br><span class="line">            if(a==&apos;A&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                int c, d;</span><br><span class="line">                scanf(&quot;%d%d&quot;,&amp;c,&amp;d);</span><br><span class="line">                int fx = find(c);</span><br><span class="line">                int fy = find(d);</span><br><span class="line">                if(fx!=fy)</span><br><span class="line">                    printf(&quot;Not sure yet.\n&quot;);</span><br><span class="line">                else if(fx==fy&amp;&amp;ran[c]==ran[d])</span><br><span class="line">                    printf(&quot;In the same gang.\n&quot;);</span><br><span class="line">                else</span><br><span class="line">                    printf(&quot;In different gangs.\n&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            else </span><br><span class="line">            &#123;</span><br><span class="line">                int c, d;</span><br><span class="line">                scanf(&quot;%d%d&quot;,&amp;c,&amp;d);</span><br><span class="line">                un(c, d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2746 [USACO5.3]校园网Network of Schools</title>
      <link href="/2019/08/15/P2746%20%5BUSACO5.3%5D%E6%A0%A1%E5%9B%AD%E7%BD%91Network%20of%20Schools/"/>
      <url>/2019/08/15/P2746%20%5BUSACO5.3%5D%E6%A0%A1%E5%9B%AD%E7%BD%91Network%20of%20Schools/</url>
      
        <content type="html"><![CDATA[<h4 id="Tarjan-缩点）"><a href="#Tarjan-缩点）" class="headerlink" title="Tarjan(缩点）"></a>Tarjan(缩点）</h4><a id="more"></a><p><strong>题意很清楚，A任务就是找入度为0的点有几个，B任务就是找入度为0的和出度为0的个数取一个最大。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">int</span> low[N], <span class="built_in">stack</span>[N],head[N],top,cnt,color[N],dfn[N],num,in[N],out[N],indexx;</span><br><span class="line"><span class="keyword">bool</span> instack[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, v;</span><br><span class="line">&#125;node[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    node[++cnt].next = head[u];</span><br><span class="line">    node[cnt].v = v;</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">low[u]=dfn[u]=++indexx; </span><br><span class="line">    <span class="built_in">stack</span>[++top] = u;</span><br><span class="line">    instack[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i;i=node[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = node[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v);</span><br><span class="line">            low[u] = min(low[u], low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v])</span><br><span class="line">            low[u] = min(low[u], dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dfn[u]==low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            color[<span class="built_in">stack</span>[top]] = num;</span><br><span class="line">            instack[<span class="built_in">stack</span>[top]] = <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (<span class="built_in">stack</span>[top--] != u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&amp;&amp;a)</span><br><span class="line">        &#123;</span><br><span class="line">            add(i, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            tarjan(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; j;j=node[j].next)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(color[i]!=color[node[j].v])</span><br><span class="line">            &#123;</span><br><span class="line">                out[color[i]]++;</span><br><span class="line">                in[color[node[j].v]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> inc = <span class="number">0</span>, outc = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= num;i ++) &#123;</span><br><span class="line">        inc += in[i] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">        outc += out[i] == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"1\n0"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; inc &lt;&lt; <span class="built_in">endl</span> &lt;&lt; max(inc, outc) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3388 【模板】割点（割顶）</title>
      <link href="/2019/08/15/P3388%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%89%B2%E7%82%B9%EF%BC%88%E5%89%B2%E9%A1%B6/"/>
      <url>/2019/08/15/P3388%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%89%B2%E7%82%B9%EF%BC%88%E5%89%B2%E9%A1%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="Tarjan找割点（桥）"><a href="#Tarjan找割点（桥）" class="headerlink" title="Tarjan找割点（桥）"></a>Tarjan找割点（桥）</h4><a id="more"></a><p><strong>*判定条件：</strong><br>x == from时：子树个数&gt;1<br>x != from时：low[e[i].to] &gt;= dfn[x]</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>, M = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v, next;</span><br><span class="line">&#125; e[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> low[M], que[M], cnt, head[M], <span class="built_in">stack</span>[M], top, indexx, dfn[M];</span><br><span class="line"><span class="keyword">bool</span> cut[M];</span><br><span class="line"><span class="keyword">bool</span> instack[M];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e[++cnt].next = head[u];</span><br><span class="line">    e[cnt].v = v;</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> child = <span class="number">0</span>;</span><br><span class="line">    low[x] = dfn[x] = ++indexx;</span><br><span class="line">    <span class="built_in">stack</span>[++top]=x;</span><br><span class="line">    instack[x]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i;i=e[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = e[i].v;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(v, x);</span><br><span class="line">            low[x] = min(low[x], low[v]);</span><br><span class="line">            <span class="keyword">if</span>(x!=pre&amp;&amp;dfn[x]&lt;=low[v])</span><br><span class="line">                cut[x] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x==pre)</span><br><span class="line">                child++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(instack[v])</span><br><span class="line">        low[x] = min(low[x], dfn[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(child&gt;<span class="number">1</span>&amp;&amp;x==pre)</span><br><span class="line">        cut[x] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        add(a, b), add(b, a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i]) tarjan(i,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) ans += cut[i];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(cut[i]) <span class="built_in">printf</span>(<span class="string">"%d "</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>A Bug&#39;s Life</title>
      <link href="/2019/08/15/A%20Bug&#39;s%20Life(%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86)/"/>
      <url>/2019/08/15/A%20Bug&#39;s%20Life(%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86)/</url>
      
        <content type="html"><![CDATA[<h4 id="种类并查集的复习。"><a href="#种类并查集的复习。" class="headerlink" title="种类并查集的复习。"></a>种类并查集的复习。</h4><a id="more"></a><p><strong>再次复习了rank数组代表的是指向父节点。rank[a]= a-&gt;fa.</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10005</span>;</span><br><span class="line"><span class="keyword">int</span> pre[N], ran[N];</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">        ran[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==pre[x])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> pre[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f = find(pre[x]);</span><br><span class="line">        ran[x] = (ran[pre[x]] + ran[x]) % <span class="number">2</span>;</span><br><span class="line">        pre[x]=f;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> flag;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">un</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx=find(x);</span><br><span class="line"><span class="keyword">int</span> fy=find(y);</span><br><span class="line"><span class="keyword">if</span>(fx==fy)</span><br><span class="line">    <span class="keyword">if</span>(ran[x]%<span class="number">2</span>==ran[y]%<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ran[fx] = (-ran[x] + ran[y] + <span class="number">1</span>) % <span class="number">2</span>;</span><br><span class="line">    pre[fx] = fy;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">int</span> cas = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        init();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> m, n;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">           un(m,n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Scenario #%d:\n"</span>,cas++);</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">"Suspicious bugs found!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No suspicious bugs found!\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2024 [NOI2001]食物链</title>
      <link href="/2019/08/15/P2024%20%5BNOI2001%5D%E9%A3%9F%E7%89%A9%E9%93%BE/"/>
      <url>/2019/08/15/P2024%20%5BNOI2001%5D%E9%A3%9F%E7%89%A9%E9%93%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="种类并查集。"><a href="#种类并查集。" class="headerlink" title="种类并查集。"></a>种类并查集。</h4><a id="more"></a><p><strong>以前一直对带权并查集有了新的理解，以前一直在合并树上的时候搞不懂向量的方向谁减去谁，现在懂了，我们只需要每次画图就好了。（因为每次合并我都默认祖先节点是fb）。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 500005;</span><br><span class="line">int pre[N], ran[N];</span><br><span class="line">int m,n;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    for (int i = 1; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">        ran[i] = 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x==pre[x])</span><br><span class="line">        return pre[x];</span><br><span class="line">    int f = find(pre[x]);</span><br><span class="line">    ran[x] = (ran[pre[x]] + ran[x]+3) % 3;</span><br><span class="line">    return pre[x] = f;</span><br><span class="line">&#125;</span><br><span class="line">bool pan(int d,int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    if(a&gt;m||b&gt;m||(d==2&amp;&amp;a==b))</span><br><span class="line">        return 0;</span><br><span class="line">    int fx = find(a);</span><br><span class="line">    int fy = find(b);</span><br><span class="line">    if(fx==fy)</span><br><span class="line">    &#123;</span><br><span class="line">        if((ran[a]-ran[b]+3)%3==(d-1)) return 1;</span><br><span class="line">        else return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else return 1;</span><br><span class="line">&#125;</span><br><span class="line">void un(int d,int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">    int fx = find(a);</span><br><span class="line">    int fy = find(b);</span><br><span class="line">    if(fx!=fy)</span><br><span class="line">    &#123;</span><br><span class="line">        ran[fx] = (ran[b] - ran[a] + d+3) % 3;</span><br><span class="line">        pre[fx] = fy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;m, &amp;n);</span><br><span class="line">for(int i=0; i&lt;=m; i++) &#123; pre[i]=i; ran[i]=0; &#125;</span><br><span class="line">int joke=0;  </span><br><span class="line">int e1, e2, e3;</span><br><span class="line">while(n--)</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d%d&quot;, &amp;e1, &amp;e2, &amp;e3);</span><br><span class="line">    if( !pan(e1, e2, e3) ) joke++;</span><br><span class="line">    else un(e1-1, e2, e3);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;, joke);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3387 【模板】缩点</title>
      <link href="/2019/08/15/P3387%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BC%A9%E7%82%B9/"/>
      <url>/2019/08/15/P3387%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BC%A9%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="板子题，入门Tarjan的第一题，这道题Tarjan-拓扑。"><a href="#板子题，入门Tarjan的第一题，这道题Tarjan-拓扑。" class="headerlink" title="板子题，入门Tarjan的第一题，这道题Tarjan+拓扑。"></a>板子题，入门Tarjan的第一题，这道题Tarjan+拓扑。</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>, M = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> v, next;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="keyword">int</span> n, m, p[N], dp[N], ans;</span><br><span class="line"><span class="keyword">int</span> cnt, head[N];</span><br><span class="line"><span class="keyword">int</span> top, <span class="built_in">stack</span>[N];</span><br><span class="line"><span class="keyword">int</span> indexx, num, dfn[N], low[N], color[N], sum[N];</span><br><span class="line"><span class="keyword">int</span> heads = <span class="number">1</span>, tail, indegree[N], que[N];</span><br><span class="line"><span class="keyword">bool</span> instack[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">-1</span>, <span class="keyword">sizeof</span> head);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[++cnt].next = head[u];</span><br><span class="line">    e[cnt].v = v;</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//void tarjan(int u)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int i;</span></span><br><span class="line"><span class="comment">//low[u]=dfn[u]=++indexx;</span></span><br><span class="line"><span class="comment">//stack[++top]=u;</span></span><br><span class="line"><span class="comment">//instack[u]=1;</span></span><br><span class="line"><span class="comment">//for(int i=head[u];i+1;i=e[i].next)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//int v=e[i].v;</span></span><br><span class="line"><span class="comment">//if(!dfn[v])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//tarjan(v);</span></span><br><span class="line"><span class="comment">//low[u]=min(low[u],low[v]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if(instack[v]) low[u]=min(low[u],dfn[v]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if(low[u]==dfn[u])</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//num++;</span></span><br><span class="line"><span class="comment">//do</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//color[stack[top]]=num;</span></span><br><span class="line"><span class="comment">//sum[num]+=p[stack[top]];</span></span><br><span class="line"><span class="comment">//instack[stack[top]]=false;</span></span><br><span class="line"><span class="comment">//&#125;while(stack[top--]!=u);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">dfn[u] = low[u] = ++indexx;</span><br><span class="line"><span class="built_in">stack</span>[++top] = u;</span><br><span class="line">instack[u] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">for</span> (i = head[u]; i+<span class="number">1</span>; i = e[i].next) &#123;</span><br><span class="line"><span class="keyword">int</span> v = e[i].v;</span><br><span class="line"><span class="keyword">if</span> (!dfn[v]) &#123;</span><br><span class="line">tarjan(v);</span><br><span class="line">low[u] = min(low[u], low[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (instack[v]) low[u] = min(low[u], dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (dfn[u] == low[u]) &#123;</span><br><span class="line">num++;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">color[<span class="built_in">stack</span>[top]] = num;</span><br><span class="line">sum[num] += p[<span class="built_in">stack</span>[top]];</span><br><span class="line">instack[<span class="built_in">stack</span>[top]] = <span class="literal">false</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (<span class="built_in">stack</span>[top--] != u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(e, <span class="number">0</span>, <span class="keyword">sizeof</span>(e));</span><br><span class="line">init();</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">topo</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=num;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(!indegree[i])</span><br><span class="line">&#123;</span><br><span class="line">que[++tail]=i;</span><br><span class="line">dp[i]=sum[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(tail&gt;=heads)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> u=que[heads];</span><br><span class="line">heads++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i+<span class="number">1</span>;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].v;</span><br><span class="line">dp[v]=max(dp[v],dp[u]+sum[v]);</span><br><span class="line">indegree[v]--;</span><br><span class="line"><span class="keyword">if</span>(!indegree[v])</span><br><span class="line">&#123;</span><br><span class="line">que[++tail]=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line">ans = max(ans, dp[i]);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> i, a[M], b[M];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i] &gt;&gt; b[i];</span><br><span class="line">        add(a[i], b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            tarjan(i);</span><br><span class="line">    &#125;</span><br><span class="line">    clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(color[a[i]]!=color[b[i]])</span><br><span class="line">        &#123;</span><br><span class="line">             add(color[a[i]], color[b[i]]);</span><br><span class="line">             indegree[color[b[i]]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; topo() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2759 奇怪的函数 二分</title>
      <link href="/2019/08/13/P2759%20%E5%A5%87%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B0/"/>
      <url>/2019/08/13/P2759%20%E5%A5%87%E6%80%AA%E7%9A%84%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="思维好题-二分答案"><a href="#思维好题-二分答案" class="headerlink" title="思维好题+二分答案"></a>思维好题+二分答案</h4><a id="more"></a><p><strong>注意WA点就是第一个大于N位那么其实是N-1。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manx = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> L, M, N, n;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x*<span class="built_in">log10</span>(x)&gt;=n<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1</span>, r = <span class="number">2000000001</span>,ans;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid<span class="number">-1</span>;</span><br><span class="line">            ans=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2678 跳石头</title>
      <link href="/2019/08/13/P2678%20%E8%B7%B3%E7%9F%B3%E5%A4%B4%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89/"/>
      <url>/2019/08/13/P2678%20%E8%B7%B3%E7%9F%B3%E5%A4%B4%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h3><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manx = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> L,M,N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> arr[manx];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dis[manx];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> now=<span class="number">0</span>,last,sum,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i]-now&lt;=x)</span><br><span class="line">        &#123;</span><br><span class="line">        ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">now=arr[i];</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans&lt;=N)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; L &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    dis[M]=L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    arr[M+<span class="number">1</span>]=L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= M+<span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] = arr[i] - arr[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">0</span>, r = L;</span><br><span class="line">    <span class="keyword">while</span>(l!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces 44C</title>
      <link href="/2019/08/13/CodeForces%2044C/"/>
      <url>/2019/08/13/CodeForces%2044C/</url>
      
        <content type="html"><![CDATA[<h4 id="差分数组水题"><a href="#差分数组水题" class="headerlink" title="差分数组水题"></a>差分数组水题</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200005</span>;</span><br><span class="line"><span class="keyword">int</span> l[maxn], r[maxn], ans[maxn], cf[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        cf[a]++;</span><br><span class="line">        cf[b + <span class="number">1</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += cf[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&gt;<span class="number">1</span>||sum==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3834 【模板】可持久化线段树 1（主席树）</title>
      <link href="/2019/08/13/P3834%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%201%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/"/>
      <url>/2019/08/13/P3834%20%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91%201%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="主席树板子"><a href="#主席树板子" class="headerlink" title="主席树板子"></a>主席树板子</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define MAX 200010</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int nodeNum;</span><br><span class="line">//所有节点的数量                                        </span><br><span class="line">int L[MAX&lt;&lt;5],R[MAX&lt;&lt;5],sum[MAX&lt;&lt;5];                   </span><br><span class="line">//L[i]表示编号为i的节点的左儿子的编号                    </span><br><span class="line">//sum[i]表示编号为i的节点所代表的区间内数字出现的次数        </span><br><span class="line">int a[MAX],Hash[MAX];                                    </span><br><span class="line">//a[i]为原数组 Hash[i]为排序后数组                       </span><br><span class="line">int T[MAX];                                            </span><br><span class="line">//T[i]为插入i个点后的树的根节点编号                  </span><br><span class="line">                                                       </span><br><span class="line">int build(int l,int r) //建一个空树(所有sum[i]都为0) </span><br><span class="line">&#123;</span><br><span class="line">    int num=++nodeNum; //num为当前节点编号 </span><br><span class="line">    if(l!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        int m=(l+r)&gt;&gt;1;</span><br><span class="line">        L[num]=build(l,m);</span><br><span class="line">        R[num]=build(m+1,r);</span><br><span class="line">    &#125;</span><br><span class="line">    return num; //返回当前节点的编号 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int update(int pre,int l,int r,int x) //pre为旧树该位置节点的编号</span><br><span class="line">&#123;</span><br><span class="line">    int num=++nodeNum; //新建节点的编号 </span><br><span class="line">    L[num]=L[pre];R[num]=R[pre];sum[num]=sum[pre]+1;</span><br><span class="line">    //该节点左右儿子初始化为旧树该位置节点的左右儿子</span><br><span class="line">    //因为插入的a[i](或Hash[x])在该节点所代表的区间中 所以sum++ </span><br><span class="line">    if(l!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        int m=(l+r)&gt;&gt;1;</span><br><span class="line">        if(x&lt;=m) L[num]=update(L[pre],l,m,x);</span><br><span class="line">        //x出现在左子树 因此右子树保持与旧树相同 修改左子树 </span><br><span class="line">        else R[num]=update(R[pre],m+1,r,x);</span><br><span class="line">    &#125;</span><br><span class="line">    return num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int query(int u,int v,int l,int r,int k) //第k小 </span><br><span class="line">&#123;</span><br><span class="line">    if(l==r) return Hash[l]; //找到第k小 l是节点编号 所以答案是Hash[l] </span><br><span class="line">    int m=(l+r)&gt;&gt;1;</span><br><span class="line">    int num=sum[L[v]]-sum[L[u]];</span><br><span class="line">    //用第一次模拟 这样比较容易看得懂 此时u=l-1 v=r </span><br><span class="line">    //则num= (1~r)树的左节点数字出现的次数 - (1~(l-1))树的左节点数字出现的次数 </span><br><span class="line">    //即num等于([l,r])树左儿子数字出现的次数 </span><br><span class="line">    if(num&gt;=k) return query(L[u],L[v],l,m,k);</span><br><span class="line">    //当 左儿子数字出现的次数大于等于k 时 意味着 第k小的数字在左子树处 </span><br><span class="line">    else return query(R[u],R[v],m+1,r,k-num);</span><br><span class="line">    //否则去右子树处找第k-num小的数字 </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">    for(int i=1;i&lt;=n;i++) &#123;scanf(&quot;%d&quot;,&amp;a[i]);Hash[i]=a[i];&#125;</span><br><span class="line">    sort(Hash+1,Hash+1+n); </span><br><span class="line">    int size=unique(Hash+1,Hash+1+n)-Hash-1; </span><br><span class="line">    //size为线段树维护的数组的大小==Hash数组中不重复的数字的个数</span><br><span class="line">    T[0]=build(1,size); //初始化 建立一颗空树 并把该树的根节点的编号赋值给T[0]</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int x=lower_bound(Hash+1,Hash+1+size,a[i])-Hash;</span><br><span class="line">        //在Hash的 [1,size+1)---&gt;[1,size] 中二分查找第一个</span><br><span class="line">        // 大于等于(在这里可以看成等于) a[i]的Hash[x]</span><br><span class="line">        T[i]=update(T[i-1],1,size,x);</span><br><span class="line">        //更新a[i]带来的影响 </span><br><span class="line">        //并将新树的根节点的编号赋值给T[i] </span><br><span class="line">    &#125;</span><br><span class="line">    while(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        int l, r, k;</span><br><span class="line">        scanf(&quot;%d%d%d&quot;, &amp;l, &amp;r, &amp;k);</span><br><span class="line">        printf(&quot;%d\n&quot;,query(T[l-1],T[r],1,size,k)); //因为a[l]有影响 所以是T[l-1] </span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P4139 上帝与集合的正确用法</title>
      <link href="/2019/08/13/P4139%20%E4%B8%8A%E5%B8%9D%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95/"/>
      <url>/2019/08/13/P4139%20%E4%B8%8A%E5%B8%9D%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%AD%A3%E7%A1%AE%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><strong>考察欧拉降幂，这道题因为是2的无限次方，所以要递归降幂。</strong><br><a id="more"></a><br><img src="/2019/08/13/P4139 上帝与集合的正确用法/1335423-20180403143431616-684477867.png" alt></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="function">ll <span class="title">ph</span><span class="params">(ll x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res=x,a=x;</span><br><span class="line">    <span class="keyword">for</span>(ll i=<span class="number">2</span>;i*i&lt;=x;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a%i==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res=res/i*(i<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">while</span>(a%i==<span class="number">0</span>) a/=i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;<span class="number">1</span>) res=res/a*(a<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a,ll b,ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)</span><br><span class="line">            res = (res*a) % p;</span><br><span class="line">        a = (a*a) % p;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">f</span><span class="params">(ll p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll x = ph(p);</span><br><span class="line">    <span class="keyword">return</span> qpow(<span class="number">2l</span>l,f(x)+x, p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f(p) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1072 Hankson 的趣味题</title>
      <link href="/2019/08/13/P1072%20Hankson%20%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98/"/>
      <url>/2019/08/13/P1072%20Hankson%20%E7%9A%84%E8%B6%A3%E5%91%B3%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><script type="math/tex; mode=display">gcd(x,a_0)=a_1</script><script type="math/tex; mode=display">x=k1*a_1</script><script type="math/tex; mode=display">a_0=k_2*a_1</script><p>得到</p><script type="math/tex; mode=display">gcd(k_1,k_2)=1</script><p>省略证明得到结论：</p><script type="math/tex; mode=display">$$ gcd(a,b)=c \\ gcd(a/c,b/c)=1</script><script type="math/tex; mode=display">整理一下有：</script><script type="math/tex; mode=display">gcd(x/a_1,a_0/a_1)=1\\gcd(b_1/b_0,b_1/x)=1</script><p>$$</p><p><strong>用心体会这两个式子，你会发现 xx 是 a_1a1​ 的整数倍而且是 b_1b1​ 的因子</strong>b​1​ 枚举 b_1b1​ 的因子(也就是 xx )，如果这个数是 a_1a1​ 的整数倍并且满足那两个式子，则 ans++ans++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> p;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> b==<span class="number">0</span>?a:gcd(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line"><span class="keyword">while</span>(t--)</span><br><span class="line">&#123;</span><br><span class="line">ll a0,a1,b0,b1;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a0&gt;&gt;a1&gt;&gt;b0&gt;&gt;b1;</span><br><span class="line">ll p=b1/b0;</span><br><span class="line">ll x=a0/a1;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i*i&lt;=b1;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b1%i==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i%a1==<span class="number">0</span>&amp;&amp;gcd(p,b1/i)==<span class="number">1</span>&amp;&amp;gcd(x,i/a1)==<span class="number">1</span>)</span><br><span class="line">ans++;</span><br><span class="line">ll tem=b1/i;</span><br><span class="line"><span class="keyword">if</span>(tem==i)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(tem%a1==<span class="number">0</span>&amp;&amp;gcd(p,b1/tem)==<span class="number">1</span>&amp;&amp;gcd(tem/a1,x)==<span class="number">1</span>)</span><br><span class="line">ans++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF460C Present</title>
      <link href="/2019/08/13/CF460C%20Present/"/>
      <url>/2019/08/13/CF460C%20Present/</url>
      
        <content type="html"><![CDATA[<h4 id="二分答案-差分数组好题"><a href="#二分答案-差分数组好题" class="headerlink" title="二分答案+差分数组好题"></a>二分答案+差分数组好题</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二分答案+差分数组好题 </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> N, M, W;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> h[<span class="number">100010</span>], dis[<span class="number">100010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += dis[i];</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;x)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += x - sum;</span><br><span class="line">            dis[i] += x - sum;</span><br><span class="line">            <span class="keyword">if</span>(i+W&lt;=N)</span><br><span class="line">                dis[i + W] -= x - sum;<span class="comment">//开始这个点写成了i+W+1，WA了后来知道这个和以前给的左右区间是有区别的。 </span></span><br><span class="line">            sum += x - sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans &lt;= M;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; W;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">9999999999999</span>, r = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; h[i];</span><br><span class="line">        dis[i] = h[i] - h[i - <span class="number">1</span>];</span><br><span class="line">        l = min(l, h[i]);</span><br><span class="line">        r = max(r, h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    r += M;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid+<span class="number">1</span>;</span><br><span class="line">            ans=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[i] = h[i] - h[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2759 奇怪的函数 二分</title>
      <link href="/2019/08/13/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88+%E6%9C%80%E7%9F%AD%E8%B7%AFP1462%20%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF/"/>
      <url>/2019/08/13/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88+%E6%9C%80%E7%9F%AD%E8%B7%AFP1462%20%E9%80%9A%E5%BE%80%E5%A5%A5%E6%A0%BC%E7%91%9E%E7%8E%9B%E7%9A%84%E9%81%93%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="最短路-二分答案-dij-堆优化）。"><a href="#最短路-二分答案-dij-堆优化）。" class="headerlink" title="最短路+二分答案+dij(堆优化）。"></a>最短路+二分答案+dij(堆优化）。</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100005</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cost[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, head[maxn], dis[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pp pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b,cnt;</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> nex, v, val;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++cnt].val = val;</span><br><span class="line">    edge[cnt].v = v;</span><br><span class="line">    edge[cnt].nex = head[u];</span><br><span class="line">    head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pp, <span class="built_in">vector</span>&lt;pp&gt;, greater&lt;pp&gt; &gt; q;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dij</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">    <span class="keyword">if</span>(cost[<span class="number">1</span>]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dis, INF, <span class="keyword">sizeof</span> dis);</span><br><span class="line">    <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span> vis);</span><br><span class="line">    q.push(mp(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">    dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.top().second;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">if</span>(vis[u])</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i;i=edge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> val = edge[i].val;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].v;</span><br><span class="line">            <span class="keyword">if</span>(cost[v]&gt;x)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(dis[v]&gt;dis[u]+val)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + val;</span><br><span class="line">                q.push(mp(dis[v], v));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(v==n)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(dis[n]&gt;=b)</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; b;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cost[i];</span><br><span class="line">        Max = max(Max, cost[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        add(a, b, c);</span><br><span class="line">        add(b, a, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">1</span>, r = Max, ans = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(dij(mid))&#123;</span><br><span class="line">            ans = mid;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans!=<span class="number">-1</span>)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"AFK"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1082同余方程（拓展欧几里得）</title>
      <link href="/2019/08/13/P1082%20%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/"/>
      <url>/2019/08/13/P1082%20%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="拓展欧几里得入门题。欧几里得证明就不多赘述。"><a href="#拓展欧几里得入门题。欧几里得证明就不多赘述。" class="headerlink" title="拓展欧几里得入门题。欧几里得证明就不多赘述。"></a>拓展欧几里得入门题。欧几里得证明就不多赘述。</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a,b,x,y;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    exgcd(b, a % b);</span><br><span class="line">    <span class="keyword">int</span> k = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = k - a / b * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    exgcd(a, b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (x + b) % b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//a*x%b==1%b</span></span><br><span class="line"><span class="comment">//(a*x-1)%b==0</span></span><br><span class="line"><span class="comment">//a*x-k*b==1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1843 奶牛晒衣服 二分</title>
      <link href="/2019/08/13/P1843%20%E5%A5%B6%E7%89%9B%E6%99%92%E8%A1%A3%E6%9C%8D%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89/"/>
      <url>/2019/08/13/P1843%20%E5%A5%B6%E7%89%9B%E6%99%92%E8%A1%A3%E6%9C%8D%EF%BC%88%E4%BA%8C%E5%88%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="简单的二分答案"><a href="#简单的二分答案" class="headerlink" title="简单的二分答案"></a>简单的二分答案</h4><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> manx = <span class="number">500005</span>;</span><br><span class="line"><span class="keyword">int</span> m,a,b;</span><br><span class="line"><span class="keyword">int</span> arr[manx];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = arr[i] - k * a;</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp%b!=<span class="number">0</span>)</span><br><span class="line">            sum++;</span><br><span class="line">        sum += temp / b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(sum&lt;=k)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">500005</span>;</span><br><span class="line">    <span class="keyword">while</span>(l!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid))</span><br><span class="line">            r = mid;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷海底地铁：差分数组+单调栈</title>
      <link href="/2019/08/13/%E6%B4%9B%E8%B0%B7%E6%B5%B7%E5%BA%95%E5%9C%B0%E9%93%81/"/>
      <url>/2019/08/13/%E6%B4%9B%E8%B0%B7%E6%B5%B7%E5%BA%95%E5%9C%B0%E9%93%81/</url>
      
        <content type="html"><![CDATA[<h4 id="差分数组简化思维量。"><a href="#差分数组简化思维量。" class="headerlink" title="差分数组简化思维量。"></a>差分数组简化思维量。</h4><a id="more"></a><p><strong>开始WA在cf[y+1]—这个地方，后来反应过来坐地铁到y这个点我们不需要减去这个点的费用，因为并没有去下一个地点</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* problem:洛谷海底地铁</span></span><br><span class="line"><span class="comment"> * 开始WA在cf[y+1]--这个地方，后来反应过来坐地铁到y这个点我们不需要减去这个点的费用，因为并没有去下一个地点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> cf[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> B[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> C[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> day[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x = a[i];</span><br><span class="line">        <span class="keyword">int</span> y = a[i + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y)</span><br><span class="line">            swap(x, y);</span><br><span class="line">        cf[x]++;</span><br><span class="line">        cf[y]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; A[i] &gt;&gt; B[i] &gt;&gt; C[i];</span><br><span class="line">    &#125;</span><br><span class="line">    day[<span class="number">0</span>]=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cf[i]+=cf[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += min(A[i] * cf[i], B[i] * cf[i] + C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1056 排座椅</title>
      <link href="/2019/08/13/P1056%20%E6%8E%92%E5%BA%A7%E6%A4%85/"/>
      <url>/2019/08/13/P1056%20%E6%8E%92%E5%BA%A7%E6%A4%85/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 1005</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> M,N,K,L,D;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a1,a2;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id,cnt;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (data a,data b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.cnt&gt;b.cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">data a[maxn],b[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("seat.in","r",stdin);</span></span><br><span class="line"><span class="comment">//freopen("seat.out","w",stdout);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>,&amp;M,&amp;N,&amp;K,&amp;L,&amp;D);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=D;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> x,y,p,q;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d%d"</span>,&amp;x,&amp;y,&amp;p,&amp;q);</span><br><span class="line"><span class="keyword">if</span>(x==p)&#123;b[min(y,q)].cnt++;b[min(y,q)].id=min(y,q);&#125;</span><br><span class="line"><span class="keyword">if</span>(y==q)&#123;a[min(x,p)].cnt++;a[min(x,p)].id=min(x,p);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(a+<span class="number">1</span>,a+maxn);</span><br><span class="line">sort(b+<span class="number">1</span>,b+maxn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=K;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i].id&gt;<span class="number">0</span>)a1.push_back(a[i].id);</span><br><span class="line">&#125;</span><br><span class="line">sort(a1.begin(),a1.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a1.size();i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a1[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=L;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i].id&gt;<span class="number">0</span>)a2.push_back(b[i].id);</span><br><span class="line">&#125;</span><br><span class="line">sort(a2.begin(),a2.end());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a2.size();i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a2[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-树形DP-上司舞会</title>
      <link href="/2019/08/12/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%A0%91%E5%92%8C/"/>
      <url>/2019/08/12/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%A0%91%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p>树形DP学习日记（二）<br><a id="more"></a><br>dp[u]+=max(dp[v],0)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, head[N], cnt,dp[N],vis[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> next, v;</span><br><span class="line">&#125;node[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">node[++cnt].next = head[u];</span><br><span class="line">node[cnt].v = v;</span><br><span class="line">head[u] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i;i=node[i].next)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> v = node[i].v;</span><br><span class="line"><span class="keyword">if</span>(vis[v]) <span class="keyword">continue</span>;</span><br><span class="line">dfs(v);</span><br><span class="line">dp[u] += max(dp[v], <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">res=max(res,dp[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; dp[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">add(a, b);</span><br><span class="line">add(b, a);</span><br><span class="line">&#125;</span><br><span class="line">dfs(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-区间DP-上司舞会</title>
      <link href="/2019/08/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%8C%BA%E9%97%B4DP%E6%8E%92%E9%98%9F/"/>
      <url>/2019/08/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%8C%BA%E9%97%B4DP%E6%8E%92%E9%98%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="区间DP。"><a href="#区间DP。" class="headerlink" title="区间DP。"></a>区间DP。</h4><a id="more"></a><p>思维：dp[i][j][0/1]代表i到j遇见最后一个人是从 左边/右边上车的。则状态转移方程如下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">1005</span>][<span class="number">1005</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">19650827</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= n; l++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, j; (j=i+l) &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j][<span class="number">0</span>] = (dp[i + <span class="number">1</span>][j][<span class="number">1</span>] * (num[j] &gt; num[i]) + dp[i + <span class="number">1</span>][j][<span class="number">0</span>] * (num[i + <span class="number">1</span>] &gt; num[i])) % p;</span><br><span class="line">            dp[i][j][<span class="number">1</span>] = (dp[i][j - <span class="number">1</span>][<span class="number">1</span>] * (num[j] &gt; num[j - <span class="number">1</span>]) + dp[i][j<span class="number">-1</span>][<span class="number">0</span>] * (num[j] &gt; num[i])) % p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (dp[<span class="number">1</span>][n][<span class="number">0</span>] + dp[<span class="number">1</span>][n][<span class="number">1</span>]) % p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Stay foolish,stay hungry,stay young,stay simple</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-树形DP-上司舞会</title>
      <link href="/2019/08/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%A0%91%E5%BD%A2DP-%E4%B8%8A%E5%8F%B8%E8%88%9E%E4%BC%9A/"/>
      <url>/2019/08/12/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E6%A0%91%E5%BD%A2DP-%E4%B8%8A%E5%8F%B8%E8%88%9E%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p><strong>dp[][0]代表这个节点可以压缩（儿子节点不来）</strong>反之相反。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; g[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">2</span>], root, flag[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[x].size();i++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> son=g[x][i];</span><br><span class="line">        dfs(son);</span><br><span class="line">        dp[x][<span class="number">1</span>] = max(max(dp[x][<span class="number">1</span>], dp[x][<span class="number">1</span>] + dp[son][<span class="number">0</span>]), dp[son][<span class="number">0</span>]);</span><br><span class="line">        dp[x][<span class="number">0</span>] = max(max(dp[x][<span class="number">0</span>], dp[x][<span class="number">0</span>] + dp[son][<span class="number">1</span>]), max(dp[son][<span class="number">1</span>], dp[son][<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; dp[i][<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a, b;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        g[b].push_back(a);</span><br><span class="line">        flag[a] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag[i])</span><br><span class="line">        &#123;</span><br><span class="line">            root = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(root);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; max(dp[root][<span class="number">0</span>], dp[root][<span class="number">1</span>]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树形DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ak的一天</title>
      <link href="/2019/08/11/2019-08-11-ak/"/>
      <url>/2019/08/11/2019-08-11-ak/</url>
      
        <content type="html"><![CDATA[<h2 id="今天又AK了-不开心"><a href="#今天又AK了-不开心" class="headerlink" title="今天又AK了..不开心"></a>今天又AK了..不开心</h2>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1387 最大正方形</title>
      <link href="/2019/08/10/P1387%20%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/"/>
      <url>/2019/08/10/P1387%20%E6%9C%80%E5%A4%A7%E6%AD%A3%E6%96%B9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="动态规划水题"><a href="#动态规划水题" class="headerlink" title="动态规划水题:"></a>动态规划水题:</h4><a id="more"></a><p><strong>状态转移方程为f[i][j]=min(min(f[i-1][j],f[i][j-1]),f[i-1][j-1])),很显然，因为如果左边上边和左上都不为0，则上一个状态就可以转移过来。而f的意义是以i，j为右下顶点的能形成的正方形最大边长。</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 6001</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll ;</span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> a;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">            <span class="keyword">if</span>(!a)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dp[i][j]=min(min(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]),dp[i<span class="number">-1</span>][j<span class="number">-1</span>])+<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; dp[i][j] &lt;&lt; endl;</span></span><br><span class="line">            ans = max(ans, dp[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-区间DP-P4170 [CQOI2007]涂色</title>
      <link href="/2019/08/10/2019-08-10-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8C%BA%E9%97%B4DP-P4170-%5BCQOI2007%5D%E6%B6%82%E8%89%B2/"/>
      <url>/2019/08/10/2019-08-10-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8C%BA%E9%97%B4DP-P4170-%5BCQOI2007%5D%E6%B6%82%E8%89%B2/</url>
      
        <content type="html"><![CDATA[<h4 id="区间DP。题意：题意是求对字符串的最少染色次数，设f-i-j-为字符串的子串s-i-s-j-的最少染色次数。"><a href="#区间DP。题意：题意是求对字符串的最少染色次数，设f-i-j-为字符串的子串s-i-s-j-的最少染色次数。" class="headerlink" title="区间DP。题意：题意是求对字符串的最少染色次数，设f[i][j]为字符串的子串s[i]~s[j]的最少染色次数。"></a>区间DP。题意：题意是求对字符串的最少染色次数，设<code>f[i][j]</code>为字符串的子串<code>s[i]~s[j]</code>的最少染色次数。</h4><a id="more"></a><p><strong><em>如果我们首尾字符相同，那么我们可以少花一笔（直接一横花过去），不然我们就以第K个位置分成两个子区间问题。并且每次区间都需要更新。最后dp[1][n]代表1-n区间的最少染色次数。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[55][55];</span><br><span class="line">char a[55];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%s&quot;,a+1);</span><br><span class="line">    int n=strlen(a+1);</span><br><span class="line">memset(dp,999999,sizeof dp);</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">dp[i][i]=1;</span><br><span class="line">for(int l=1;l&lt;n;l++)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1,j=1+l;j&lt;=n;i++,j++)</span><br><span class="line">&#123;</span><br><span class="line">if(a[i]==a[j])</span><br><span class="line">dp[i][j]=min(dp[i+1][j],dp[i][j-1]);</span><br><span class="line">else</span><br><span class="line">for(int m=i;m&lt;j;m++)</span><br><span class="line">dp[i][j]=min(dp[i][j],dp[i][m]+dp[m+1][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;,dp[1][n]);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF11B Jumping Jack</title>
      <link href="/2019/08/09/2019-08-09-CF11B-Jumping-Jack/"/>
      <url>/2019/08/09/2019-08-09-CF11B-Jumping-Jack/</url>
      
        <content type="html"><![CDATA[<p>题意：数轴上从0出发可向左右走，第i步的距离为i，求到达x的最小步数(x&lt;10^9)；</p><a id="more"></a><p>思路：考虑一直向右，若恰好到达则为最小步数；</p><p>​        若路程大于x，且(路程-x)=n,n为偶数，则应向左移动距离n;</p><p>​        要向左移动距离n，只需在第n/2步向左走；步数不变；</p><p>​       若(路程-x)为奇数，一直走到偶数的情况；</p><p>  <strong><em>n/2步返回的目的是本来向前n/2如今向后了，所以加起来就是n的距离了。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m,sum;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,k;</span><br><span class="line">    while(scanf(&quot;%d&quot;,&amp;n)!=EOF)&#123;</span><br><span class="line">        if(n&lt;0) n=-n;</span><br><span class="line">        //printf(&quot;%d\n&quot;,n);</span><br><span class="line">        sum=0;</span><br><span class="line">        for(i=0;;i++)&#123;</span><br><span class="line">            sum+=i;</span><br><span class="line">            if(sum==n) break;</span><br><span class="line">            if(sum&gt;n&amp;&amp;(sum-n)%2==0) break;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,i);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CodeFoeces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-区间DP-P1220 关路灯</title>
      <link href="/2019/08/09/2019-08-09-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8C%BA%E9%97%B4DP-P1220-%E5%85%B3%E8%B7%AF%E7%81%AF/"/>
      <url>/2019/08/09/2019-08-09-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8C%BA%E9%97%B4DP-P1220-%E5%85%B3%E8%B7%AF%E7%81%AF/</url>
      
        <content type="html"><![CDATA[<p>理解一下题目大意：</p><a id="more"></a><p>关灯不需要额外的时间，经过了灯就关了。但是可能折返回去关某一个大灯会比继续往下走关接下来的一个小灯更优，</p><p>那么可以得到两种状态（沿着当前方向继续往下走，改变方向回去关灯）。</p><p>f[i][j][0] = min ( f[i+1][j][0] + ( a[i+1] - a[i] ) <em> ( sum[i] + sum[n] - sum[j] ) , f[i+1][j][1] + ( a[j]-a[i] ) </em> ( sum[i]+sum[n]-sum[j]) );</p><p>f[i][j][1] = min ( f[i][j-1][0] + ( a[j] - a[i] ) <em> ( sum[i-1] + sum[n] - sum[j-1] ) , f[i][j-1][1] + ( a[j]-a[j-1] ) </em> ( sum[i-1] + sum[n] - sum[j-1] ) );</p><p>f函数代表i到j区间中关闭完路灯停留在在左0/右1位置的最小消耗功率。</p><p>我们画图可以知道我们有两种转移状态一种事i+1-&gt;i和j-1-&gt;j。但是因为关完灯在的位置不同我们又分了两种。所以我们可以得到上述的状态转移方程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long l[55],sum[55],power[55];</span><br><span class="line">long long dp[55][55][2];</span><br><span class="line">const long long INF=0x3f3f3f3f3f3f3f3fll;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;l[i]&gt;&gt;power[i];</span><br><span class="line">sum[i]=sum[i-1]+power[i];</span><br><span class="line">&#125;</span><br><span class="line">for(int k=1;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1,j;(j=i+k-1)&lt;=n;++i)</span><br><span class="line">&#123;</span><br><span class="line">if(i&lt;=m&amp;&amp;m&lt;=j)</span><br><span class="line">&#123;</span><br><span class="line">dp[i][j][0]=min(dp[i+1][j][0]+(l[i+1]-l[i])*(sum[n]-sum[j]+sum[i]),</span><br><span class="line">dp[i+1][j][1]+(l[j]-l[i])*(sum[n]-sum[j]+sum[i]));</span><br><span class="line">dp[i][j][1]=min(dp[i][j-1][1]+(l[j]-l[j-1])*(sum[n]-sum[j-1]+sum[i-1]),</span><br><span class="line">dp[i][j-1][0]+(l[j]-l[i])*(sum[n]+sum[i-1]-sum[j-1]));</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">dp[i][j][0] = dp[i][j][1] = INF;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;min(dp[1][n][0],dp[1][n][1])&lt;&lt;endl;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P2822 组合数问题</title>
      <link href="/2019/08/08/2019-08-08-P2822-%E7%BB%84%E5%90%88%E6%95%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/08/2019-08-08-P2822-%E7%BB%84%E5%90%88%E6%95%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="新技能：组合数学和杨辉三角的关系-矩阵和。"><a href="#新技能：组合数学和杨辉三角的关系-矩阵和。" class="headerlink" title="新技能：组合数学和杨辉三角的关系+矩阵和。"></a>新技能：组合数学和杨辉三角的关系+矩阵和。</h4><a id="more"></a><p><strong><em>所谓的C(m,n)其实就是m行n列（在杨辉三角中的元素大小）有延伸矩阵+下延伸矩阵-重复部分就是他们的矩阵和。（前缀和思想）。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=2010;</span><br><span class="line">int t,k,C[N][N],s[N][N];</span><br><span class="line">signed main()&#123;</span><br><span class="line">cin&gt;&gt;t&gt;&gt;k;</span><br><span class="line">C[0][0]=1;</span><br><span class="line">for(int i=1;i&lt;=2000;i++)C[i][1]=i,C[i][0]=1;</span><br><span class="line">for(int i=2;i&lt;=2000;i++)&#123;</span><br><span class="line">for(int j=2;j&lt;=i;j++)C[i][j]=(C[i-1][j]+C[i-1][j-1])%k;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=0;i&lt;=2000;i++)&#123;</span><br><span class="line">for(int j=0;j&lt;=i;j++)s[i][j]=(C[i][j]%k==0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for(int i=1;i&lt;=2000;i++)s[i][1]+=s[i-1][1],s[1][i]+=s[1][i-1];</span><br><span class="line">for(int i=2;i&lt;=2000;i++)&#123;</span><br><span class="line">for(int j=2;j&lt;=2000;j++)s[i][j]+=s[i-1][j]+s[i][j-1]-s[i-1][j-1];</span><br><span class="line">&#125;</span><br><span class="line">while(t--)&#123;</span><br><span class="line">int n,m;cin&gt;&gt;n&gt;&gt;m;cout&lt;&lt;s[n][m]&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模运算笔记</title>
      <link href="/2019/08/08/2019-08-08-%E6%A8%A1%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/08/08/2019-08-08-%E6%A8%A1%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="模运算："><a href="#模运算：" class="headerlink" title="模运算："></a>模运算：</h4><a id="more"></a><h3 id="运算规则"><a href="#运算规则" class="headerlink" title="运算规则"></a>运算规则</h3><p>模运算与基本四则运算有些相似，但是除法例外。其规则如下：</p><ol><li>(a + b) % p = (a % p + b % p) % p （1）</li><li>(a - b) % p = (a % p - b % p + p) % p （2）</li><li>(a <em> b) % p = (a % p </em> b % p) % p （3）</li><li>a ^ b % p = ((a % p)^b) % p （4）</li></ol><ul><li><p>结合律：</p><p>((a+b) % p + c) % p = (a + (b+c) % p) % p （5）</p></li></ul><p>((a<em>b) % p </em> c)% p = (a <em> (b</em>c) % p) % p （6）</p><ul><li><p>交换律：</p><p>(a + b) % p = (b+a) % p （7）</p></li></ul><p>(a <em> b) % p = (b </em> a) % p （8）</p><ul><li><p>分配律：</p><p>(a+b) % p = ( a % p + b % p ) % p （9）</p><p>((a +b)% p <em> c) % p = ((a </em> c) % p + (b * c) % p) % p （10）</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3197 [HNOI2008]越狱</title>
      <link href="/2019/08/08/2019-08-08-P3197-%5BHNOI2008%5D%E8%B6%8A%E7%8B%B1/"/>
      <url>/2019/08/08/2019-08-08-P3197-%5BHNOI2008%5D%E8%B6%8A%E7%8B%B1/</url>
      
        <content type="html"><![CDATA[<h4 id="计数原理。"><a href="#计数原理。" class="headerlink" title="计数原理。"></a>计数原理。</h4><a id="more"></a><p>一个犯人有<em>m</em>种状态，在不考虑其它条件的情况下，两个犯人有<em>m的平方</em>种状态 =&gt;=&gt; <em>n</em>个犯人有m^{n}<em>m**n</em>种总状态。</p><p>我们你想思维，总状态数-不越狱的数=越狱的数。由于每一个房间的人的宗教有m<em>m</em>种可能，且有n<em>n</em>个房间，所以所有的方案数等于m^n<em>m**n</em>。由于当相邻的两个房间所关押的罪犯当宗教相同时就有可能会越狱，所以不可能会越狱的方案数为m \times (m-1)^{n-1}<em>m</em>×(<em>m</em>−1)<em>n</em>−1，这是因为第一个房间的最烦的宗教有m<em>m</em>种选择，而第二个房间的罪犯的宗教有m-1<em>m</em>−1种选择，第三个房间的罪犯的宗教有m-2<em>m</em>−2种选择，以此类推。因此越狱的方案数就有m^n-m \times (m-1)^{n-1}<em>m**n</em>−<em>m</em>×(<em>m</em>−1)<em>n</em>−1种。由于n<em>n</em>很大，所以我们用快速幂来解这道题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">int MOD=100003;</span><br><span class="line">using namespace std;</span><br><span class="line">long long qpow(long long m,long long n)</span><br><span class="line">&#123;</span><br><span class="line">long long ans=1;</span><br><span class="line">while(n)</span><br><span class="line">&#123;</span><br><span class="line">if(n&amp;1) ans=(ans%MOD*m%MOD)%MOD;</span><br><span class="line">m=(m%MOD*m%MOD)%MOD;</span><br><span class="line">n&gt;&gt;=1;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">long long m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;(((qpow(m,n)-m*qpow(m-1,n-1))%MOD+MOD)%MOD)&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF978D Almost Arithmetic Progression</title>
      <link href="/2019/08/08/2019-08-08-CF978D-Almost-Arithmetic-Progression/"/>
      <url>/2019/08/08/2019-08-08-CF978D-Almost-Arithmetic-Progression/</url>
      
        <content type="html"><![CDATA[<h4 id="思维好题：题意给出长为n的数列，你可以对每一个数进行-1，-1操作，也可以不进行操作，问，最少需要几次操作才能使这个数列变成等差数列。如果不能变为等差数列，则输出-1"><a href="#思维好题：题意给出长为n的数列，你可以对每一个数进行-1，-1操作，也可以不进行操作，问，最少需要几次操作才能使这个数列变成等差数列。如果不能变为等差数列，则输出-1" class="headerlink" title="思维好题：题意给出长为n的数列，你可以对每一个数进行+1，-1操作，也可以不进行操作，问，最少需要几次操作才能使这个数列变成等差数列。如果不能变为等差数列，则输出-1."></a>思维好题：题意给出长为n的数列，你可以对每一个数进行+1，-1操作，也可以不进行操作，问，最少需要几次操作才能使这个数列变成等差数列。如果不能变为等差数列，则输出-1.</h4><p>思路：暴力枚举前两项的所有情况=3*3=9种。</p><!--mode--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">using namespace std;</span><br><span class="line">int n;</span><br><span class="line">long long arr[100005];</span><br><span class="line">long long b[100005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">long ans=0;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">int MIN=INF;</span><br><span class="line">for(int i=-1;i&lt;=1;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=-1;j&lt;=1;j++)</span><br><span class="line">&#123;</span><br><span class="line">int flag=1;</span><br><span class="line">int ans=abs(i)+abs(j);</span><br><span class="line">b[1]=arr[1]+i;</span><br><span class="line">b[2]=arr[2]+j;</span><br><span class="line">int d=b[2]-b[1];</span><br><span class="line">for(int k=3;k&lt;=n;k++)</span><br><span class="line">&#123;</span><br><span class="line">if(abs(b[k-1]+d-arr[k])&lt;=1)</span><br><span class="line">&#123;</span><br><span class="line">b[k]=b[k-1]+d;</span><br><span class="line">ans+=abs(b[k]-arr[k]);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">flag=0;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag)</span><br><span class="line">&#123;</span><br><span class="line">MIN=min(MIN,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">if(MIN==INF)</span><br><span class="line">cout&lt;&lt;-1&lt;&lt;endl;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;MIN&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 暴力枚举+思维 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性动态规划-P1233 木棍加工</title>
      <link href="/2019/08/06/2019-08-06-%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-P1233-%E6%9C%A8%E6%A3%8D%E5%8A%A0%E5%B7%A5/"/>
      <url>/2019/08/06/2019-08-06-%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-P1233-%E6%9C%A8%E6%A3%8D%E5%8A%A0%E5%B7%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="和最长非上升子序列一个思想："><a href="#和最长非上升子序列一个思想：" class="headerlink" title="和最长非上升子序列一个思想："></a>和最长非上升子序列一个思想：</h3><p><strong><em>中间找到大的就替换掉（1，没有多花时间。2，大替小过后可以更延伸的更长。）末尾就代表没找到，则新加一段子序列。</em></strong></p><!--mode--><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn=100005;</span><br><span class="line">int dp[maxn];</span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">int l,w;</span><br><span class="line">&#125;node[maxn];</span><br><span class="line">int cmp(const Node a,const Node b)</span><br><span class="line">&#123;</span><br><span class="line">if(a.l!=b.l)</span><br><span class="line">return a.l&gt;b.l;</span><br><span class="line">else</span><br><span class="line">return a.w&gt;b.w;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">int k=1;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">cin&gt;&gt;node[i].l&gt;&gt;node[i].w;</span><br><span class="line">sort(node+1,node+1+n,cmp);</span><br><span class="line">dp[1]=node[1].w;</span><br><span class="line">for(int i=2;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int j=lower_bound(dp+1,dp+1+k,node[i].w)-dp;</span><br><span class="line">if(j&lt;=k) dp[j]=node[i].w;</span><br><span class="line">else dp[++k]=node[i].w;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;k&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P1783 海滩防御</title>
      <link href="/2019/08/05/2019-08-05-P1783-%E6%B5%B7%E6%BB%A9%E9%98%B2%E5%BE%A1/"/>
      <url>/2019/08/05/2019-08-05-P1783-%E6%B5%B7%E6%BB%A9%E9%98%B2%E5%BE%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="最短路，建图很有趣。据说可以用二分答案-dfs"><a href="#最短路，建图很有趣。据说可以用二分答案-dfs" class="headerlink" title="最短路，建图很有趣。据说可以用二分答案+dfs"></a>最短路，建图很有趣。据说可以用二分答案+dfs</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const long long maxn=1000005;</span><br><span class="line">const double INF=999999999;</span><br><span class="line">#define pp pair&lt;double,int&gt;</span><br><span class="line">#define mp make_pair</span><br><span class="line">int n,m;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">int nex,v;</span><br><span class="line">double val;</span><br><span class="line">&#125;edge[maxn];</span><br><span class="line">bool vis[maxn];int head[maxn],cnt;</span><br><span class="line">double dis[maxn];</span><br><span class="line">double px[maxn],py[maxn];</span><br><span class="line">void add(int u,int v,double val)</span><br><span class="line">&#123;</span><br><span class="line">edge[++cnt].nex=head[u];</span><br><span class="line">edge[cnt].val=val;</span><br><span class="line">edge[cnt].v=v;</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pp,vector&lt;pp&gt;,greater&lt;pp&gt; &gt; q;</span><br><span class="line">void dij()</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1;i&lt;=m+2;i++)</span><br><span class="line">dis[i]=INF;</span><br><span class="line">dis[m+1]=0;</span><br><span class="line">q.push(mp(0,m+1));</span><br><span class="line">while(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">int u=q.top().second;</span><br><span class="line">q.pop();</span><br><span class="line">if(vis[u]) continue;</span><br><span class="line">vis[u]=1;</span><br><span class="line">for(int i=head[u];i;i=edge[i].nex)</span><br><span class="line">&#123;</span><br><span class="line">double val=edge[i].val;</span><br><span class="line">int v=edge[i].v;</span><br><span class="line">if(dis[v]&gt;max(dis[u],val))</span><br><span class="line">&#123;</span><br><span class="line">dis[v]=max(dis[u],val);</span><br><span class="line">q.push(mp(dis[v],v));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">double getdis(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">return sqrt((px[x]-px[y])*(px[x]-px[y])+(py[x]-py[y])*(py[x]-py[y]));</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;px[i]&gt;&gt;py[i];</span><br><span class="line">add(m+1,i,px[i]);</span><br><span class="line">add(i,m+1,px[i]);</span><br><span class="line">add(m+2,i,double(n)-px[i]);</span><br><span class="line">add(i,m+2,double(n)-px[i]);</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=i+1;j&lt;=m;j++)</span><br><span class="line">&#123;</span><br><span class="line">add(i,j,getdis(i,j)/2.0);</span><br><span class="line">add(j,i,getdis(i,j)/2.0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">dij();</span><br><span class="line">printf(&quot;%.2lf&quot;,dis[m+2]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划-线性动态规划-LIS</title>
      <link href="/2019/08/04/2019-08-04-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-LIS/"/>
      <url>/2019/08/04/2019-08-04-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-LIS/</url>
      
        <content type="html"><![CDATA[<h4 id="nlogn："><a href="#nlogn：" class="headerlink" title="nlogn："></a>nlogn：</h4><p><strong><em>开始函数写成了lower_bound，结果后来发现是错误的，因为后面的操作会受到影响。</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long arr[100005];</span><br><span class="line">long long dp[100005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">scanf(&quot;%d&quot;,&amp;arr[i]);</span><br><span class="line">dp[1]=arr[1];</span><br><span class="line">int cnt=1;</span><br><span class="line">for(int i=2;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(arr[i]&gt;=dp[cnt])dp[++cnt]=arr[i];</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">int x=upper_bound(dp+1,dp+1+cnt,arr[i])-dp;</span><br><span class="line">dp[x]=arr[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">cout&lt;&lt;cnt&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组求逆序对-P1908 逆序对</title>
      <link href="/2019/08/03/2019-08-03-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9-P1908-%E9%80%86%E5%BA%8F%E5%AF%B9/"/>
      <url>/2019/08/03/2019-08-03-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84%E6%B1%82%E9%80%86%E5%BA%8F%E5%AF%B9-P1908-%E9%80%86%E5%BA%8F%E5%AF%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="树状数组求逆序对。（二进制真好玩）"><a href="#树状数组求逆序对。（二进制真好玩）" class="headerlink" title="树状数组求逆序对。（二进制真好玩）"></a>树状数组求逆序对。（二进制真好玩）</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/* problem :P1908 逆序对</span><br><span class="line"> * 用树状数组来求逆序对，思想很奇妙，很受益，对树状数组的理解又加深了一些。</span><br><span class="line"> * </span><br><span class="line">*/</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int tree[500010],rank[500010],n;</span><br><span class="line">long long ans; </span><br><span class="line">struct point</span><br><span class="line">&#123;</span><br><span class="line">    int num,val;</span><br><span class="line">&#125;a[500010];</span><br><span class="line">inline bool cmp(point q,point w)</span><br><span class="line">&#123;</span><br><span class="line">    if(q.val==w.val)</span><br><span class="line">        return q.num&lt;w.num;</span><br><span class="line">    return q.val&lt;w.val;</span><br><span class="line">&#125;</span><br><span class="line">inline void insert(int p,int d)</span><br><span class="line">&#123;</span><br><span class="line">    for(;p&lt;=n;p+=p&amp;-p)</span><br><span class="line">        tree[p]+=d; </span><br><span class="line">&#125;</span><br><span class="line">inline int query(int p)</span><br><span class="line">&#123;</span><br><span class="line">    int sum=0;</span><br><span class="line">    for(;p;p-=p&amp;-p)</span><br><span class="line">        sum+=tree[p];</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;a[i].val),a[i].num=i;</span><br><span class="line">    sort(a+1,a+1+n,cmp);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">        rank[a[i].num]=i;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        insert(rank[i],1);</span><br><span class="line">        ans+=i-query(rank[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;%lld&quot;,ans);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树多种懒惰标记</title>
      <link href="/2019/08/03/2019-08-03-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A4%9A%E7%A7%8D%E6%87%92%E6%83%B0%E6%A0%87%E8%AE%B0/"/>
      <url>/2019/08/03/2019-08-03-%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%A4%9A%E7%A7%8D%E6%87%92%E6%83%B0%E6%A0%87%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="这道题的lazy标记存在乘和加两种，因为会相互影响所以我们必须要讨论优先级的问题："><a href="#这道题的lazy标记存在乘和加两种，因为会相互影响所以我们必须要讨论优先级的问题：" class="headerlink" title="这道题的lazy标记存在乘和加两种，因为会相互影响所以我们必须要讨论优先级的问题："></a>这道题的lazy标记存在乘和加两种，因为会相互影响所以我们必须要讨论优先级的问题：</h4><a id="more"></a><p><strong><em>add代表加减法的lazy标记,mul代表乘的懒惰标记。</em></strong></p><p><strong><em>首先我们先看看如果(c+add)</em>mul,那么我们此处的add会变成add乘mul,而如果我们事c<em>mul+add的话，我们的乘法并不受我们加法所影响，所以代码如下。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int manx = 100007;</span><br><span class="line">long a[manx];</span><br><span class="line">int m, n, p;</span><br><span class="line">struct tree</span><br><span class="line">&#123;</span><br><span class="line">    int l, r;</span><br><span class="line">    long long sum;</span><br><span class="line">    long long mul, add;</span><br><span class="line">&#125;tree[manx&lt;&lt;2];</span><br><span class="line">void pushUp(int i) &#123; tree[i].sum = (tree[i &lt;&lt; 1].sum + tree[i &lt;&lt; 1 | 1].sum) % p; &#125;</span><br><span class="line">void pushDown(int i)&#123;</span><br><span class="line">    int m = tree[i].l + tree[i].r &gt;&gt; 1;</span><br><span class="line">    tree[i &lt;&lt; 1].sum = (tree[i &lt;&lt; 1].sum * tree[i].mul + tree[i].add * (m - tree[i].l + 1)) % p;</span><br><span class="line">    tree[i &lt;&lt; 1 | 1].sum = (tree[i &lt;&lt; 1 | 1].sum * tree[i].mul + tree[i].add * (tree[i].r - m)) % p;</span><br><span class="line">    tree[i &lt;&lt; 1].mul = (tree[i].mul * tree[i &lt;&lt; 1].mul) % p;</span><br><span class="line">    tree[i &lt;&lt; 1 | 1].mul = (tree[i].mul * tree[i &lt;&lt; 1 | 1].mul) % p;</span><br><span class="line">    tree[i &lt;&lt; 1].add = (tree[i &lt;&lt; 1].add * tree[i].mul + tree[i].add) % p;</span><br><span class="line">    tree[i &lt;&lt; 1 | 1].add = (tree[i &lt;&lt; 1 | 1].add * tree[i].mul + tree[i].add) % p;</span><br><span class="line">    tree[i].add = 0;</span><br><span class="line">    tree[i].mul = 1;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">void change_mul(int i,int l,int r,int val)</span><br><span class="line">&#123;</span><br><span class="line">    if(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum = (tree[i].sum * val) % p;</span><br><span class="line">        tree[i].mul = (tree[i].mul * val) % p;</span><br><span class="line">        tree[i].add = (tree[i].add * val) % p;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    int mid = tree[i].l + tree[i].r &gt;&gt; 1;</span><br><span class="line">    if(l&lt;=mid)</span><br><span class="line">    change_mul(i &lt;&lt; 1, l, r, val);</span><br><span class="line">    if(r&gt;mid)</span><br><span class="line">    change_mul(i &lt;&lt; 1 | 1, l, r, val);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line">void change_add(int i,int l,int r,int val)</span><br><span class="line">&#123;</span><br><span class="line">    if(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].add = (tree[i].add + val) % p;</span><br><span class="line">        tree[i].sum = (tree[i].sum + val * (tree[i].r - tree[i].l + 1)) % p;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    int mid = tree[i].l + tree[i].r &gt;&gt; 1;</span><br><span class="line">    if(l&lt;=mid)</span><br><span class="line">    change_add(i &lt;&lt; 1, l, r, val);</span><br><span class="line">    if(r&gt;mid)</span><br><span class="line">    change_add(i &lt;&lt; 1 | 1, l, r, val);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line">long long query(int i,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    if(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        return tree[i].sum;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    int mid = tree[i].l + tree[i].r &gt;&gt; 1;</span><br><span class="line">    long long ans = 0;</span><br><span class="line">    if(l&lt;=mid)</span><br><span class="line">        ans = (ans+query(i &lt;&lt; 1, l, r))%p;</span><br><span class="line">    if(r&gt;mid)</span><br><span class="line">        ans = (ans+query(i &lt;&lt; 1 | 1, l, r))%p;</span><br><span class="line">    return ans%p;</span><br><span class="line">&#125;</span><br><span class="line">void build_tree(int i,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    tree[i].l = l;</span><br><span class="line">    tree[i].r = r;</span><br><span class="line">    tree[i].mul = 1;</span><br><span class="line">    tree[i].add = 0;</span><br><span class="line">    if(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].sum = a[l];</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    build_tree(i &lt;&lt; 1, l, mid);</span><br><span class="line">    build_tree(i &lt;&lt; 1 | 1, mid + 1, r);</span><br><span class="line">    pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d%d&quot;, &amp;m, &amp;n, &amp;p);</span><br><span class="line">    for (int i = 1; i &lt;= m;i++)</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;a[i]);</span><br><span class="line">    build_tree(1, 1, m);</span><br><span class="line">    for (int i = 0; i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int a, b, c, d;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">        if(a==1)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            change_mul(1, b, c, d);</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a==2)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;b, &amp;c, &amp;d);</span><br><span class="line">            change_add(1, b, c, d);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;b, &amp;c);</span><br><span class="line">            printf(&quot;%lld\n&quot;, query(1, b, c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>种类并查集-P1525 关押罪犯</title>
      <link href="/2019/08/03/2019-08-03-%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86-P1525-%E5%85%B3%E6%8A%BC%E7%BD%AA%E7%8A%AF/"/>
      <url>/2019/08/03/2019-08-03-%E7%A7%8D%E7%B1%BB%E5%B9%B6%E6%9F%A5%E9%9B%86-P1525-%E5%85%B3%E6%8A%BC%E7%BD%AA%E7%8A%AF/</url>
      
        <content type="html"><![CDATA[<h4 id="两种关系的种类并查集（有点像二分图匹配问题）"><a href="#两种关系的种类并查集（有点像二分图匹配问题）" class="headerlink" title="两种关系的种类并查集（有点像二分图匹配问题）"></a>两种关系的种类并查集（有点像二分图匹配问题）</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/* problem:P1525 关押罪犯(种类并查集)</span><br><span class="line"> * 题意：如何关押罪犯使其怒气值最小。</span><br><span class="line"> * 因为只有两个监狱有点像二分图匹配的意思，所以我使用了拆点，把每一个人拆成两个人。</span><br><span class="line"> * 我们先要从大到小排序，我们这里再确定祖先关系的时候并不是将两个罪犯合并，在我认为他们两个之间的连线更像是隔离线（要抵制，分开），把这两个人分开关在两个监狱中</span><br><span class="line"> * 从大到小的分割，最终我们分割到无法避免发生冲突的那个关系一定是最小的。</span><br><span class="line"> * 这道题让我对并查集又有了新的感受，相比于食物链三种关系的处理方式（向量）</span><br><span class="line"> * 这道题的分离来处理两种关系（分割）真是好题。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m,f[40001],x,y;</span><br><span class="line">int pre[100001];</span><br><span class="line">struct data</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,c;</span><br><span class="line">&#125; e[100001];</span><br><span class="line">int gz(const data &amp;a,const data &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    if(a.c&gt;b.c)return 1;</span><br><span class="line">    else return 0;</span><br><span class="line">&#125;</span><br><span class="line">int Find(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(x==pre[x])</span><br><span class="line">        return x;</span><br><span class="line">    return pre[x] = Find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= 2 * m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pre[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; e[i].a &gt;&gt; e[i].b &gt;&gt; e[i].c;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(e + 1, e + 1 + n, gz);</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int fx = Find(e[i].a);</span><br><span class="line">        int fy = Find(e[i].b);</span><br><span class="line">        if(fx==fy)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; e[i].c &lt;&lt; endl;</span><br><span class="line">            return 0;</span><br><span class="line">        &#125;</span><br><span class="line">        pre[fx] = Find(e[i].b + m);</span><br><span class="line">        pre[fy] = Find(e[i].a + m);</span><br><span class="line">    &#125;</span><br><span class="line">    puts(&quot;0&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷关闭农场</title>
      <link href="/2019/08/03/2019-08-03-%E6%B4%9B%E8%B0%B7%E5%85%B3%E9%97%AD%E5%86%9C%E5%9C%BA/"/>
      <url>/2019/08/03/2019-08-03-%E6%B4%9B%E8%B0%B7%E5%85%B3%E9%97%AD%E5%86%9C%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h4 id="这道题的并查集作用和以前博主做的并查集的作用不一样。"><a href="#这道题的并查集作用和以前博主做的并查集的作用不一样。" class="headerlink" title="这道题的并查集作用和以前博主做的并查集的作用不一样。"></a>这道题的并查集作用和以前博主做的并查集的作用不一样。</h4><p><strong><em>因为并查集一旦建立联系过后就不能撤回了，所以这道题我们采用的是逆向添边的操作。</em></strong></p><a id="more"></a><p><strong><em>添的边再用并查集合并到一个集合中，这样再遍历一共有几个祖先节点，如果只有一个并且被修复那么联通块依旧是1.</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct point</span><br><span class="line">&#123;</span><br><span class="line">int nex,v,val;</span><br><span class="line">&#125;edge[1000005];</span><br><span class="line">int head[1000005],cnt;</span><br><span class="line">int pre[1000005];</span><br><span class="line">int a[1000005];</span><br><span class="line">int vis[1000005];</span><br><span class="line">int ans[1000005];</span><br><span class="line">void add(int u,int v)</span><br><span class="line">&#123;</span><br><span class="line">edge[++cnt].v=v;</span><br><span class="line">edge[cnt].val=1;</span><br><span class="line">edge[cnt].nex=head[u];</span><br><span class="line">head[u]=cnt;</span><br><span class="line">&#125;</span><br><span class="line">int Find(int x)</span><br><span class="line">&#123;</span><br><span class="line">if(x==pre[x])</span><br><span class="line">return x;</span><br><span class="line">return pre[x]=Find(pre[x]);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int m,n;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">pre[i]=i;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int u,v,val;</span><br><span class="line">cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">add(u,v);</span><br><span class="line">add(v,u);</span><br><span class="line">&#125;</span><br><span class="line">for(int i=m;i&gt;=1;i--)</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">a[i]=temp; </span><br><span class="line">&#125;</span><br><span class="line">int t=m;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">int con=0;</span><br><span class="line">vis[a[i]]=1;</span><br><span class="line">for(int j=head[a[i]];j;j=edge[j].nex)</span><br><span class="line">&#123;</span><br><span class="line">int v=edge[j].v;</span><br><span class="line">if(vis[v])</span><br><span class="line">&#123;</span><br><span class="line">int x=Find(a[i]);</span><br><span class="line">int y=Find(v);</span><br><span class="line">if(x!=y)</span><br><span class="line">pre[x]=y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int j=1;j&lt;=m;j++)</span><br><span class="line">if(vis[j]&amp;&amp;pre[j]==j)</span><br><span class="line">con++;</span><br><span class="line">if(con==1)</span><br><span class="line">ans[m-i+1]=1;</span><br><span class="line">else</span><br><span class="line">ans[m-i+1]=0;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=t;i++)</span><br><span class="line">if(ans[i])</span><br><span class="line">cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">else</span><br><span class="line">cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>差分数组-P1083 借教室</title>
      <link href="/2019/08/03/2019-08-03-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84-P1083-%E5%80%9F%E6%95%99%E5%AE%A4/"/>
      <url>/2019/08/03/2019-08-03-%E5%B7%AE%E5%88%86%E6%95%B0%E7%BB%84-P1083-%E5%80%9F%E6%95%99%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="初次接触差分："><a href="#初次接触差分：" class="headerlink" title="初次接触差分："></a>初次接触差分：</h4><p><strong><em>感觉差分的思想还听常用的树状数组也是差分的思想，题解在注释中就不解释了。</em></strong></p><a id="more"></a><p>顺便附上差分数组一位大牛讲解的博客，讲的非常的好，特别是那两个定理。<a href="https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html" target="_blank" rel="noopener">https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">/* problem:P1083 借教室</span><br><span class="line"> * 差分数组+二分</span><br><span class="line"> * 这是博主差分数组的第一道题，可能理解有错误，希望各位大牛指出</span><br><span class="line"> * 对于这道题，我们差分数组操作的对象是我们每次操作的时间，二分是步骤上的二分。</span><br><span class="line"> * 顺便附上差分数组一位大牛讲解的博客，讲的非常的好，特别是那两个定理。https://www.cnblogs.com/COLIN-LIGHTNING/p/8436624.html</span><br><span class="line">*/</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int m,n;</span><br><span class="line">int a[1000100];</span><br><span class="line">int cf[1000100];</span><br><span class="line">int l[1000100];</span><br><span class="line">int r[1000100];</span><br><span class="line">int d[1000100];</span><br><span class="line">bool check(int x)</span><br><span class="line">&#123;</span><br><span class="line">    long long sum = 0;</span><br><span class="line">    memset(cf, 0, sizeof cf);</span><br><span class="line">    for (int i = 1; i &lt;= x;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cf[l[i]] += d[i];</span><br><span class="line">        cf[r[i] + 1] -= d[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += cf[i];</span><br><span class="line">        if (sum &gt; a[i])</span><br><span class="line">            return false;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= m;i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    for (int i = 1; i &lt;=n ;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin &gt;&gt; d[i] &gt;&gt; l[i] &gt;&gt; r[i];</span><br><span class="line">    &#125;</span><br><span class="line">    int l = 1, r = m;</span><br><span class="line">    int ans=0;</span><br><span class="line">    while(l&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = l + r &gt;&gt; 1;</span><br><span class="line">        if(!check(mid))</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - 1;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(ans==0)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; 0 &lt;&lt; endl;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; -1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 差分数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>P3374 【模板】树状数组 1</title>
      <link href="/2019/08/03/2019-08-03-P3374-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-1/"/>
      <url>/2019/08/03/2019-08-03-P3374-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84-1/</url>
      
        <content type="html"><![CDATA[<h4 id="树状数组板子题：对单点修改，区间和查询"><a href="#树状数组板子题：对单点修改，区间和查询" class="headerlink" title="树状数组板子题：对单点修改，区间和查询"></a>树状数组板子题：对单点修改，区间和查询</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int tree[2000010];</span><br><span class="line">int m,n;</span><br><span class="line">int lowbit(int k)</span><br><span class="line">&#123;</span><br><span class="line">    return k &amp; -k;</span><br><span class="line">&#125;</span><br><span class="line">void add(int x,int k)</span><br><span class="line">&#123;</span><br><span class="line">    while(x&lt;=m)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x] += k;</span><br><span class="line">        x += lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int sum(int x)</span><br><span class="line">&#123;</span><br><span class="line">    int sum = 0;</span><br><span class="line">    while(x!=0)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += tree[x];</span><br><span class="line">        x -= lowbit(x);</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int temp;</span><br><span class="line">        cin &gt;&gt; temp;</span><br><span class="line">        add(i, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        if(a==1)</span><br><span class="line">        &#123;</span><br><span class="line">            add(b, c);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; sum(c) - sum(b-1) &lt;&lt; endl;</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划入门-洛谷P1616</title>
      <link href="/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-%E6%B4%9B%E8%B0%B7P1616/"/>
      <url>/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-%E6%B4%9B%E8%B0%B7P1616/</url>
      
        <content type="html"><![CDATA[<h5 id="完全背包："><a href="#完全背包：" class="headerlink" title="完全背包："></a>完全背包：</h5><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/* preblem:P1616</span><br><span class="line"> * 完全背包板子题</span><br><span class="line"> * </span><br><span class="line"> * </span><br><span class="line">*/</span><br><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int dp[100000]=&#123;0&#125;;</span><br><span class="line">int arr[100000];</span><br><span class="line">int v[100000];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)&#123;</span><br><span class="line">        cin &gt;&gt; arr[i] &gt;&gt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j = arr[i]; j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = max(dp[j], dp[j - arr[i]]+v[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划入门-洛谷R21862874</title>
      <link href="/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-%E6%B4%9B%E8%B0%B7R21862874/"/>
      <url>/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-%E6%B4%9B%E8%B0%B7R21862874/</url>
      
        <content type="html"><![CDATA[<h4 id="存在依赖关系的背包DP："><a href="#存在依赖关系的背包DP：" class="headerlink" title="存在依赖关系的背包DP："></a>存在依赖关系的背包DP：</h4><p><strong><em>这道题的思维真的很不错，如果存在附件，那么我们就只看主件，至于如何只看主件，我在注释中已经说了。</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">/* preblem:R21862874</span><br><span class="line"> * 很好的一道存在依赖关系的01背包问题，如何解决依赖关系，博主是用了二维数组来记录的。</span><br><span class="line"> * 并且循环的时候只循环主键，在扫描过程中自动把附件的价值进行了讨论。</span><br><span class="line"> * 总之这道题是很好的一道入门题。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include&lt;iostream&gt;  </span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int m_v[32005];</span><br><span class="line">int m_w[32005];</span><br><span class="line">int p_v[32005][3];</span><br><span class="line">int p_w[32005][3];</span><br><span class="line">int dp[32005]=&#123;0&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int m, n;</span><br><span class="line">    cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int a, b, c;</span><br><span class="line">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">        if(!c)</span><br><span class="line">        &#123;</span><br><span class="line">            m_w[i] = a;</span><br><span class="line">            m_v[i] = a * b;</span><br><span class="line">            //cout&lt;&lt;m_w[1]&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            p_w[c][0]++;</span><br><span class="line">            p_w[c][p_w[c][0]] = a;</span><br><span class="line">            p_v[c][p_w[c][0]] = a * b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 1; i &lt;= n;i++)</span><br><span class="line">        for (int j = m ; m_v[i]&gt;0&amp;&amp;j &gt;= m_w[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = max(dp[j], dp[j - m_w[i]] + m_v[i]);</span><br><span class="line">            //cout&lt;&lt;m_v[i]&lt;&lt;endl;</span><br><span class="line">            //cout&lt;&lt;dp[j]&lt;&lt;endl;</span><br><span class="line">            if(j&gt;=m_w[i]+p_w[i][1])</span><br><span class="line">                dp[j] = max(dp[j], dp[j - m_w[i] - p_w[i][1]] + m_v[i] + p_v[i][1]);</span><br><span class="line">            if(j&gt;=m_w[i]+p_w[i][2])</span><br><span class="line">                dp[j] = max(dp[j], dp[j - m_w[i] - p_w[i][2]] + m_v[i] + p_v[i][2]);</span><br><span class="line">            if(j&gt;=m_w[i]+p_w[i][1]+p_w[i][2])</span><br><span class="line">                dp[j] = max(dp[j], dp[j - m_w[i] - p_w[i][1] - p_w[i][2]] + p_v[i][1] + m_v[i] + p_v[i][2]);</span><br><span class="line">        &#125;</span><br><span class="line">    //for(int i=0;i&lt;=m;i++)</span><br><span class="line">    //cout&lt;&lt;dp[i]&lt;&lt;endl;</span><br><span class="line">    cout &lt;&lt; dp[m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性动态规划-导弹拦截系统-P1020</title>
      <link href="/2019/07/31/2019-07-31-%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%AF%BC%E5%BC%B9%E6%8B%A6%E6%88%AA%E7%B3%BB%E7%BB%9F-P1020/"/>
      <url>/2019/07/31/2019-07-31-%E7%BA%BF%E6%80%A7%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%AF%BC%E5%BC%B9%E6%8B%A6%E6%88%AA%E7%B3%BB%E7%BB%9F-P1020/</url>
      
        <content type="html"><![CDATA[<h4 id="线性动态规划入门："><a href="#线性动态规划入门：" class="headerlink" title="线性动态规划入门："></a>线性动态规划入门：</h4><p>这是一道对于我来说很好的题。</p><a id="more"></a><p><strong><em>非递增序列那么等于也可以，我们的思路就是扫描来找，如果尾部元素大于扫描的元素那么我们可以直接把元素放进去，如果大于则，我们在序的非递增序列中照样给第一个比这个大的元素，然后用扫描元素替代他，为什么？我们这样想如果被替代的元素在尾部，那么我们替换他过后是不是我们递减序列会更长（因为尾部元素变大了），那么我们如果替代的元素在中间也不影响，为什么呐？因为我们比较的时候只看尾部元素，中间的元素我们说白了这辈子都不会再用他了。</em></strong></p><h5 id="证明下序列有序："><a href="#证明下序列有序：" class="headerlink" title="证明下序列有序："></a>证明下序列有序：</h5><p><strong><em>原序列中y1&gt;y&gt;y2，我们替换过后因为a[i]&gt;y，所以我们一定是有序的。</em></strong></p><p><strong><em>再看看我们的递增序列，如上同样的解释。</em></strong></p><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h4><p>最后len（递增序列长度）就是要求的最大不上升子序列<strong>长度</strong></p><p>但要注意的是，d中存储的<strong>并不是</strong>最大不上升子序列！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[100005],f[100005],l[100005];</span><br><span class="line">struct cmp&#123;bool operator()(int a,int b)&#123;return a&gt;b;&#125;&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n=1;</span><br><span class="line">    while(cin&gt;&gt;a[n])n++;</span><br><span class="line">    n--;</span><br><span class="line">    int con=1,cont=1;</span><br><span class="line">    l[1]=f[1]=a[1];</span><br><span class="line">    for(int i=2;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(l[cont]&gt;=a[i])l[++cont]=a[i];</span><br><span class="line">        else l[upper_bound(l+1,l+cont+1,a[i],greater&lt;int&gt;()) -l]=a[i];</span><br><span class="line">        if(f[con]&lt;a[i])f[++con]=a[i];</span><br><span class="line">        else f[lower_bound(f+1,f+con+1,a[i])-f]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;cont&lt;&lt;&quot; &quot;&lt;&lt;con;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划入门-HDU1089</title>
      <link href="/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-HDU1089/"/>
      <url>/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-HDU1089/</url>
      
        <content type="html"><![CDATA[<h4 id="上升子序列最大和"><a href="#上升子序列最大和" class="headerlink" title="上升子序列最大和"></a>上升子序列最大和</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">/* problem :HDU 1089</span><br><span class="line"> * 题解：d[n]代表前i个序列中上升子序列之和的最大和</span><br><span class="line"> * 思路：两层循环来维护dp，分两种情况来讨论，一个是前面大于后面就比较前面的子序列和+后项的和再取max</span><br><span class="line"> * 如果是后项比比前项小的话就看当前a[i]的值再和以前的dp值向比较</span><br><span class="line"> * 因为是初学dp，博主开始很不理解为什么每次要和dp[i]取最大值，后来明白dp[i]扫描的时候会多次比较然后取最大值。</span><br><span class="line"> * 这里状态转移的话博主的理解就是上一个最大子序列之和转移到下一个。</span><br><span class="line">*/</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#define MAX 0x3f3f3f3f</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">long long a[1111],dp[1111];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    while(cin&gt;&gt;n&amp;&amp;n)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(dp, 0, sizeof dp);</span><br><span class="line">        for (int i = 1; i &lt;= n;i++)</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">        dp[1] = a[1];</span><br><span class="line">        for (int i = 2; i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 1; j &lt;= i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(a[i]&gt;a[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i] = max(dp[j] + a[i], dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i] = max(a[i], dp[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(dp + 1, dp + n + 1);</span><br><span class="line">        cout &lt;&lt; dp[n] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划入门-HDU1159</title>
      <link href="/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-HDU1159/"/>
      <url>/2019/07/31/2019-07-31-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8-HDU1159/</url>
      
        <content type="html"><![CDATA[<h4 id="最长公共子序列：大家都知道递推公式也不多说了。"><a href="#最长公共子序列：大家都知道递推公式也不多说了。" class="headerlink" title="最长公共子序列：大家都知道递推公式也不多说了。"></a>最长公共子序列：大家都知道递推公式也不多说了。</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/* preblem:HDU1159</span><br><span class="line"> * 题解：最长公共子序列。</span><br><span class="line"> * 公式大家都知道，就不多赘述了。</span><br><span class="line">*/</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">string a,b;</span><br><span class="line">int len_a,len_b;</span><br><span class="line">int dp[1001][1001];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    string a, b;</span><br><span class="line">    while(cin&gt;&gt;a&gt;&gt;b)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(dp, 0, sizeof dp);</span><br><span class="line">        for (int i = 1;i&lt;=a.length();i++)&#123;</span><br><span class="line">            for (int j = 1; j &lt;= b.length();j++)&#123;</span><br><span class="line">                if(a[i-1]==b[j-1])</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = dp[i - 1][j - 1] + 1;</span><br><span class="line">                &#125;</span><br><span class="line">                else</span><br><span class="line">                &#123;</span><br><span class="line">                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[a.length()][b.length()] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodeForces 546E 网络流好题</title>
      <link href="/2019/07/30/2019-07-30-CodeForces-546E-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%A5%BD%E9%A2%98/"/>
      <url>/2019/07/30/2019-07-30-CodeForces-546E-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%A5%BD%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="网络流好题："><a href="#网络流好题：" class="headerlink" title="网络流好题："></a>网络流好题：</h4><p><strong><em>这里只说题目中未说明的一点，为什么指定有路径的城市可以设置容量为INF？因为他们可以无限往来兵力。</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">/* Auther :CaiCai</span><br><span class="line"> * 网络流拆点题目，网络流已经做了一些题目了，目前小结。如果遇见题目初始化一系列条件，并且问你能否达到某种状态那么大部分是最大流的问题。</span><br><span class="line"> * 这道题是一个好题难在建图上面，和一些网络流的题目一样，这道题也需要拆点每座城拆成两个点，然后分别建立源点和束点。</span><br><span class="line"> * 因为每一个兵可以自己留在自己的城里，所以a[i][i+N]=INF。自己指向自己的道路可以无限大。</span><br><span class="line"> * 因为建图的原因，所以最后存进去调配的兵力就是原来的大小减去网络图中残余的网络量就可以了。如果是0直接输出就完了，证明并没有兵力往来，可能是前面已经没有足够的带宽来进行兵力往来了。</span><br><span class="line"> * problem: Codeforces 546E.</span><br><span class="line">*/</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int INF=0x3f3f3f3f;</span><br><span class="line">const int maxN=205;</span><br><span class="line">int m, n;</span><br><span class="line">int tot;</span><br><span class="line">int temp;</span><br><span class="line">int r[maxN&lt;&lt;2][maxN&lt;&lt;2], flow[maxN&lt;&lt;2], pre[maxN&lt;&lt;2], food[maxN], drink[maxN];</span><br><span class="line">int sum1 = 0;</span><br><span class="line">int sum2 = 0;</span><br><span class="line">int bfs(int st,int en)</span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    memset(pre, -1, sizeof pre);</span><br><span class="line">    pre[st] = 0;</span><br><span class="line">    flow[st] = INF;</span><br><span class="line">    q.push(st);</span><br><span class="line">    while (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for (int i = 1; i &lt;= tot;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(pre[i]==-1&amp;&amp;r[u][i]&gt;0)</span><br><span class="line">            &#123;</span><br><span class="line">                pre[i] = u;</span><br><span class="line">                flow[i] = min(r[u][i], flow[u]);</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre[en] == -1 ? -1 : flow[en];</span><br><span class="line">&#125;</span><br><span class="line">int dfs(int st,int en)</span><br><span class="line">&#123;</span><br><span class="line">    int maxflow=0, icu;</span><br><span class="line">    while((icu=bfs(st,en))!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        int last = en;</span><br><span class="line">        int k;</span><br><span class="line">        while(last!=st)</span><br><span class="line">        &#123;</span><br><span class="line">            k = pre[last];</span><br><span class="line">            r[k][last] -= icu;</span><br><span class="line">            r[last][k] += icu;</span><br><span class="line">            last = k;</span><br><span class="line">        &#125;</span><br><span class="line">        maxflow += icu;</span><br><span class="line">    &#125;</span><br><span class="line">    return maxflow;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;m, &amp;n);</span><br><span class="line">    tot = m * 2 + 1;</span><br><span class="line">    for (int i = 1; i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;temp);</span><br><span class="line">        sum1 += temp;</span><br><span class="line">        r[0][i] = temp;</span><br><span class="line">        r[i][i + m] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = m+1; i &lt;= 2*m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;, &amp;temp);</span><br><span class="line">        sum2+=temp;</span><br><span class="line">        r[i][tot] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    for (int i = 0; i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int a, b;</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</span><br><span class="line">        r[a][b+m] = INF;</span><br><span class="line">        r[b][a+m] = INF;</span><br><span class="line">    &#125;</span><br><span class="line">    int result;</span><br><span class="line">    int scr;</span><br><span class="line">    result = dfs(0, tot);</span><br><span class="line">    //cout&lt;&lt;result&lt;&lt;endl;</span><br><span class="line">    if(sum1==result&amp;&amp;sum2==result)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;YES\n&quot;);</span><br><span class="line">        for (int i = 1; i &lt;= m;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for (int j = 1+m; j &lt;= m*2;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                printf(&quot;%d%s&quot;, r[i][j]==0?(0):(INF - r[i][j]), j==2*m?(&quot;&quot;):(&quot; &quot;));</span><br><span class="line">            &#125;</span><br><span class="line">            puts(&quot;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;NO\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu 1532 网络流入门</title>
      <link href="/2019/07/30/2019-07-30-hdu-1532-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%85%A5%E9%97%A8/"/>
      <url>/2019/07/30/2019-07-30-hdu-1532-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="网络流入门题"><a href="#网络流入门题" class="headerlink" title="网络流入门题"></a>网络流入门题</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define INF 1e9+7</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxN=205;</span><br><span class="line">int N,M;</span><br><span class="line">queue&lt;int&gt;q;</span><br><span class="line">int flow[maxN][maxN], dis[maxN];//dis代表的是这个点的层 </span><br><span class="line">bool bfs()</span><br><span class="line">&#123;</span><br><span class="line">memset(dis,-1,sizeof dis);</span><br><span class="line">while(!q.empty()) q.pop();</span><br><span class="line">dis[1]=0;</span><br><span class="line">q.push(1);</span><br><span class="line">while(!q.empty())&#123;</span><br><span class="line">int u=q.front();</span><br><span class="line">q.pop();</span><br><span class="line">for(int i=1;i&lt;=M;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(flow[u][i]&amp;&amp;dis[i]==-1)</span><br><span class="line">&#123;</span><br><span class="line">dis[i]=dis[u]+1;</span><br><span class="line">q.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return dis[M]!=-1;</span><br><span class="line">&#125;</span><br><span class="line">int dfs(int x,int remain)</span><br><span class="line">&#123;</span><br><span class="line">if(x==M||remain==0) return remain;</span><br><span class="line">int k;</span><br><span class="line">for(int i=1;i&lt;=M;i++)&#123;</span><br><span class="line">if(flow[x][i]&gt;0&amp;&amp;dis[i]==dis[x]+1&amp;&amp;(k=dfs(i,min(remain,flow[x][i]))))</span><br><span class="line">&#123;</span><br><span class="line">flow[x][i]-=k;</span><br><span class="line">flow[i][x]+=k;</span><br><span class="line">return k;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">while(~scanf(&quot;%d%d&quot;,&amp;N,&amp;M))</span><br><span class="line">&#123;</span><br><span class="line">memset(flow,0,sizeof flow);</span><br><span class="line">for(int i=0;i&lt;N;i++)</span><br><span class="line">&#123;</span><br><span class="line">int a,b,c;</span><br><span class="line">scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">flow[a][b]+=c;  //这个点坑了我很久后来是看了别人的博客才发现的错误。 </span><br><span class="line">&#125;//所以如果这样赋值的话我们有向图的反向边也不能直接赋值为0了。 </span><br><span class="line">int ans=0;</span><br><span class="line">int res;</span><br><span class="line">while(bfs())//dinic开始分层 </span><br><span class="line">&#123;</span><br><span class="line">while(res=dfs(1,INF)) ans+=res;  </span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 2516最小费用最大流</title>
      <link href="/2019/07/30/2019-07-30-POJ-2516%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2019/07/30/2019-07-30-POJ-2516%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="提意："><a href="#提意：" class="headerlink" title="提意："></a>提意：</h4><p><strong><em>M个商店，N个供应商，K种商品，每个供应商向每个商店提供一种商品有他相应的代价，我们需要将这个代价最小化，并且满足各个商店的需求。</em></strong></p><a id="more"></a><h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><p><strong><em>建立源点与各个供应商的边，代价边为0，容量边为各个供应商拥有各个商品对应的商品数量。供应商和商店建立代价边为对应的代价，容量边为自己这种商品所拥有的数量，也可以是无限大，商店和汇点建立边，代价边为0，容量边为自己所需要的商品数量。</em></strong></p><h6 id="因为才入门的缘故，博主最开始在纠结为什么所有商品一起跑了，后来才明白每种商品需要一个个的跑，最后每种商品的流x代价相加就是答案。"><a href="#因为才入门的缘故，博主最开始在纠结为什么所有商品一起跑了，后来才明白每种商品需要一个个的跑，最后每种商品的流x代价相加就是答案。" class="headerlink" title="因为才入门的缘故，博主最开始在纠结为什么所有商品一起跑了，后来才明白每种商品需要一个个的跑，最后每种商品的流x代价相加就是答案。"></a>因为才入门的缘故，博主最开始在纠结为什么所有商品一起跑了，后来才明白每种商品需要一个个的跑，最后每种商品的流x代价相加就是答案。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">#define HalF (l + r)&gt;&gt;1</span><br><span class="line">#define lsn rt&lt;&lt;1</span><br><span class="line">#define rsn rt&lt;&lt;1|1</span><br><span class="line">#define Lson lsn, l, mid</span><br><span class="line">#define Rson rsn, mid+1, r</span><br><span class="line">#define QL Lson, ql, qr</span><br><span class="line">#define QR Rson, ql, qr</span><br><span class="line">#define myself rt, l, r</span><br><span class="line">using namespace std;</span><br><span class="line">typedef unsigned long long ull;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int S = 0;</span><br><span class="line">const int maxN = 107;</span><br><span class="line">int N, M, K, T, r[maxN][maxN], cost[maxN][maxN];</span><br><span class="line">struct node </span><br><span class="line">&#123;</span><br><span class="line">    int thing[maxN];</span><br><span class="line">&#125;a[maxN&lt;&lt;1];</span><br><span class="line">int pre[maxN], dist[maxN], Flow[maxN];  bool inque[maxN];</span><br><span class="line">queue&lt;int&gt; Q;</span><br><span class="line">int spfa()</span><br><span class="line">&#123;</span><br><span class="line">    while(!Q.empty())</span><br><span class="line">        Q.pop();</span><br><span class="line">    memset(pre, -1, sizeof pre);</span><br><span class="line">    memset(dist, INF, sizeof dist);</span><br><span class="line">    memset(inque, 0, sizeof inque);</span><br><span class="line">    memset(Flow, 0, sizeof Flow);</span><br><span class="line">    Flow[S] = INF;</span><br><span class="line">    dist[S] = 0;</span><br><span class="line">    Q.push(S);</span><br><span class="line">    inque[S] = 1;</span><br><span class="line">    while(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        inque[u] = 0;</span><br><span class="line">        for (int i = 1; i &lt;= T;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(r[u][i]&amp;&amp;dist[i]&gt;dist[u]+cost[u][i])</span><br><span class="line">            &#123;</span><br><span class="line">                pre[i] = u;</span><br><span class="line">                dist[i] = cost[u][i] + dist[u];</span><br><span class="line">                Flow[i] = min(Flow[u], r[u][i]);</span><br><span class="line">                if(!inque[i])</span><br><span class="line">                &#123;</span><br><span class="line">                Q.push(i);</span><br><span class="line">                inque[i] = 1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre[T] != -1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while(~scanf(&quot;%d%d%d&quot;,&amp;N,&amp;M,&amp;K),M,N,K)</span><br><span class="line">    &#123;</span><br><span class="line">        T = N + M + 1;</span><br><span class="line">        for (int i = 1; i &lt;= N;i++)&#123;</span><br><span class="line">            for (int j = 1; j &lt;= K;j++)&#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;a[i].thing[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (int i = 1; i &lt;= M;i++)&#123;</span><br><span class="line">            for (int j = 1; j &lt;= K;j++)&#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;a[i + N].thing[j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        bool flag = 0;</span><br><span class="line">        for (int i = 1; i &lt;= K;i++)&#123;</span><br><span class="line">            int sum1 = 0, sum2 = 0;</span><br><span class="line">            for (int j = 1; j &lt;= N;j++)&#123;</span><br><span class="line">                sum1 += a[j].thing[i];</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= M;j++)&#123;</span><br><span class="line">                sum2 += a[j + N].thing[i];</span><br><span class="line">            &#125;</span><br><span class="line">            if(sum1&gt;sum2)&#123;</span><br><span class="line">                flag = 1;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        for (int k = 1; k &lt;= K;k++)&#123;</span><br><span class="line">            memset(r, 0, sizeof r);</span><br><span class="line">            memset(cost, INF, sizeof cost);</span><br><span class="line">            for (int  i= 1; i &lt;= N;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                r[i][T] = a[i].thing[k];</span><br><span class="line">                r[T][i] = 0;</span><br><span class="line">                cost[i][T] = 0;</span><br><span class="line">                for (int j = 1; j &lt;= M;j++)&#123;</span><br><span class="line">                    scanf(&quot;%d&quot;, &amp;cost[N + j][i]);</span><br><span class="line">                    cost[i][j + N] = -cost[N + j][i];</span><br><span class="line">                    r[j+N][i]=a[j+N].thing[k];</span><br><span class="line">                    r[S][j + N] = a[j + N].thing[k];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag)</span><br><span class="line">                continue;</span><br><span class="line">            for (int i = 1; i &lt;= M;i++)&#123;</span><br><span class="line">                r[S][i + N] = a[i + N].thing[k];</span><br><span class="line">                cost[S][i + N] = 0;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            while(spfa())</span><br><span class="line">            &#123;</span><br><span class="line">                int now = T;</span><br><span class="line">                int last;</span><br><span class="line">                while(now)</span><br><span class="line">                &#123;</span><br><span class="line">                    last = pre[now];</span><br><span class="line">                    r[last][now] -= Flow[T];</span><br><span class="line">                    r[now][last] += Flow[T];</span><br><span class="line">                    now = last;</span><br><span class="line">                &#125;</span><br><span class="line">                ans += dist[T] * Flow[T];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,flag==1?-1:ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ 2135最小费用最大流</title>
      <link href="/2019/07/30/2019-07-30-POJ-2135%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
      <url>/2019/07/30/2019-07-30-POJ-2135%E6%9C%80%E5%B0%8F%E8%B4%B9%E7%94%A8%E6%9C%80%E5%A4%A7%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="最小费用最大流的板子题。"><a href="#最小费用最大流的板子题。" class="headerlink" title="最小费用最大流的板子题。"></a>最小费用最大流的板子题。</h4><p><strong><em>其实我觉得这道题还挺好的，最重要的是这道题让我对网络流EK算法有了更深的理解，其实网络流每次跑都和DFS有点像。而我最开始理解成了BFS的那种顺序。说说这道题吧，这道题，我们因为要跑来回，所以图中肯定存在两种路径可以从S到达T，所以我们直接设置S到1的容量为2，N到T的容量也为2。并且我们图中的代价边设置为路的长度，跑一下最短路，这样我们只需要跑两次就可以找到一个最大流了。</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">#define HalF (l + r)&gt;&gt;1</span><br><span class="line">#define lsn rt&lt;&lt;1</span><br><span class="line">#define rsn rt&lt;&lt;1|1</span><br><span class="line">#define Lson lsn, l, mid</span><br><span class="line">#define Rson rsn, mid+1, r</span><br><span class="line">#define QL Lson, ql, qr</span><br><span class="line">#define QR Rson, ql, qr</span><br><span class="line">#define myself rt, l, r</span><br><span class="line">using namespace std;</span><br><span class="line">typedef unsigned long long ull;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxN = 1e5 + 7;</span><br><span class="line">const int maxE = 2e4 + 7;</span><br><span class="line">const int S = 0;</span><br><span class="line">int N, M, head[maxN], cnt, T;</span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    int nex,u,v,cost,flow;</span><br><span class="line">    Edge(int a=-1,int b=0,int c=0,int d=0,int e=0):nex(a),u(b),v(c),cost(e),flow(d)&#123;&#125;;</span><br><span class="line">&#125;edge[maxN&lt;&lt;1];</span><br><span class="line"></span><br><span class="line">void addedge(int u,int v,int flow,int cost)</span><br><span class="line">&#123;</span><br><span class="line">    edge[cnt]= Edge(head[u],u,v,flow,cost);</span><br><span class="line">    head[u]=cnt++;</span><br><span class="line">&#125;</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    T=N+1;</span><br><span class="line">    cnt=0;</span><br><span class="line">    memset(head,-1,sizeof head);</span><br><span class="line">&#125;</span><br><span class="line">int pre[maxN], Flow[maxN], dist[maxN];  bool inque[maxN];</span><br><span class="line">queue&lt;int&gt;q;</span><br><span class="line">int spfa()</span><br><span class="line">&#123;</span><br><span class="line">while(!q.empty()) q.pop();</span><br><span class="line">    memset(Flow,0,sizeof Flow);</span><br><span class="line">    memset(dist,INF,sizeof dist);</span><br><span class="line">    memset(inque,0,sizeof inque);</span><br><span class="line">    memset(pre,-1,sizeof pre);</span><br><span class="line">    dist[S]=0; inque[S]=1; Flow[S]=INF;pre[S]=0;</span><br><span class="line">    q.push(S);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u=q.front();q.pop();inque[u]=0;</span><br><span class="line">        for(int i=head[u];~i;i=edge[i].nex)</span><br><span class="line">        &#123;</span><br><span class="line">            int v=edge[i].v;</span><br><span class="line">            int cost=edge[i].cost;</span><br><span class="line">            if(dist[v]&gt;dist[u]+cost&amp;&amp;edge[i].flow&gt;0)</span><br><span class="line">            &#123;</span><br><span class="line">                pre[v]=i;</span><br><span class="line">                dist[v]=dist[u]+cost;</span><br><span class="line">                Flow[v]=min(edge[i].flow,Flow[u]);</span><br><span class="line">                if(!inque[v])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                    inque[v]=1;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre[T]^-1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while(~scanf(&quot;%d%d&quot;,&amp;N,&amp;M))</span><br><span class="line">    &#123;</span><br><span class="line">        init();</span><br><span class="line">        addedge(S,1,2,0);</span><br><span class="line">        addedge(1,S,0,0);</span><br><span class="line">        addedge(N,T,2,0);</span><br><span class="line">        addedge(T,N,0,0);</span><br><span class="line">        for(int i=0;i&lt;M;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int a,b,c;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class="line">            addedge(a,b,1,c);</span><br><span class="line">            addedge(b,a,0,-c);</span><br><span class="line">            addedge(a,b,0,-c);</span><br><span class="line">            addedge(b,a,1,c);</span><br><span class="line">        &#125;</span><br><span class="line">        int ans=0;</span><br><span class="line">        //for(int i=1;i&lt;=2;i++)也是可以的因为一定只跑了2次。 </span><br><span class="line">        while(spfa())</span><br><span class="line">        &#123;</span><br><span class="line">            int now=T,last=pre[now];</span><br><span class="line">            while(now)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[last].flow-=Flow[T];</span><br><span class="line">                edge[last^1].flow+=Flow[T];</span><br><span class="line">                now=edge[last].u;</span><br><span class="line">                last=pre[now];</span><br><span class="line">            &#125;</span><br><span class="line">            ans+=dist[T]*Flow[T];</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj 2756 二分图问题</title>
      <link href="/2019/07/30/2019-07-30-poj-2756-%E4%BA%8C%E5%88%86%E5%9B%BE%E9%97%AE%E9%A2%98/"/>
      <url>/2019/07/30/2019-07-30-poj-2756-%E4%BA%8C%E5%88%86%E5%9B%BE%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="这道题是一个二分-图的问题，但是博主最近学习了网络流，就用了网络流写了。"><a href="#这道题是一个二分-图的问题，但是博主最近学习了网络流，就用了网络流写了。" class="headerlink" title="这道题是一个二分 图的问题，但是博主最近学习了网络流，就用了网络流写了。"></a>这道题是一个二分 图的问题，但是博主最近学习了网络流，就用了网络流写了。</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int INF=50000;</span><br><span class="line">const int maxN=205;</span><br><span class="line">int N,M;        //N个英飞，M个外飞</span><br><span class="line">int dis[maxN], r[maxN][maxN], cot=0, tot;</span><br><span class="line">int bfs()</span><br><span class="line">&#123;</span><br><span class="line">    memset(dis, -1, sizeof dis);</span><br><span class="line">    queue&lt;int&gt;q;</span><br><span class="line">    while(!q.empty())</span><br><span class="line">        q.pop();</span><br><span class="line">    dis[0] = 1;</span><br><span class="line">    q.push(0);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for (int i = 1; i &lt;= tot;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(r[u][i]&gt;0&amp;&amp;dis[i]==-1)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i] = dis[u]+1;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dis[tot] &gt; 0 ? 1 : 0;</span><br><span class="line">&#125;</span><br><span class="line">int dfs(int x,int remain)</span><br><span class="line">&#123;</span><br><span class="line">    if(x==tot)</span><br><span class="line">        return remain;</span><br><span class="line">    int k;</span><br><span class="line">    for (int i = 1; i &lt;= tot;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if (r[x][i] &gt; 0 &amp;&amp; dis[i] == dis[x] + 1&amp;&amp;(k=dfs(i,min(r[x][i],remain))))</span><br><span class="line">        &#123;</span><br><span class="line">            r[x][i] -= k;</span><br><span class="line">            r[i][x] += k;</span><br><span class="line">            return k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while(~scanf(&quot;%d%d&quot;,&amp;M,&amp;N))</span><br><span class="line">    &#123;</span><br><span class="line">    tot=N+1;</span><br><span class="line">        memset(r, -1, sizeof(r));</span><br><span class="line">        memset(dis, -1, sizeof(dis));</span><br><span class="line">        int e1,e2;</span><br><span class="line">        while (~scanf(&quot;%d%d&quot;,&amp;e1,&amp;e2))</span><br><span class="line">        &#123;</span><br><span class="line">            if(e1==-1&amp;&amp;e2==-1)</span><br><span class="line">                break;</span><br><span class="line">            r[e1][e2] = 1;</span><br><span class="line">            r[e2][e1] = 0;</span><br><span class="line">            r[0][e1] = 1;</span><br><span class="line">            r[e2][tot] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int res=0;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        while(bfs())</span><br><span class="line">        &#123;</span><br><span class="line">            res = dfs(0, INF);</span><br><span class="line">            ans += res;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, ans);</span><br><span class="line">        for(int i=1; i&lt;=M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int j=M+1; j&lt;tot; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(r[i][j]==0) printf(&quot;%d %d\n&quot;,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu 3549 网络流Dinic板子题</title>
      <link href="/2019/07/30/2019-07-30-hdu-3549-%E7%BD%91%E7%BB%9C%E6%B5%81Dinic%E6%9D%BF%E5%AD%90%E9%A2%98/"/>
      <url>/2019/07/30/2019-07-30-hdu-3549-%E7%BD%91%E7%BB%9C%E6%B5%81Dinic%E6%9D%BF%E5%AD%90%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="网络流Dinic板子题"><a href="#网络流Dinic板子题" class="headerlink" title="网络流Dinic板子题"></a>网络流Dinic板子题</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define INF 1e9+7</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxN=1005;</span><br><span class="line">int N,M;</span><br><span class="line">int r[maxN][maxN], pre[maxN], flow[maxN][maxN];</span><br><span class="line">int dis[maxN];</span><br><span class="line">queue&lt;int&gt; q;</span><br><span class="line">int bfs()</span><br><span class="line">&#123;</span><br><span class="line">    while(!q.empty())</span><br><span class="line">        q.pop();</span><br><span class="line">    memset(dis, -1, sizeof dis);</span><br><span class="line">    dis[1] = 0;</span><br><span class="line">    q.push(1);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for (int i = 1; i &lt;= N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(flow[u][i]&gt;0&amp;&amp;dis[i]==-1)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[i] = dis[u] + 1;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return dis[N] != -1;</span><br><span class="line">&#125;</span><br><span class="line">int dfs(int x,int remain)</span><br><span class="line">&#123;</span><br><span class="line">    if(remain==0||x==N)</span><br><span class="line">        return remain;</span><br><span class="line">    int k;</span><br><span class="line">    for (int i = 1; i &lt;= N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(flow[x][i]&gt;0&amp;&amp;dis[i]==dis[x]+1&amp;&amp;(k=dfs(i,min(remain,flow[x][i]))))</span><br><span class="line">        &#123;</span><br><span class="line">            flow[x][i] -= k;</span><br><span class="line">            flow[i][x] += k;</span><br><span class="line">            return k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    int cnt=1;</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        memset(flow, 0, sizeof flow);</span><br><span class="line">        scanf(&quot;%d%d&quot;, &amp;N, &amp;M);</span><br><span class="line">        for (int i = 0; i &lt; M;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            int a, b, c;</span><br><span class="line">            scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            flow[a][b] += c;</span><br><span class="line">        &#125;</span><br><span class="line">        int ans = 0;</span><br><span class="line">        int res;</span><br><span class="line">        while(bfs())</span><br><span class="line">        &#123;</span><br><span class="line">            while(res=dfs(1,INF))</span><br><span class="line">                ans += res;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Case %d: %d\n&quot;,cnt++, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hdu 2063 过山车</title>
      <link href="/2019/07/30/2019-07-30-hdu-2063-%E8%BF%87%E5%B1%B1%E8%BD%A6/"/>
      <url>/2019/07/30/2019-07-30-hdu-2063-%E8%BF%87%E5%B1%B1%E8%BD%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="二分图问题用网络流跑"><a href="#二分图问题用网络流跑" class="headerlink" title="二分图问题用网络流跑"></a>二分图问题用网络流跑</h4><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">/* problem: HDU2063</span><br><span class="line"> * Auther:CaiCai</span><br><span class="line"> * 第二次用EK跑二分图，没什么好说的，建好图就一定可以做</span><br><span class="line"> * 建图就是女生一边，男生一边，再把源点和束点找到，权值分别是1这样就可以把图建完了。</span><br><span class="line">*/</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int INF=0x3f3f3f3f;</span><br><span class="line">const int maxN=505;</span><br><span class="line">int m, n;</span><br><span class="line">int temp;</span><br><span class="line">int r[maxN&lt;&lt;1][maxN&lt;&lt;1], flow[maxN&lt;&lt;1], pre[maxN&lt;&lt;1];</span><br><span class="line">int sum1 = 0;</span><br><span class="line">int sum2 = 0;</span><br><span class="line">int K, M, N;</span><br><span class="line">int tot;</span><br><span class="line">int bfs(int st,int en)</span><br><span class="line">&#123;</span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    while(!q.empty())</span><br><span class="line">        q.pop();</span><br><span class="line">    memset(pre, -1, sizeof pre);</span><br><span class="line">    pre[0] = 0;</span><br><span class="line">    flow[0]=INF;</span><br><span class="line">    q.push(0);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for (int i = 1; i &lt;= tot;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(r[u][i]&gt;0&amp;&amp;pre[i]==-1)</span><br><span class="line">            &#123;</span><br><span class="line">                pre[i] = u;</span><br><span class="line">                flow[i] = min(flow[u], r[u][i]);</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre[en] == -1 ? -1 : flow[en];</span><br><span class="line">&#125;</span><br><span class="line">int maxflow(int st,int en)</span><br><span class="line">&#123;</span><br><span class="line">    int icr = 0;</span><br><span class="line">    int ans = 0;</span><br><span class="line">    while((icr=bfs(st,en))!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        int k = en;</span><br><span class="line">        while(k!=st)</span><br><span class="line">        &#123;</span><br><span class="line">            int last = pre[k];</span><br><span class="line">            r[last][k] -= icr;</span><br><span class="line">            r[k][last] += icr;</span><br><span class="line">            k = last;</span><br><span class="line">        &#125;</span><br><span class="line">        ans += icr;</span><br><span class="line">    &#125;</span><br><span class="line">    return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while (~scanf(&quot;%d&quot;,&amp;K))</span><br><span class="line">    &#123;</span><br><span class="line">    if(K==0)</span><br><span class="line">    break;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;M,&amp;N);</span><br><span class="line">        memset(r, 0, sizeof r);</span><br><span class="line">        tot = M + N+1;</span><br><span class="line">        for (int i = 1; i &lt;= M;i++) r[0][i] = 1;</span><br><span class="line">        for (int i = M + 1; i &lt;= M + N;i++) r[i][tot] = 1;</span><br><span class="line">            for (int i = 0; i &lt; K; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                int a, b;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;a);</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;b);</span><br><span class="line">                r[a][b + M] = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            int ans = maxflow(0, tot);</span><br><span class="line">            printf(&quot;%d\n&quot;, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络流入门裸题</title>
      <link href="/2019/07/27/2019-07-27-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%85%A5%E9%97%A8%E8%A3%B8%E9%A2%98/"/>
      <url>/2019/07/27/2019-07-27-%E7%BD%91%E7%BB%9C%E6%B5%81%E5%85%A5%E9%97%A8%E8%A3%B8%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><strong><em>网络流板子题</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;ctime&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line">const int MAXM = 6000011;</span><br><span class="line">const int MAXN = 1000011;</span><br><span class="line">int inf;</span><br><span class="line">int n,m;</span><br><span class="line">int first[MAXN];</span><br><span class="line">int ecnt;</span><br><span class="line">int s,t;</span><br><span class="line">int dis[MAXN];</span><br><span class="line">int ans;</span><br><span class="line"></span><br><span class="line">struct edge</span><br><span class="line">&#123;</span><br><span class="line">int v,f;</span><br><span class="line">int next;</span><br><span class="line">&#125;e[MAXM];</span><br><span class="line"></span><br><span class="line">inline int getint()</span><br><span class="line">&#123;</span><br><span class="line">int w=0,q=0;</span><br><span class="line">char c=getchar();</span><br><span class="line">while(c&lt;&apos;0&apos;||c&gt;&apos;9&apos;&amp;&amp;c!=&apos;-&apos;) c=getchar();</span><br><span class="line">if(c==&apos;-&apos;) q=1,c=getchar();</span><br><span class="line">while(c&gt;=&apos;0&apos;&amp;&amp;c&lt;=&apos;9&apos;) w=w*10+c-&apos;0&apos;,c=getchar();</span><br><span class="line">return q?-w:w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool link(int x,int y,int z)</span><br><span class="line">&#123;</span><br><span class="line">e[++ecnt].next=first[x];first[x]=ecnt;e[ecnt].v=y;e[ecnt].f=z;</span><br><span class="line">e[++ecnt].next=first[y];first[y]=ecnt;e[ecnt].v=x;e[ecnt].f=z;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline bool bfs()</span><br><span class="line">&#123;</span><br><span class="line">memset(dis,127/3,sizeof dis);</span><br><span class="line">int ceng=dis[t];</span><br><span class="line">queue&lt;int&gt;q;</span><br><span class="line">while(!q.empty()) q.pop();</span><br><span class="line">dis[1]=1;q.push(1);//dis存层;</span><br><span class="line">while(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">int u=q.front(); q.pop();</span><br><span class="line">for(int i=first[u];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">if(e[i].f&amp;&amp;dis[e[i].v]==ceng)</span><br><span class="line">&#123;</span><br><span class="line">dis[e[i].v]=dis[u]+1;</span><br><span class="line">q.push(e[i].v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(dis[t]!=ceng) return 1;</span><br><span class="line">&#125;</span><br><span class="line">return 0; </span><br><span class="line">&#125;</span><br><span class="line">inline int maxflow(int now,int remain)</span><br><span class="line">&#123;</span><br><span class="line">if(remain==0||now==t) return remain;</span><br><span class="line">int flow=0;</span><br><span class="line">for(int i=first[now];i;i=e[i].next)</span><br><span class="line">&#123;</span><br><span class="line">if(dis[e[i].v]==dis[now]+1&amp;&amp;e[i].f)</span><br><span class="line">&#123;</span><br><span class="line">int f=maxflow(e[i].v,min(remain,e[i].f));</span><br><span class="line">if(f)</span><br><span class="line">&#123;</span><br><span class="line">e[i].f-=f;e[i^1].f+=f;</span><br><span class="line">flow+=f ; remain-=f;</span><br><span class="line">if(remain==0) return flow;</span><br><span class="line">&#125;</span><br><span class="line">else dis[e[i].v]=-1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return flow;</span><br><span class="line">&#125;</span><br><span class="line">inline void solve()</span><br><span class="line">&#123;</span><br><span class="line">s=1,t=n*m;inf=1&lt;&lt;30;</span><br><span class="line">while(bfs())</span><br><span class="line">&#123;</span><br><span class="line">ans+=maxflow(s,inf);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d&quot;,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  n=getint(); m=getint();</span><br><span class="line">  int x; ecnt=1;</span><br><span class="line">  int nowx,nownex;</span><br><span class="line">  for(int i=1;i&lt;=n;i++)</span><br><span class="line">      for(int j=1;j&lt;m;j++)&#123;</span><br><span class="line">      nowx=(i-1)*m+j,nownex=nowx+1;</span><br><span class="line">      x=getint(); link(nowx,nownex,x);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  for(int i=1;i&lt;n;i++)</span><br><span class="line">      for(int j=1;j&lt;=m;j++) &#123;</span><br><span class="line">      nowx=(i-1)*m+j,nownex=nowx+m;</span><br><span class="line">      x=getint(); link(nowx,nownex,x);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  for(int i=1;i&lt;n;i++)</span><br><span class="line">      for(int j=1;j&lt;m;j++) &#123;</span><br><span class="line">      nowx=(i-1)*m+j,nownex=nowx+m+1;</span><br><span class="line">      x=getint(); link(nowx,nownex,x);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  solve();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj2528 线段树离散化处理</title>
      <link href="/2019/07/27/2019-07-27-poj2528-%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A6%BB%E6%95%A3%E5%8C%96%E5%A4%84%E7%90%86/"/>
      <url>/2019/07/27/2019-07-27-poj2528-%E7%BA%BF%E6%AE%B5%E6%A0%91%E7%A6%BB%E6%95%A3%E5%8C%96%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><strong><em>直接存肯定会炸所以我们离散化处理，离散化在我的看法就是将距离大的缩小距离来节省空间。</em></strong></p><p>ps:左右儿子每次手打真的容易粗心错，小编在这里建议用宏定义。</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#define lson i&lt;&lt;1</span><br><span class="line">#define rson i&lt;&lt;1|1</span><br><span class="line">using namespace std;</span><br><span class="line">const int manx = 20000 + 5;</span><br><span class="line">const int MANX =1e7+10;</span><br><span class="line">typedef long long ll;</span><br><span class="line">ll posi1[manx &lt;&lt; 1], posi2[manx &lt;&lt; 1];</span><br><span class="line">set&lt;ll&gt; st;</span><br><span class="line">ll id[MANX ];</span><br><span class="line">ll vis[manx&lt;&lt;1];</span><br><span class="line">struct tree</span><br><span class="line">&#123;</span><br><span class="line">    ll l,r;</span><br><span class="line">    int rang;</span><br><span class="line">&#125;tree[manx&lt;&lt;2];</span><br><span class="line">void pushDown(ll i)</span><br><span class="line">&#123;</span><br><span class="line">    if(tree[i].rang)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[lson].rang=tree[rson].rang=tree[i].rang;</span><br><span class="line">        tree[i].rang=0;</span><br><span class="line">    &#125;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">void build_tree(ll i,ll l,ll r)</span><br><span class="line">&#123;</span><br><span class="line">    //cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    tree[i].l=l;</span><br><span class="line">    tree[i].r=r;</span><br><span class="line">    tree[i].rang=0;</span><br><span class="line">    if(l==r)</span><br><span class="line">        return ;</span><br><span class="line">    int mid=l+r&gt;&gt;1;</span><br><span class="line">    build_tree(lson,l,mid);</span><br><span class="line">    build_tree(rson,mid+1,r);</span><br><span class="line">&#125;</span><br><span class="line">void change(ll i,ll l,ll r,ll c)</span><br><span class="line">&#123;</span><br><span class="line">//cout&lt;&lt;c&lt;&lt;endl;</span><br><span class="line">    if(tree[i].l&gt;=l&amp;&amp;tree[i].r&lt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i].rang=c;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    int mid=tree[i].l+tree[i].r&gt;&gt;1;</span><br><span class="line">    if(l&lt;=mid ) change(lson,l,r,c);</span><br><span class="line">    if(r&gt;mid) change(rson,l,r,c);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">ll query(ll i)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">//cout&lt;&lt;tree[i].rang&lt;&lt;&apos; &apos;&lt;&lt;tree[i].l&lt;&lt;&apos; &apos;&lt;&lt;tree[i].r&lt;&lt;endl; </span><br><span class="line">if(tree[i].rang)</span><br><span class="line">    &#123;</span><br><span class="line">        ll x=tree[i].rang;</span><br><span class="line">        if(!vis[x])</span><br><span class="line">        &#123;</span><br><span class="line">            vis[x]=1;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    if(tree[i].l==tree[i].r)</span><br><span class="line">        return 0;</span><br><span class="line">    return query(lson)+query(rson);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while(t--)&#123;</span><br><span class="line">        ll q;</span><br><span class="line">        memset(vis,0,sizeof vis);</span><br><span class="line">        st.clear();</span><br><span class="line">        scanf(&quot;%lld&quot;, &amp;q);</span><br><span class="line">        for (int i = 1; i &lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%lld%lld&quot;, &amp;posi1[i], &amp;posi2[i]);</span><br><span class="line">            st.insert(posi1[i]);</span><br><span class="line">            st.insert(posi2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ll cnt=1;</span><br><span class="line">        for(set&lt;ll&gt;::iterator it=st.begin();it!=st.end();it++)</span><br><span class="line">        &#123;</span><br><span class="line">            id[*it]=cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        build_tree(1,1,cnt);</span><br><span class="line">        for(int i=1;i&lt;=q;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            change(1,id[posi1[i]],id[posi2[i]],i);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%lld\n&quot;,query(1));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj 3281 拆点</title>
      <link href="/2019/07/27/2019-07-27-poj-3281-%E6%8B%86%E7%82%B9/"/>
      <url>/2019/07/27/2019-07-27-poj-3281-%E6%8B%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="网络流最大流问题："><a href="#网络流最大流问题：" class="headerlink" title="网络流最大流问题："></a>网络流最大流问题：</h4><a id="more"></a><p><strong><em>很好的一道题，注释讲的很清楚，直接上代码</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">/* Auther :CaiCai</span><br><span class="line"> * poj 3281 网络流建图好题。</span><br><span class="line"> * 网络流入门，开始建图难在我们的源点和终点的建立，在接触几道网络流的题后大概有了一点建图概念。</span><br><span class="line"> * 这道题的建图难在拆点，如果不拆点跑出来的最大流应该是2，因为一头牛的流量承受了食物和饮料。（博主拙见）。</span><br><span class="line"> * 精髓就在这里，牛拆点，确保一头牛就选一套food和drink的搭配</span><br><span class="line"> * 加个源点和汇点。源点与食物、饮料和汇点的边容量都是1，表示每种食物和饮料只有一个。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;limits&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#define lowbit(x) ( x&amp;(-x) )</span><br><span class="line">#define pi 3.141592653589793</span><br><span class="line">#define e 2.718281828459045</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int INF=0x3f3f3f3f;</span><br><span class="line">const int maxN=205;</span><br><span class="line">int n, f, d;</span><br><span class="line">int tot;</span><br><span class="line">int r[maxN&lt;&lt;2][maxN&lt;&lt;2], flow[maxN&lt;&lt;2], pre[maxN&lt;&lt;2], food[maxN], drink[maxN];</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">    memset(r, 0, sizeof r);</span><br><span class="line">    tot = n * 2 + d + f + 1;</span><br><span class="line">    return ;</span><br><span class="line">&#125;</span><br><span class="line">int bfs(int st,int en)</span><br><span class="line">&#123;</span><br><span class="line">    memset(pre, -1, sizeof pre);</span><br><span class="line">    queue&lt;int&gt; q;</span><br><span class="line">    while(!q.empty()) q.pop();</span><br><span class="line">    pre[st] = 0;</span><br><span class="line">    flow[st]=INF;</span><br><span class="line">    q.push(st);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        int u = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        for (int i = 1; i &lt;= tot;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(r[u][i]&gt;0&amp;&amp;pre[i]==-1)</span><br><span class="line">            &#123;</span><br><span class="line">                flow[i] = min(r[u][i], flow[u]);</span><br><span class="line">                q.push(i);</span><br><span class="line">                pre[i] = u;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return pre[en] == -1 ? -1 : flow[en];</span><br><span class="line">&#125;</span><br><span class="line">int dfs(int st,int en)</span><br><span class="line">&#123;</span><br><span class="line">    int k;</span><br><span class="line">    int flowmax = 0;</span><br><span class="line">    while((k=bfs(st, en))!=-1)</span><br><span class="line">    &#123;</span><br><span class="line">        int par = en, last;</span><br><span class="line">        while(par!=st)</span><br><span class="line">        &#123;</span><br><span class="line">            last = pre[par];</span><br><span class="line">            r[last][par] -= k;</span><br><span class="line">            r[par][last] += k;</span><br><span class="line">            par = last;</span><br><span class="line">        &#125;</span><br><span class="line">        flowmax += k;</span><br><span class="line">    &#125;</span><br><span class="line">    return flowmax;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    while(~scanf(&quot;%d%d%d&quot;,&amp;n,&amp;f,&amp;d))</span><br><span class="line">    &#123;</span><br><span class="line">    init();</span><br><span class="line">    int F=0,D=0;</span><br><span class="line">        for (int i = 1; i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">        scanf(&quot;%d%d&quot;,&amp;F,&amp;D);</span><br><span class="line">            for (int j = 1; j &lt;= F;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;food[j]);</span><br><span class="line">                r[0][food[j]] = 1;</span><br><span class="line">                r[food[j]][f + i * 2 - 1] = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            for (int j = 1; j &lt;= D;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;, &amp;drink[j]);</span><br><span class="line">                r[f + i * 2][f + 2 * n + drink[j]] = 1;</span><br><span class="line">                r[f + 2 * n + drink[j]][tot] = 1;</span><br><span class="line">            &#125;</span><br><span class="line">            r[f + i * 2 - 1][f + i * 2] = 1;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;, dfs(0, tot));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU3974 dfs序建树+线段树区间修改</title>
      <link href="/2019/07/27/2019-07-27-HDU3974-dfs%E5%BA%8F%E5%BB%BA%E6%A0%91+%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9/"/>
      <url>/2019/07/27/2019-07-27-HDU3974-dfs%E5%BA%8F%E5%BB%BA%E6%A0%91+%E7%BA%BF%E6%AE%B5%E6%A0%91%E5%8C%BA%E9%97%B4%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p><strong><em>HDU3974线段树+dfs序建树</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int siz = 1e5 + 5;</span><br><span class="line">int id = 1;</span><br><span class="line">vector&lt;int&gt; G[siz];</span><br><span class="line">int ll[siz],rr[siz],vis[siz];</span><br><span class="line">struct tree</span><br><span class="line">&#123;</span><br><span class="line">    int l, r;</span><br><span class="line">    int date;</span><br><span class="line">&#125; tree[siz &lt;&lt; 2];</span><br><span class="line">void pushDown(int i)</span><br><span class="line">&#123;</span><br><span class="line">if(tree[i].date==-1) return ;</span><br><span class="line">    tree[i &lt;&lt; 1].date  = tree[i].date;</span><br><span class="line">    tree[i &lt;&lt; 1 | 1].date=tree[i].date;</span><br><span class="line">    tree[i].date = -1;</span><br><span class="line">&#125;</span><br><span class="line">void build_tree(int i,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">    tree[i].l = l;</span><br><span class="line">    tree[i].r = r;</span><br><span class="line">    tree[i].date = -1;</span><br><span class="line">    int mid = l + r &gt;&gt; 1;</span><br><span class="line">    if(l==r)</span><br><span class="line">        return;</span><br><span class="line">    build_tree(i &lt;&lt; 1, l, mid);</span><br><span class="line">    build_tree(i &lt;&lt; 1 | 1, mid + 1, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Change(int i,int L,int R,int p)&#123;</span><br><span class="line">    if(L&lt;=tree[i].l&amp;&amp;tree[i].r&lt;=R)&#123;</span><br><span class="line">        tree[i].date=p;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    int m=(tree[i].l+tree[i].r)&gt;&gt;1;</span><br><span class="line">    if(L&lt;=m)</span><br><span class="line">    Change(i&lt;&lt;1,L,R,p);</span><br><span class="line">    if(R&gt;m)</span><br><span class="line">    Change(i&lt;&lt;1|1,L,R,p);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">int query(int i,int index)&#123;</span><br><span class="line">    if(tree[i].l==tree[i].r)</span><br><span class="line">    return tree[i].date;</span><br><span class="line">    pushDown(i);</span><br><span class="line">    int m=(tree[i].l+tree[i].r)&gt;&gt;1;</span><br><span class="line">    if(index&lt;=m)</span><br><span class="line">    query(i&lt;&lt;1,index);</span><br><span class="line">    else</span><br><span class="line">    query(i&lt;&lt;1|1,index);</span><br><span class="line">&#125;</span><br><span class="line">void dfs(int s)&#123;</span><br><span class="line">    int i,tmp;</span><br><span class="line">    ll[s]=id++;</span><br><span class="line">    for(i=0;i&lt;G[s].size();i++)&#123;</span><br><span class="line">        tmp=G[s][i];</span><br><span class="line">        dfs(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    rr[s]=id++;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char ch;</span><br><span class="line">    int t,n,m,u,v,i,cas=1;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)&#123;                                </span><br><span class="line">        scanf(&quot;%d&quot;,&amp;n);                       </span><br><span class="line">        build_tree(1,1,2*n);</span><br><span class="line">        for(i=1;i&lt;=n;i++)</span><br><span class="line">        vis[i]=0,G[i].clear();</span><br><span class="line">        for(i=1;i&lt;n;i++)&#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;,&amp;u,&amp;v);</span><br><span class="line">            G[v].push_back(u);</span><br><span class="line">            vis[u]=1;</span><br><span class="line">        &#125;</span><br><span class="line">        memset(ll,-1,sizeof(ll));</span><br><span class="line">        memset(rr,-1,sizeof(rr));</span><br><span class="line">        id=1;</span><br><span class="line">        for(i=1;i&lt;=n;i++)                 </span><br><span class="line">        if(vis[i]==0)</span><br><span class="line">        dfs(i);</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">        printf(&quot;Case #%d:\n&quot;,cas++);</span><br><span class="line">        while(m--)&#123;</span><br><span class="line">            cin&gt;&gt;ch;</span><br><span class="line">            if(ch==&apos;C&apos;)&#123;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;u);                 </span><br><span class="line">                printf(&quot;%d\n&quot;,query(1,ll[u]));</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                scanf(&quot;%d%d&quot;,&amp;u,&amp;v);            </span><br><span class="line">                Change(1,ll[u],rr[u],v); </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU1540区间合并</title>
      <link href="/2019/07/26/2019-07-26-1540/"/>
      <url>/2019/07/26/2019-07-26-1540/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line">const int maxn = 50000+10;</span><br><span class="line"> </span><br><span class="line">int n,m;</span><br><span class="line">int s[maxn],top;//s为模拟栈</span><br><span class="line"> </span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int l,r;</span><br><span class="line">    int ls,rs,ms;//ls,左端最大连续区间，rs右端最大连续区间，ms区间内最大连续区间</span><br><span class="line">&#125; a[maxn&lt;&lt;2];</span><br><span class="line"> </span><br><span class="line">void init(int l,int r,int i)</span><br><span class="line">&#123;</span><br><span class="line">    a[i].l = l;</span><br><span class="line">    a[i].r = r;</span><br><span class="line">    a[i].ls = a[i].rs = a[i].ms = r-l+1;</span><br><span class="line">    if(l!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        int mid = (l+r)&gt;&gt;1;</span><br><span class="line">        init(l,mid,i*2);</span><br><span class="line">        init(mid+1,r,2*i+1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">void insert(int i,int t,int x)</span><br><span class="line">&#123;</span><br><span class="line">    if(a[i].l == a[i].r)</span><br><span class="line">    &#123;</span><br><span class="line">        if(x==1)</span><br><span class="line">            a[i].ls = a[i].rs = a[i].ms = 1;//修复</span><br><span class="line">        else</span><br><span class="line">            a[i].ls = a[i].rs = a[i].ms = 0;//破坏</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (a[i].l+a[i].r)&gt;&gt;1;</span><br><span class="line">    if(t&lt;=mid)</span><br><span class="line">        insert(2*i,t,x);</span><br><span class="line">    else</span><br><span class="line">        insert(2*i+1,t,x);</span><br><span class="line">    a[i].ls = a[2*i].ls;//左区间</span><br><span class="line">    a[i].rs = a[2*i+1].rs;//右区间</span><br><span class="line">    a[i].ms = max(max(a[2*i].ms,a[2*i+1].ms),a[2*i].rs+a[2*i+1].ls);//父亲区间内的最大区间必定是，左子树最大区间，右子树最大区间，左右子树合并的中间区间，三者中最大的区间值</span><br><span class="line">    if(a[2*i].ls == a[2*i].r-a[2*i].l+1)//左子树区间满了的话，父亲左区间要加上右孩子的左区间</span><br><span class="line">        a[i].ls += a[2*i+1].ls;</span><br><span class="line">    if(a[2*i+1].rs == a[2*i+1].r-a[2*i+1].l+1)//同理</span><br><span class="line">        a[i].rs += a[2*i].rs;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int query(int i,int t)</span><br><span class="line">&#123;</span><br><span class="line">    if(a[i].l == a[i].r || a[i].ms == 0 || a[i].ms == a[i].r-a[i].l+1)//到了叶子节点或者该访问区间为空或者已满都不必要往下走了</span><br><span class="line">        return a[i].ms;</span><br><span class="line">    int mid = (a[i].l+a[i].r)&gt;&gt;1;</span><br><span class="line">    if(t&lt;=mid)</span><br><span class="line">    &#123;</span><br><span class="line">        if(t&gt;=a[2*i].r-a[2*i].rs+1)//因为t&lt;=mid，看左子树，a[2*i].r-a[2*i].rs+1代表左子树右边连续区间的左边界值，如果t在左子树的右区间内，则要看右子树的左区间有多长并返回</span><br><span class="line">            return query(2*i,t)+query(2*i+1,mid+1);</span><br><span class="line">        else</span><br><span class="line">            return query(2*i,t);//如果不在左子树的右边界区间内，则只需要看左子树</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        if(t&lt;=a[2*i+1].l+a[2*i+1].ls-1)//同理</span><br><span class="line">            return query(2*i+1,t)+query(2*i,mid);</span><br><span class="line">        else</span><br><span class="line">            return query(2*i+1,t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,x;</span><br><span class="line">    char ch[2];</span><br><span class="line">    while(~scanf(&quot;%d%d&quot;,&amp;n,&amp;m))</span><br><span class="line">    &#123;</span><br><span class="line">        top = 0;</span><br><span class="line">        init(1,n,1);</span><br><span class="line">        while(m--)</span><br><span class="line">        &#123;</span><br><span class="line">            scanf(&quot;%s&quot;,ch);</span><br><span class="line">            if(ch[0] == &apos;D&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">                s[top++] = x;</span><br><span class="line">                insert(1,x,0);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(ch[0] == &apos;Q&apos;)</span><br><span class="line">            &#123;</span><br><span class="line">                scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">                printf(&quot;%d\n&quot;,query(1,x));</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                if(x&gt;0)</span><br><span class="line">                &#123;</span><br><span class="line">                    x = s[--top];</span><br><span class="line">                    insert(1,x,1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1698</title>
      <link href="/2019/07/23/2019-07-23-HDU-1698/"/>
      <url>/2019/07/23/2019-07-23-HDU-1698/</url>
      
        <content type="html"><![CDATA[<p><strong><em>线段树区间修改模板</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int manx=100005;</span><br><span class="line">struct tree</span><br><span class="line">&#123;</span><br><span class="line">int l,r;</span><br><span class="line">int lazy;</span><br><span class="line">long long sum;</span><br><span class="line">&#125;tree[manx&lt;&lt;2];</span><br><span class="line"></span><br><span class="line">void pushUp(int i)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].sum=tree[i&lt;&lt;1].sum+tree[i&lt;&lt;1|1].sum;</span><br><span class="line">&#125;</span><br><span class="line">void build_tree(int i,int l,int r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].l=l;</span><br><span class="line">tree[i].r=r;</span><br><span class="line">tree[i].lazy=0;</span><br><span class="line">if(l==r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].sum=1;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">int mid=(l+r)&gt;&gt;1;</span><br><span class="line">build_tree(i&lt;&lt;1,l,mid);</span><br><span class="line">build_tree(i&lt;&lt;1|1,mid+1,r);</span><br><span class="line">pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line">void pushDown(int i)</span><br><span class="line">&#123;</span><br><span class="line">if(tree[i].lazy)</span><br><span class="line">&#123;</span><br><span class="line">tree[i&lt;&lt;1].lazy=tree[i&lt;&lt;1|1].lazy=tree[i].lazy;</span><br><span class="line">int mid=(tree[i].l+tree[i].r)&gt;&gt;1;</span><br><span class="line">tree[i&lt;&lt;1].sum=(mid-tree[i].l+1)*tree[i].lazy;</span><br><span class="line">tree[i&lt;&lt;1|1].sum=(tree[i].r-mid)*tree[i].lazy;</span><br><span class="line">tree[i].lazy=0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">void upDate(int i,int l,int r,int c)</span><br><span class="line">&#123;</span><br><span class="line">if(tree[i].l==l&amp;&amp;tree[i].r==r)</span><br><span class="line">&#123;</span><br><span class="line">tree[i].lazy=c;</span><br><span class="line">tree[i].sum=(tree[i].r-tree[i].l+1)*c;</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br><span class="line">pushDown(i);</span><br><span class="line">int mid=(tree[i].l+tree[i].r)&gt;&gt;1;</span><br><span class="line">if(r&lt;=mid) upDate(i&lt;&lt;1,l,r,c);</span><br><span class="line">else if(l&gt;mid) upDate(i&lt;&lt;1|1,l,r,c);</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">upDate(i&lt;&lt;1,l,mid,c);</span><br><span class="line">upDate(i&lt;&lt;1|1,mid+1,r,c);</span><br><span class="line">&#125;</span><br><span class="line">pushUp(i);</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">int cnt=0;</span><br><span class="line">while(t--)&#123;</span><br><span class="line">cnt++;</span><br><span class="line">int n,q;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n,&amp;q);</span><br><span class="line">build_tree(1,1,n);</span><br><span class="line">while(q--)&#123;</span><br><span class="line">int x,y,z;</span><br><span class="line">scanf(&quot;%d%d%d&quot;,&amp;x,&amp;y,&amp;z);</span><br><span class="line">upDate(1,x,y,z);</span><br><span class="line">&#125;</span><br><span class="line">        printf(&quot;Case %d: The total value of the hook is %d.\n&quot;,cnt,tree[1].sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poj 3468</title>
      <link href="/2019/07/23/2019-07-23-poj-3468/"/>
      <url>/2019/07/23/2019-07-23-poj-3468/</url>
      
        <content type="html"><![CDATA[<p><strong><em>线段树区间求和+区间修改板子</em></strong></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define ll long long</span><br><span class="line">#define lson l, mid, rt &lt;&lt; 1</span><br><span class="line">#define rson mid + 1, r, rt &lt;&lt; 1 | 1</span><br><span class="line">using namespace std;</span><br><span class="line">const int MAXN = 1e5 + 10;</span><br><span class="line">struct tree</span><br><span class="line">&#123;</span><br><span class="line">int l,r;</span><br><span class="line">long long sum;</span><br><span class="line">long long Icm;</span><br><span class="line">&#125;tree[MAXN&lt;&lt;2];</span><br><span class="line"></span><br><span class="line">void push_up(int rt)&#123;//向上更新</span><br><span class="line">    tree[rt].sum = tree[rt &lt;&lt; 1].sum + tree[rt &lt;&lt; 1 | 1].sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void push_down(int rt, int m)&#123;</span><br><span class="line">    if(tree[rt].Icm)&#123;//若有标记,则将标记向下移动一层</span><br><span class="line">        tree[rt &lt;&lt; 1].Icm += tree[rt].Icm;</span><br><span class="line">        tree[rt &lt;&lt; 1 | 1].Icm += tree[rt].Icm;</span><br><span class="line">        tree[rt &lt;&lt; 1].sum += (m - (m &gt;&gt; 1)) * tree[rt].Icm;</span><br><span class="line">        tree[rt &lt;&lt; 1 | 1].sum += (m &gt;&gt; 1) * tree[rt].Icm;</span><br><span class="line">        tree[rt].Icm = 0;//取消本层标记</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void build(int l, int r, int rt)&#123;//建树</span><br><span class="line">    //cout&lt;&lt;rt&lt;&lt;endl;</span><br><span class="line">    tree[rt].l=l;</span><br><span class="line">    tree[rt].r=r;</span><br><span class="line">tree[rt].Icm = 0;</span><br><span class="line">    if(l == r)&#123;</span><br><span class="line">        scanf(&quot;%lld&quot;, &amp;tree[rt].sum);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">    build(l,mid,rt&lt;&lt;1);</span><br><span class="line">    build(mid+1,r,rt&lt;&lt;1|1);</span><br><span class="line">    push_up(rt);//向上更新</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(int L, int R, ll key,int rt)&#123;//区间更新</span><br><span class="line">    if(L == tree[rt].l &amp;&amp; R == tree[rt].r)&#123;</span><br><span class="line">        tree[rt].sum += (tree[rt].r - tree[rt].l + 1) * key;</span><br><span class="line">        tree[rt].Icm += key;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(rt, tree[rt].r - tree[rt].l + 1);//向下更新</span><br><span class="line">    int mid = (tree[rt].l + tree[rt].r) &gt;&gt; 1;</span><br><span class="line">    if(R &lt;= mid) update(L, R, key,rt&lt;&lt;1);</span><br><span class="line">    else if(L &gt; mid) update(L, R, key,rt&lt;&lt;1|1);</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    update(L,mid,key,rt&lt;&lt;1);</span><br><span class="line">    update(mid+1,R,key,rt&lt;&lt;1|1);</span><br><span class="line">&#125;</span><br><span class="line">    push_up(rt);//向上更新</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll query(int L, int R, int rt)&#123;//区间求和</span><br><span class="line">    //cout&lt;&lt;rt&lt;&lt;&apos; &apos;&lt;&lt;tree[rt].l&lt;&lt;&apos; &apos;&lt;&lt;tree[rt].r&lt;&lt;endl;;</span><br><span class="line">if(L == tree[rt].l &amp;&amp; tree[rt].r == R) return tree[rt].sum;</span><br><span class="line">    push_down(rt, tree[rt].r - tree[rt].l + 1);//向下更新</span><br><span class="line">    int mid = (tree[rt].l + tree[rt].r) &gt;&gt; 1;</span><br><span class="line">    ll ans = 0;</span><br><span class="line">    if(R &lt;= mid) ans += query(L, R, rt&lt;&lt;1);</span><br><span class="line">    else if(L &gt; mid) ans += query(L, R, rt&lt;&lt;1|1); </span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    ans+=query(L,mid,rt&lt;&lt;1)+query(mid+1,R,rt&lt;&lt;1|1);</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(void)&#123;</span><br><span class="line">    int n, m;</span><br><span class="line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</span><br><span class="line">    build(1, n, 1);</span><br><span class="line">    while(m--)&#123;</span><br><span class="line">        char str[3];</span><br><span class="line">        int x, y;</span><br><span class="line">        ll z;</span><br><span class="line">        scanf(&quot;%s&quot;, str);</span><br><span class="line">        if(str[0] == &apos;C&apos;)&#123;</span><br><span class="line">            scanf(&quot;%d%d%lld&quot;, &amp;x, &amp;y, &amp;z);</span><br><span class="line">            update(x, y, z, 1);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</span><br><span class="line">            printf(&quot;%lld\n&quot;, query(x, y, 1));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>574 Div2 A</title>
      <link href="/2019/07/19/2019-07-19-574-Div2-A/"/>
      <url>/2019/07/19/2019-07-19-574-Div2-A/</url>
      
        <content type="html"><![CDATA[<p>A. Drinks Choosing</p><p>time limit per test</p><p>2 seconds</p><p>memory limit per test</p><a id="more"></a><p>256 megabytes</p><p>input</p><p>standard input</p><p>output</p><p>standard output</p><p>Old timers of Summer Informatics School can remember previous camps in which each student was given a drink of his choice on the vechorka (late-evening meal). Or may be the story was more complicated?</p><p>There are nn students living in a building, and for each of them the favorite drink aiai is known. So you know nn integers a1,a2,…,ana1,a2,…,an, where aiai (1≤ai≤k1≤ai≤k) is the type of the favorite drink of the ii-th student. The drink types are numbered from 11 to kk.</p><p>There are infinite number of drink sets. Each set consists of <strong>exactly two</strong> portions of the same drink. In other words, there are kk types of drink sets, the jj-th type contains two portions of the drink jj. The available number of sets of each of the kk types is infinite.</p><p>You know that students will receive the minimum possible number of sets to give all students exactly one drink. Obviously, the number of sets will be exactly ⌈n2⌉⌈n2⌉, where ⌈x⌉⌈x⌉ is xx rounded up.</p><p>After students receive the sets, they will distribute their portions by their choice: each student will get exactly one portion. Note, that if nn is odd then one portion will remain unused and the students’ teacher will drink it.</p><p>What is the maximum number of students that can get their favorite drink if ⌈n2⌉⌈n2⌉ sets will be chosen optimally and students will distribute portions between themselves optimally?</p><p>Input</p><p>The first line of the input contains two integers nn and kk (1≤n,k≤10001≤n,k≤1000) — the number of students in the building and the number of different drinks.</p><p>The next nn lines contain student’s favorite drinks. The ii-th line contains a single integer from 11 to kk — the type of the favorite drink of the ii-th student.</p><p>Output</p><p>Print exactly one integer — the maximum number of students that can get a favorite drink.</p><p><strong><em>常规思维题没什么好说的。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int arr[1005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">arr[temp]++;</span><br><span class="line">&#125;</span><br><span class="line">int ji=0;</span><br><span class="line">for(int i=1;i&lt;=m;i++)</span><br><span class="line">if(arr[i]&amp;1)ji++;</span><br><span class="line">if(n&amp;1)ji--;</span><br><span class="line">cout&lt;&lt;n-ji/2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>573 Div2 D</title>
      <link href="/2019/07/15/2019-07-15-573-Div2-D/"/>
      <url>/2019/07/15/2019-07-15-573-Div2-D/</url>
      
        <content type="html"><![CDATA[<p>分析：1、若有类似“2 3 3 ”则后手胜，因为有这个序列就必须在这个序列中去石子（因为如果在这个序列以外取子，则会导致输的后者情况），但在这个序列中取不到可解情况，所以该状态为必败态；</p><a id="more"></a><p>　　　 2、若序列中有俩对相同的石子，则后手胜；</p><p>　　　3、除1、2情况外就把利用sum+起来，每个加就+a[i]-i   为了把他提到前面他不能再动的最优状态（因为俩者都采取最优策略！！！）</p><p><strong><em>第三种状态还没清楚暂时挂这里过后解决</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">#define ll long long</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int manx=100005;</span><br><span class="line">ll n, s[110000], cnt, s2c;</span><br><span class="line">bool tl;</span><br><span class="line">long long arr[manx];</span><br><span class="line">int main() &#123;</span><br><span class="line">cin.tie(0);</span><br><span class="line">ios::sync_with_stdio(false);</span><br><span class="line">for(int i=0;i&lt;110000;i++)</span><br><span class="line">s[i]=INF; </span><br><span class="line">//REP(i, 110000)s[i] = MINF;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">if (n == 1) &#123;</span><br><span class="line">ll a;</span><br><span class="line">cin &gt;&gt; a;</span><br><span class="line">cout &lt;&lt; (a % 2 == 0 ? &quot;cslnb&quot; : &quot;sjfnb&quot;) &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">//REP(i, n)cin &gt;&gt; s[i];</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">cin&gt;&gt;s[i];</span><br><span class="line">sort(s, s + n);</span><br><span class="line">//REP(i, n) &#123;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cnt += s[i] - i;</span><br><span class="line">if (s[i] == s[i + 1])s2c++;</span><br><span class="line">if (s[i] == 0 &amp;&amp; s[i + 1] == 0)tl = true;</span><br><span class="line">if (s[i] + 1 == s[i + 1] &amp;&amp; s[i + 1] == s[i + 2])tl = true;</span><br><span class="line">&#125;</span><br><span class="line">if (s2c &gt;= 2)tl = true;</span><br><span class="line">if (cnt % 2 == 0)tl = true;</span><br><span class="line">cout &lt;&lt; (tl ? &quot;cslnb&quot; : &quot;sjfnb&quot;) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>573 Div2 C</title>
      <link href="/2019/07/13/2019-07-13-573-Div2-C/"/>
      <url>/2019/07/13/2019-07-13-573-Div2-C/</url>
      
        <content type="html"><![CDATA[<p>C. Tokitsukaze and Discard Items</p><p>time limit per test</p><a id="more"></a><p>1 second</p><p>memory limit per test</p><p>256 megabytes</p><p>input</p><p>standard input</p><p>output</p><p>standard output</p><p>Recently, Tokitsukaze found an interesting game. Tokitsukaze had nn items at the beginning of this game. However, she thought there were too many items, so now she wants to discard mm (1≤m≤n1≤m≤n) special items of them.</p><p>These nn items are marked with indices from 11 to nn. In the beginning, the item with index ii is placed on the ii-th position. Items are divided into several pages orderly, such that each page contains exactly kk positions and the last positions on the last page may be left empty.</p><p>Tokitsukaze would do the following operation: focus on the first special page that contains at least one special item, and at one time, Tokitsukaze would discard all special items on this page. After an item is discarded or moved, its old position would be empty, and then the item below it, if exists, would move up to this empty position. The movement may bring many items forward and even into previous pages, so Tokitsukaze would keep waiting until all the items stop moving, and then do the operation (i.e. check the special page and discard the special items) repeatedly until there is no item need to be discarded.</p><p><img src="http://codeforces.com/predownloaded/6c/ff/6cff32bda5b74a2e511a4f00ef8590a4e1ac0b6f.png" alt="img">Consider the first example from the statement: n=10n=10, m=4m=4, k=5k=5, p=[3,5,7,10]p=[3,5,7,10]. The are two pages. Initially, the first page is <em>special</em> (since it is the first page containing a special item). So Tokitsukaze discards the special items with indices 33 and 55. After, the first page remains to be special. It contains [1,2,4,6,7][1,2,4,6,7], Tokitsukaze discards the special item with index 77. After, the second page is special (since it is the first page containing a special item). It contains [9,10][9,10], Tokitsukaze discards the special item with index 1010.</p><p>Tokitsukaze wants to know the number of operations she would do in total.</p><p>Input</p><p>The first line contains three integers nn, mm and kk (1≤n≤10181≤n≤1018, 1≤m≤1051≤m≤105, 1≤m,k≤n1≤m,k≤n) — the number of items, the number of special items to be discarded and the number of positions in each page.</p><p>The second line contains mm distinct integers p1,p2,…,pmp1,p2,…,pm (1≤p1&lt;p2&lt;…&lt;pm≤n1≤p1&lt;p2&lt;…&lt;pm≤n) — the indices of special items which should be discarded.</p><p><strong>思路：模拟题，直接按题意模拟就好了，每次找出需要动的第一页上的所有数，再将记录移动的计数器增加，重新找下一页，</strong></p><p><strong>注意找的时候位置要减去移动的计数器move。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int manx=100005;</span><br><span class="line">long long arr[manx];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">long long m,n,k;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n&gt;&gt;k;</span><br><span class="line">for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;arr[i];</span><br><span class="line">&#125;</span><br><span class="line">long long move=0;</span><br><span class="line">long long i=1,j=1;</span><br><span class="line">long ans=0;</span><br><span class="line">while(i&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">j=i;</span><br><span class="line">long long tag=(arr[i]-move-1)/k;//减1的目的是为了保证边缘也在这一页，比如k=5，如果不-1则5在下一页 </span><br><span class="line">while(((arr[j]-move-1)/k==tag)&amp;&amp;j&lt;=m)//找这一页第一个要删除的位置，并且和这个同一页的所有特殊数全部删掉。 </span><br><span class="line">j++;</span><br><span class="line">move+=j-i;</span><br><span class="line">ans++;</span><br><span class="line">i=j;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>572 Div2 C</title>
      <link href="/2019/07/13/2019-06-26-572-Div2-C/"/>
      <url>/2019/07/13/2019-06-26-572-Div2-C/</url>
      
        <content type="html"><![CDATA[<p>C. Candies!</p><p>time limit per test</p><p>2 seconds</p><a id="more"></a><p>memory limit per test</p><p>256 megabytes</p><p>input</p><p>standard input</p><p>output</p><p>standard output</p><p>Consider a sequence of digits of length 2k2k [a1,a2,…,a2k][a1,a2,…,a2k]. We perform the following operation with it: replace pairs (a2i+1,a2i+2)(a2i+1,a2i+2) with (a2i+1+a2i+2)mod10(a2i+1+a2i+2)mod10 for 0≤i&lt;2k−10≤i&lt;2k−1. For every ii where a2i+1+a2i+2≥10a2i+1+a2i+2≥10 we get a candy! As a result, we will get a sequence of length 2k−12k−1.</p><p>Less formally, we partition sequence of length 2k2k into 2k−12k−1 pairs, each consisting of 2 numbers: the first pair consists of the first and second numbers, the second of the third and fourth ……, the last pair consists of the (2k−12k−1)-th and (2k2k)-th numbers. For every pair such that sum of numbers in it is at least 1010, we get a candy. After that, we replace every pair of numbers with a remainder of the division of their sum by 1010 (and don’t change the order of the numbers).</p><p>Perform this operation with a resulting array until it becomes of length 11. Let f([a1,a2,…,a2k])f([a1,a2,…,a2k]) denote the number of candies we get in this process.</p><p>For example: if the starting sequence is [8,7,3,1,7,0,9,4][8,7,3,1,7,0,9,4] then:</p><p>After the first operation the sequence becomes [(8+7)mod10,(3+1)mod10,(7+0)mod10,(9+4)mod10][(8+7)mod10,(3+1)mod10,(7+0)mod10,(9+4)mod10] == [5,4,7,3][5,4,7,3], and we get 22 candies as 8+7≥108+7≥10 and 9+4≥109+4≥10.</p><p>After the second operation the sequence becomes [(5+4)mod10,(7+3)mod10][(5+4)mod10,(7+3)mod10] == [9,0][9,0], and we get one more candy as 7+3≥107+3≥10.</p><p>After the final operation sequence becomes [(9+0)mod10][(9+0)mod10] == [9][9].</p><p>Therefore, f([8,7,3,1,7,0,9,4])=3f([8,7,3,1,7,0,9,4])=3 as we got 33 candies in total.</p><p>You are given a sequence of digits of length nn s1,s2,…sns1,s2,…sn. You have to answer qq queries of the form (li,ri)(li,ri), where for ii-th query you have to output f([sli,sli+1,…,sri])f([sli,sli+1,…,sri]). It is guaranteed that ri−li+1ri−li+1 is of form 2k2k for some nonnegative integer kk.</p><p>Input</p><p>The first line contains a single integer nn (1≤n≤1051≤n≤105) — the length of the sequence.</p><p>The second line contains nn digits s1,s2,…,sns1,s2,…,sn (0≤si≤90≤si≤9).</p><p>The third line contains a single integer qq (1≤q≤1051≤q≤105) — the number of queries.</p><p>Each of the next qq lines contains two integers lili, riri (1≤li≤ri≤n1≤li≤ri≤n) — ii-th query. It is guaranteed that ri−li+1ri−li+1 is a nonnegative integer power of 22.</p><p>Output</p><p>Output qq lines, in ii-th line output single integer — f([sli,sli+1,…,sri])f([sli,sli+1,…,sri]), answer to the ii-th query.Examples</p><p>input</p><p>Copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">8 7 3 1 7 0 9 4</span><br><span class="line">3</span><br><span class="line">1 8</span><br><span class="line">2 5</span><br><span class="line">7 7</span><br></pre></td></tr></table></figure><p>output</p><p>Copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>input</p><p>Copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">0 1 2 3 3 5</span><br><span class="line">3</span><br><span class="line">1 2</span><br><span class="line">1 4</span><br><span class="line">3 6</span><br></pre></td></tr></table></figure><p>output</p><p>Copy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0</span><br><span class="line">0</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>Note</p><p>The first example illustrates an example from the statement.</p><p>f([7,3,1,7])=1f([7,3,1,7])=1: sequence of operations is [7,3,1,7]→[(7+3)mod10,(1+7)mod10][7,3,1,7]→[(7+3)mod10,(1+7)mod10] == [0,8][0,8] and one candy as 7+3≥107+3≥10 →→ [(0+8)mod10][(0+8)mod10] == [8][8], so we get only 11 candy.</p><p>f([9])=0f([9])=0 as we don’t perform operations with it.</p><p><strong><em>我的思路是直接除以10就完了</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int arr[100005];</span><br><span class="line">long sum[100005];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;arr[i];</span><br><span class="line">        sum[i]=sum[i-1]+arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    int temp;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    while(temp--)</span><br><span class="line">    &#123;</span><br><span class="line">        int a,b,ans;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        if(a!=b)</span><br><span class="line">        ans=sum[b]-sum[a-1];</span><br><span class="line">        else</span><br><span class="line">            ans=arr[a];</span><br><span class="line">        //cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;ans/10&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>附上大佬DP代码后面研究</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">#define N 500500</span><br><span class="line">using namespace std;</span><br><span class="line">int n,m,l,r,lg[N],mi[20],a[N],f[N][20],g[N][20];</span><br><span class="line">int main()&#123;</span><br><span class="line">//freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">lg[1]=0;mi[0]=1;</span><br><span class="line">for(int i=1;(1&lt;&lt;(i-1))&lt;=n;i++)&#123;</span><br><span class="line">lg[1&lt;&lt;i]=i;</span><br><span class="line">mi[i]=1&lt;&lt;i;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">g[i][0]=a[i];</span><br><span class="line">&#125;</span><br><span class="line">for(int j=1;mi[j]&lt;=n;j++)</span><br><span class="line">for(int i=1;i+mi[j]-1&lt;=n;i++)&#123;</span><br><span class="line">f[i][j]=f[i][j-1]+f[i+mi[j-1]][j-1]+(g[i][j-1]+g[i+mi[j-1]][j-1]&gt;=10);</span><br><span class="line">g[i][j]=(g[i][j-1]+g[i+mi[j-1]][j-1])%10;</span><br><span class="line">&#125;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">while(m--)&#123;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;l,&amp;r);</span><br><span class="line">printf(&quot;%d\n&quot;,f[l][lg[r-l+1]]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>572 Div2 B</title>
      <link href="/2019/07/13/2019-06-26-572-Div2-B/"/>
      <url>/2019/07/13/2019-06-26-572-Div2-B/</url>
      
        <content type="html"><![CDATA[<p>B. Number Circle</p><p>time limit per test</p><p>1 second</p><p>memory limit per test</p><a id="more"></a><p>256 megabytes</p><p>input</p><p>standard input</p><p>output</p><p>standard output</p><p>You are given nn numbers a1,a2,…,ana1,a2,…,an. Is it possible to arrange them in a circle in such a way that every number is <strong>strictly</strong> less than the sum of its neighbors?</p><p>For example, for the array [1,4,5,6,7,8][1,4,5,6,7,8], the arrangement on the left is valid, while arrangement on the right is not, as 5≥4+15≥4+1 and 8&gt;1+68&gt;1+6.</p><p><img src="http://codeforces.com/predownloaded/ec/d3/ecd3b7ae88a4bb2caafedbaef4d496d421f4cb77.png" alt="img"></p><p>Input</p><p>The first line contains a single integer nn (3≤n≤1053≤n≤105) — the number of numbers.</p><p>The second line contains nn integers a1,a2,…,ana1,a2,…,an (1≤ai≤1091≤ai≤109) — the numbers. The given numbers are not necessarily distinct (i.e. duplicates are allowed).</p><p>Output</p><p>If there is no solution, output “NO” in the first line.</p><p>If there is a solution, output “YES” in the first line. In the second line output nn numbers — elements of the array in the order they will stay in the circle. The first and the last element you output are considered neighbors in the circle. If there are multiple solutions, output any of them. You can print the circle starting with any element.</p><p><strong><em>思路：先排序，如果最大的比第二第三的和还要大，则不可能有方案，否则可以先把最大的放在第一个第二大的放在第二个，第三大的放在最后一个，最后中间以此填补。</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int arr[100005];</span><br><span class="line">int brr[100005];</span><br><span class="line">int cmp(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    return x&gt;y;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(arr+1,arr+1+n,cmp);</span><br><span class="line">    if(arr[1]&gt;=arr[2]+arr[3])</span><br><span class="line">        cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        brr[1]=arr[1];</span><br><span class="line">        cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">        for(int i=2,j=2,k=n;j&lt;=k;)</span><br><span class="line">        &#123;</span><br><span class="line">            //cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">            brr[j++]=arr[i++];</span><br><span class="line">            if(j&lt;=k)brr[k--]=arr[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=1;i&lt;=n;i++)</span><br><span class="line">        cout&lt;&lt;brr[i]&lt;&lt;&apos; &apos;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 2588 - GCD（欧拉函数）</title>
      <link href="/2019/07/10/2019-07-10-HDU-2588---GCD%EF%BC%88%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%EF%BC%89/"/>
      <url>/2019/07/10/2019-07-10-HDU-2588---GCD%EF%BC%88%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>GCD<br>Time Limit: 2000/1000 MS (Java/Others)    Memory Limit: 32768/32768 K (Java/Others)<br>Total Submission(s): 3358    Accepted Submission(s): 1802</p><p>Problem Description</p><p>The greatest common divisor GCD(a,b) of two positive integers a and b,sometimes written (a,b),is the largest divisor common to a and b,For example,(1,2)=1,(12,18)=6.<br>(a,b) can be easily found by the Euclidean algorithm. Now Carp is considering a little more difficult problem:<br>Given integers N and M, how many integer X satisfies 1&lt;=X&lt;=N and (X,N)&gt;=M.</p><p>Input</p><p>The first line of input is an integer T(T&lt;=100) representing the number of test cases. The following T lines each contains two numbers N and M (2&lt;=N&lt;=1000000000, 1&lt;=M&lt;=N), representing a test case.</p><p>Output</p><p>For each test case,output the answer on a single line.</p><p>Sample Input</p><p>3</p><p>1 1</p><p>10 2</p><p>10000 72</p><p>Sample Output</p><p>1</p><p>6</p><p>260</p><p>Source</p><p>ECJTU 2009 Spring Contest！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">ll T,n,m,res;</span><br><span class="line">ll phi(ll x)</span><br><span class="line">&#123;</span><br><span class="line">if(x==1)return 1;</span><br><span class="line">ll res=x; </span><br><span class="line">for(ll i=2;i*i&lt;=x;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(x%i==0)</span><br><span class="line">&#123;</span><br><span class="line">res-=res/i;</span><br><span class="line">while(x%i==0)x/=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(x&gt;1)res-=res/x;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line">while(T--)</span><br><span class="line">&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;res=0;</span><br><span class="line">for(ll i=1;i*i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(n%i)continue;</span><br><span class="line">if(i&gt;=m&amp;&amp;i*i!=n)res+=phi(n/i);</span><br><span class="line">if(n/i&gt;=m)res+=phi(i);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>为什么是欧拉函数像加？因为欧拉函数可以避免乘数（循环）的时候重复。为什么i^2！=n?因为如果没有这个那么后面两个if语句会执行两次。为什么是i&gt;m？因为我们第一个循环保证了i是m的因子所以gcd(m,i)=i。满足题意。因为gcd(m,i)&gt;=n,那么gcd(m,ki)&gt;=n所以我们只要找出有多少个k倍满足就行了，但是又不能算重复，所以乘以质因子倍就不会重复了。</em></strong></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论基础</title>
      <link href="/2019/07/09/2019-07-09-%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/07/09/2019-07-09-%E6%95%B0%E8%AE%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/ojzha/article/details/79269727" target="_blank" rel="noopener">https://blog.csdn.net/ojzha/article/details/79269727</a></p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单数论推论</title>
      <link href="/2019/07/08/2019-07-08-%E7%AE%80%E5%8D%95%E6%95%B0%E8%AE%BA%E6%8E%A8%E8%AE%BA/"/>
      <url>/2019/07/08/2019-07-08-%E7%AE%80%E5%8D%95%E6%95%B0%E8%AE%BA%E6%8E%A8%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Leading-and-Trailing"><a href="#Leading-and-Trailing" class="headerlink" title="Leading and Trailing"></a>Leading and Trailing</h1><p>You are given two integers: <strong>n</strong> and <strong>k</strong>, your task is to find the most significant three digits, and least significant three digits of<strong>nk</strong>.</p><a id="more"></a><p>Input</p><p>Input starts with an integer <strong>T (≤ 1000)</strong>, denoting the number of test cases.</p><p>Each case starts with a line containing two integers: <strong>n (2 ≤ n &lt; 231)</strong> and <strong>k (1 ≤ k ≤ 107)</strong>.</p><p>Output</p><p>For each case, print the case number and the three leading digits (most significant) and three trailing digits (least significant). You can assume that the input is given such that <strong>nk</strong> contains at least six digits.</p><p>Sample Input</p><p>5</p><p>123456 1</p><p>123456 2</p><p>2 31</p><p>2 32</p><p>29 8751919</p><p>Sample Output</p><p>Case 1: 123 456</p><p>Case 2: 152 936</p><p>Case 3: 214 648</p><p>Case 4: 429 296</p><p>Case 5: 665 669</p><p>题意是求出 n^k 的前3 个数 和 后3个数<br>刚开始看到的时候后三个数好求，可以快速幂取余得到<br>对于前三个数，需要利用到数学的变形<br><strong><em>首先，对于任意的一个数都可以转化成 10^x （x 为浮点数） = 10^a </em> 10^b (a,b 也是浮点数）的形式， <em><u>其中 10 ^ a 表示结果的位数，10^b 表示对应位的值。</u></em>所以可以先求到 x 的值，再求到 b 的值，求到 10^b ,即求到了该数对应位置的值（浮点数），再乘以系数，就能得到前3位的值；*</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int Q_pow(long long x,long long m)</span><br><span class="line">&#123;</span><br><span class="line">long long ans=1;</span><br><span class="line">while(m)</span><br><span class="line">&#123;</span><br><span class="line">if(m&amp;1) ans=(ans*x)%1000;</span><br><span class="line">x=(x*x)%1000;</span><br><span class="line">m&gt;&gt;=1;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">int t=1;</span><br><span class="line">while(n--)</span><br><span class="line">&#123;</span><br><span class="line">long long a,b;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">double tmp=(double)b*log10(a*1.0);</span><br><span class="line">tmp=tmp-(int)tmp;</span><br><span class="line">double ans1=pow(10.0,tmp);</span><br><span class="line">int result=(int)(ans1*100.0);</span><br><span class="line">int ans2=Q_pow(a,b);</span><br><span class="line">printf(&quot;Case %d: %d %03d\n&quot;,t++,result,ans2);</span><br><span class="line">//cout&lt;&lt;ans1&lt;&lt;&apos; &apos;&lt;&lt;ans2&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>欧拉函数&amp;欧拉筛选的应用</title>
      <link href="/2019/07/07/2019-07-07-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0&amp;%E6%AC%A7%E6%8B%89%E7%AD%9B%E9%80%89%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/07/07/2019-07-07-%E6%AC%A7%E6%8B%89%E5%87%BD%E6%95%B0&amp;%E6%AC%A7%E6%8B%89%E7%AD%9B%E9%80%89%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="A-Bi-shoe-and-Phi-shoe-欧拉函数打表"><a href="#A-Bi-shoe-and-Phi-shoe-欧拉函数打表" class="headerlink" title="A - Bi-shoe and Phi-shoe (欧拉函数打表)"></a><a href="https://www.cnblogs.com/nefu929831238/p/5734287.html" target="_blank" rel="noopener">A - Bi-shoe and Phi-shoe (欧拉函数打表)</a></h1><a id="more"></a><p>Description</p><p>Bamboo Pole-vault is a massively popular sport in Xzhiland. And Master Phi-shoe is a very popular coach for his success. He needs some bamboos for his students, so he asked his assistant Bi-Shoe to go to the market and buy them. Plenty of Bamboos of all possible integer lengths (yes!) are available in the market. According to Xzhila tradition,</p><p>Score of a bamboo = <strong>Φ (bamboo’s length)</strong></p><p>(Xzhilans are really fond of number theory). For your information, <strong>Φ (n)</strong> = numbers less than <strong>n</strong> which are relatively prime (having no common divisor other than 1) to <strong>n</strong>. So, score of a bamboo of length 9 is 6 as 1, 2, 4, 5, 7, 8 are relatively prime to 9.</p><p>The assistant Bi-shoe has to buy one bamboo for each student. As a twist, each pole-vault student of Phi-shoe has a lucky number. Bi-shoe wants to buy bamboos such that each of them gets a bamboo with a score greater than or equal to his/her lucky number. Bi-shoe wants to minimize the total amount of money spent for buying the bamboos. One unit of bamboo costs 1 Xukha. Help him.</p><p>Input</p><p>Input starts with an integer <strong>T (**</strong>≤ 100)**, denoting the number of test cases.</p><p>Each case starts with a line containing an integer <strong>n (1 ≤ n ≤ 10000)</strong> denoting the number of students of Phi-shoe. The next line contains <strong>n</strong> space separated integers denoting the lucky numbers for the students. Each lucky number will lie in the range <strong>[1, 106]</strong>.</p><p>Output</p><p>For each case, print the case number and the minimum possible money spent for buying the bamboos. See the samples for details.</p><p>Sample Input</p><p>3</p><p>5</p><p>1 2 3 4 5</p><p>6</p><p>10 11 12 13 14 15</p><p>2</p><p>1 1</p><p>Sample Output</p><p>Case 1: 22 Xukha</p><p>Case 2: 88 Xukha</p><p>Case 3: 4 Xukha</p><p><strong><em>题目大意就是给定N个数，让我们找出刚好比这个大的欧拉函数值F(N)对应的那个N,最后再求和就完事了，需要注意的是，每次循环的时候应该从幸运数开始循环，不然会T</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">#define maxN 1123456</span><br><span class="line">ll a[maxN];</span><br><span class="line">ll N;</span><br><span class="line">ll sum;</span><br><span class="line">void ola()</span><br><span class="line">&#123;</span><br><span class="line">for(int i=1;i&lt;maxN;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=i;</span><br><span class="line">&#125;</span><br><span class="line">for(int i=2;i&lt;maxN;i++)</span><br><span class="line">&#123;</span><br><span class="line">if(a[i]==i)</span><br><span class="line">&#123;</span><br><span class="line">for(int j=i;j&lt;maxN;j+=i)</span><br><span class="line">&#123;</span><br><span class="line">a[j]=a[j]/i*(i-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">ola();</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">int tmp=1;</span><br><span class="line">while(t--)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">long long sum=0;</span><br><span class="line">for(int i=0;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">int temp;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line">for(int j=temp+1;;j++)</span><br><span class="line">&#123;</span><br><span class="line">if(a[j]&gt;=temp)</span><br><span class="line">&#123;</span><br><span class="line">sum+=j;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">//cout&lt;&lt;sum&lt;&lt;endl;</span><br><span class="line">printf(&quot;Case %lld: %lld Xukha\n&quot;,tmp++,sum);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>费马小引理</title>
      <link href="/2019/07/07/2019-07-07-%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%BC%95%E7%90%86/"/>
      <url>/2019/07/07/2019-07-07-%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%BC%95%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>本来这些东西想用一天写完的，结果脱了几天，现在决定整理一下</p><p>费马小定理</p><a id="more"></a><pre><code>    对于费马小定理，我们知道‘+’、‘-’、‘*’的取模都比较的好处理，但是遇到‘/’的取模就比较繁琐了。</code></pre><p>公式：对于gcd(a, b)=1，也就是a,b互质的情况下，若b为素数（质数），则有a^(b-1)=1(mod b)。</p><p>特别的，可以推导出：由a^(b-1)=1(mod b)</p><pre><code>                    则有啊a^(b-2)=1/a(mod b)，即，a^(-1)=a^(b-2)%b</code></pre><p>欧拉函数</p><pre><code>欧拉函数：oula(n)表示小于n的且与与n互质的数的个数</code></pre><p>oula(n)=n<em>(1-1/p1)</em>(1-1/p2)<em>……</em>(1-1/pk)，其中，pi均为小于n且与n互质的数</p><h2 id="那么，就有欧拉的模版了："><a href="#那么，就有欧拉的模版了：" class="headerlink" title="那么，就有欧拉的模版了："></a>那么，就有欧拉的模版了：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ll oula(ll n)</span><br><span class="line">&#123;</span><br><span class="line">ll res=n;</span><br><span class="line">for(int i=2;i*i&lt;=n;i++)</span><br><span class="line">if(n%i==0)</span><br><span class="line">&#123;</span><br><span class="line">res=res/i*(i-1);</span><br><span class="line">while(n%i==0)n/i;</span><br><span class="line">&#125;</span><br><span class="line">return res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哥德巴赫猜想</title>
      <link href="/2019/07/07/2019-07-07-%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3/"/>
      <url>/2019/07/07/2019-07-07-%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>著名的哥德巴赫猜想是这样的。1.“任何一个大于二的偶数都可以分解成两个素数之和”。2.“任何一个大于5的奇数都可以分解成三个素数之和”。现在请你写两个函数验证一下这个著名的猜想。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>因子求和&amp;算术基本定理</title>
      <link href="/2019/07/07/2019-07-07-%E5%9B%A0%E5%AD%90%E6%B1%82%E5%92%8C&amp;%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/"/>
      <url>/2019/07/07/2019-07-07-%E5%9B%A0%E5%AD%90%E6%B1%82%E5%92%8C&amp;%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Sigma-Function-因子和"><a href="#Sigma-Function-因子和" class="headerlink" title="Sigma Function (因子和)"></a>Sigma Function (因子和)</h1><p>Sigma Function</p><a id="more"></a><p>Description</p><p>Sigma function is an interesting function in Number Theory. It is denoted by the Greek letter Sigma (σ). This function actually denotes the sum of all divisors of a number. For example σ(24) = 1+2+3+4+6+8+12+24=60. Sigma of small numbers is easy to find but for large numbers it is very difficult to find in a straight forward way. But mathematicians have discovered a formula to find sigma. If the prime power decomposition of an integer is</p><p>Then we can write,</p><p>For some n the value of σ(n) is odd and for others it is even. Given a value n, you will have to find how many integers from 1 to n have even value ofσ.</p><p>Input</p><p>Input starts with an integer T (≤ 100), denoting the number of test cases.</p><p>Each case starts with a line containing an integer n (1 ≤ n ≤ 1012).</p><p>Output</p><p>For each case, print the case number and the result.</p><p>Sample Input</p><p>4</p><p>3</p><p>10</p><p>100</p><p>1000</p><p>Sample Output</p><p>Case 1: 1</p><p>Case 2: 5</p><p>Case 3: 83</p><p>Case 4: 947</p><p><strong><em>题意：1~n (n:1~1012)中，因子和为偶数的有几个。</em></strong></p><p><strong><em>先附上超时代码，根据算术基本定理写的，不了解算术基本定理的，可以查上一篇博客</em></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=1e6+5;</span><br><span class="line"> </span><br><span class="line">bool vis[N];</span><br><span class="line">int prime[N],cnt;</span><br><span class="line">void is_prime()</span><br><span class="line">&#123;</span><br><span class="line">    cnt=0;</span><br><span class="line">    memset(vis,0,sizeof(vis));</span><br><span class="line">    for(int i=2;i&lt;N;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prime[cnt++]=i;</span><br><span class="line">            for(int j=i+i;j&lt;N;j+=i)</span><br><span class="line">                vis[j]=1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">bool is_even(long long n)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i=0;i&lt;cnt&amp;&amp;prime[i]*prime[i]&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        int count=0;</span><br><span class="line">        if(n%prime[i]==0)</span><br><span class="line">        &#123;</span><br><span class="line">            while(n%prime[i]==0)</span><br><span class="line">            &#123;</span><br><span class="line">                n/=prime[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(prime[i]&amp;1)</span><br><span class="line">            &#123;</span><br><span class="line">                if(count&amp;1)</span><br><span class="line">                    return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if(n&gt;1&amp;&amp;(n&amp;1))</span><br><span class="line">        return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t;</span><br><span class="line">    cin&gt;&gt;t;</span><br><span class="line">    is_prime();</span><br><span class="line">    for(int kase=1;kase&lt;=t;kase++)</span><br><span class="line">    &#123;</span><br><span class="line">        long long n;</span><br><span class="line">        cin&gt;&gt;n;</span><br><span class="line">        long long count=0;</span><br><span class="line">        for(long long i=1;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            if(is_even(i))</span><br><span class="line">                cout&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">                count++;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Case %d: %d\n&quot;,kase,count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><em>那我们该如何做这道题？</em></strong></p><p>—-》分析：来考虑F（x）为奇数的情况，给据题目中给我们的公式，如果F（x）为奇数，那么这个多项式里面的任何一项都必须是奇数，可以知道p = 2时，        p^e - 1肯定是奇数，如果p ！= 2，当且仅当e为偶数的时候，此项为奇数，证明如下：</p><p>　　原式变形为[ p^(e+1) -p + (p-1) ]/ (p-1) = p*(p^e-1)/(p-1) + 1；</p><p>　　所以p/(p-1) = 1 ，p^e一定是奇数（因为p是质数，质数肯定是奇数）,所以p^e-1为偶数，所以下划线式肯定是奇数，证明成立。</p><p>　　那么题目中的公式可以写成下面的形式：</p><p>　　2^k0 <em> 3^(2</em>k1) <em> 5^(2</em>k2) <em> … </em> pn^(2*kn);下划线式可以表达为num ^ 2;</p><p>　　又k0&gt;=0， 所以满足条件的解为num^2和2 * num^2;因为满足2的更高次幂也一定是2的倍数，不可重复计算。代码如下：</p><p>—》注意：这个题目不可以直接循环做，尽管题目中给的时间较长，但直接暴力仍然会超，这里直接计算，sqrt无法强制转换为LL，但是此题L也够了；</p><p>—》感悟：数论的题目特点就是代码超短，但思维量和证明超多的那种……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define L long</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int t,ca = 0;</span><br><span class="line">    long long n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%lld&quot;,&amp;n);</span><br><span class="line">        L ans = 0;</span><br><span class="line">        double tmp = n;</span><br><span class="line">        ans = L(sqrt(tmp)) + L(sqrt(tmp/2));</span><br><span class="line">        printf(&quot;Case %d: %ld\n&quot;,++ca,n-ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>除法分块</title>
      <link href="/2019/07/07/2019-07-08-%E9%99%A4%E6%B3%95%E5%88%86%E5%9D%97/"/>
      <url>/2019/07/07/2019-07-08-%E9%99%A4%E6%B3%95%E5%88%86%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="除法分块"><a href="#除法分块" class="headerlink" title="除法分块"></a>除法分块</h2><hr><blockquote><p>求以NN为被除数，在[0,N][0,N]的范围内，将所得的商向下取整相同的所有除数区间。</p><ul><li>N∈[0,109]</li></ul></blockquote><a id="more"></a><h3 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h3><hr><p>维护两个变量L,RL,R，代表当前除数区间为<strong>闭区间</strong>[L,R][L,R]，LL初始值为11。</p><p>然后在L≤NL≤N时循环进行下面的过程：</p><ul><li>设t=⌊NL⌋t=⌊NL⌋</li><li>当前答案区间的右端点R=⌊Nt⌋R=⌊Nt⌋</li><li>L=R+1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//经典模板：</span><br><span class="line">long long solve(int N)&#123;</span><br><span class="line">    int L= 1,R;</span><br><span class="line">    long long tot = 0;</span><br><span class="line">    while (L &lt;= N)&#123;</span><br><span class="line">        R = N / (N / L);  //求出右边的范围</span><br><span class="line">        tot += (N / L) * (R - L + 1); //求出商相同区间的值</span><br><span class="line">        L = R + 1; //区间往后移动1</span><br><span class="line">    &#125;</span><br><span class="line">    return tot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="附上模板题Light-OJ-1245"><a href="#附上模板题Light-OJ-1245" class="headerlink" title="附上模板题Light OJ 1245"></a>附上模板题Light OJ 1245</h3><p>题意：<br>求</p><script type="math/tex; mode=display">sum(n/i) i=[1,n];</script><p><strong>在使用除法分块后我们可以讲复杂度从n降为sqrt从而避免超时，这道题也有规律，可以枚举出来，会返现有循环节。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">long long solve(long long n)</span><br><span class="line">&#123;</span><br><span class="line">long long l=1,r;</span><br><span class="line">long long tot=0;</span><br><span class="line">while(l&lt;=n)</span><br><span class="line">&#123;</span><br><span class="line">//n/l就是这段区间的等分价;</span><br><span class="line">r=n/(n/l);</span><br><span class="line">tot+=(n/l)*(r-l+1);//等分价值乘区间总长度就是这段区间的贡献率 </span><br><span class="line">l=r+1; </span><br><span class="line">&#125;</span><br><span class="line">return tot;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int t;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">int cas=1;</span><br><span class="line">while(t--)</span><br><span class="line">&#123;</span><br><span class="line">long long m;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line">printf(&quot;Case %d: %lld\n&quot;,cas++,solve(m));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 除法分块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>除法分块模板&amp;洛谷</title>
      <link href="/2019/07/07/2019-07-07-%E9%99%A4%E6%B3%95%E5%88%86%E5%9D%97%E6%A8%A1%E6%9D%BF&amp;%E6%B4%9B%E8%B0%B7/"/>
      <url>/2019/07/07/2019-07-07-%E9%99%A4%E6%B3%95%E5%88%86%E5%9D%97%E6%A8%A1%E6%9D%BF&amp;%E6%B4%9B%E8%B0%B7/</url>
      
        <content type="html"><![CDATA[<p>余数求和（数学题）<br>题目描述<br>给出正整数n和k，计算G(n, k)=k mod 1 + k mod 2 + k mod 3 + … + k mod n的值，其中k mod i表示k除以i的余数。例如G(10, 5)=5 mod 1 + 5 mod 2 + 5 mod 3 + 5 mod 4 + 5 mod 5 …… + 5 mod 10=0+1+2+1+0+5+5+5+5+5=29</p><a id="more"></a><p>input </p><p>10 5</p><p>output</p><p>29</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">long long n, k;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">long long ans = n * k;</span><br><span class="line">for(long long l = 1, r; l &lt;= n; l = r+1) &#123;</span><br><span class="line">if(k / l == 0)//如果小于1则直接最后一段等于右端点区间</span><br><span class="line">r = n;</span><br><span class="line">else &#123;//不然就讨论右边端点的大小</span><br><span class="line">r = min(n, k/(k/l));</span><br><span class="line">&#125;</span><br><span class="line">ans -= (k/l)*(r-l+1)*(l+r) / 2;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 除法分块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>唯一分解定理&amp;算术基本定理</title>
      <link href="/2019/07/07/2019-07-07-%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/"/>
      <url>/2019/07/07/2019-07-07-%E7%AE%97%E6%9C%AF%E5%9F%BA%E6%9C%AC%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理"></a>算术基本定理</h3><a id="more"></a><p>（1）一个大于1的正整数N，如果它的标准分解式为：</p><p> <img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D124/sign=ae84eec8b4fd5266a32b38169f189799/f703738da97739129c546742fa198618367ae2a7.jpg" alt="img"> ，那么它的正因数个数为 <img src="https://gss1.bdstatic.com/9vo3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D238/sign=d7c6a19a9c510fb37c197094e133c893/b151f8198618367aebbf90fe2c738bd4b31ce5db.jpg" alt="img"></p><p>。</p><p>（2） 它的全体正因数之和为</p><p> <img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D550/sign=86d9618aab014c081d3b28a03a7a025b/f7246b600c3387448405c35f530fd9f9d62aa0d5.jpg" alt="img"> </p><p>。</p><p>当 <img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D84/sign=ce4fc786087b020808c932e562d9880c/7dd98d1001e939018176621d79ec54e736d19699.jpg" alt="img"> 时就称N为完全数。 是否存在奇完全数，是一个至今未解决之想。</p><p>（3） 利用算术基本定理可以重新定义整数a和b的最大公因子 <img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D32/sign=34ed99ba8026cffc6d2ab9b0b801aaef/3bf33a87e950352a45f4ca2b5143fbf2b2118b78.jpg" alt="img"> 和最小公倍数</p><p> <img src="https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D31/sign=bf653337ba99a9013f355d371d958d1b/7dd98d1001e93901816a621d79ec54e736d196ad.jpg" alt="img"> ， 并证明 <img src="https://gss3.bdstatic.com/7Po3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D117/sign=01a0c786087b020808c93be055d8f25f/6a600c338744ebf875ea8b1cdbf9d72a6059a77e.jpg" alt="img"> 。</p><p>（4）此外还可证明根号2是<a href="https://baike.baidu.com/item/无理数" target="_blank" rel="noopener">无理数</a>等等。</p><p>（5）证明<a href="https://baike.baidu.com/item/素数" target="_blank" rel="noopener">素数</a>个数无限。 </p><h1 id="LightOJ-1341-Aladdin-and-the-Flying-Carpet（算术基本定理-唯一分解定理）"><a href="#LightOJ-1341-Aladdin-and-the-Flying-Carpet（算术基本定理-唯一分解定理）" class="headerlink" title="LightOJ 1341 - Aladdin and the Flying Carpet（算术基本定理 唯一分解定理）"></a>LightOJ 1341 - Aladdin and the Flying Carpet（算术基本定理 唯一分解定理）</h1><p>题意：</p><p>给出整数 a 和 b ，求区间[b, a] 内的 a 的约数对的个数，即：满足c*d == a 且 c&gt;=b，d&gt;=b。a 的约数对（比如[2, 3] 与 [3, 2] 为同一对）。</p><p>题解：</p><p>先素数打表，然后利用基本算术定理1求出a（面积）以内的所有正因子个数，最后/2等于对数。最后因为要所有因子要大于b所以相减就是答案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define maxn 1000047</span><br><span class="line">#define LL long long</span><br><span class="line">LL p[maxn], prim[maxn];</span><br><span class="line">int k = 0;</span><br><span class="line">void find_prim()</span><br><span class="line">&#123;</span><br><span class="line">    k = 0;</span><br><span class="line">    for(LL i = 2; i &lt;= maxn; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(!p[i])</span><br><span class="line">        &#123;</span><br><span class="line">            prim[k++] = i;</span><br><span class="line">            for(LL j = i+i; j &lt;= maxn; j+=i)</span><br><span class="line">            &#123;</span><br><span class="line">                p[j] = 1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">LL cont(LL a)</span><br><span class="line">&#123;</span><br><span class="line">    LL s = 1;</span><br><span class="line">    if(a == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    LL tt = 0;</span><br><span class="line">    LL i = 0;</span><br><span class="line">    while(prim[i] &lt; a &amp;&amp; i &lt; k)</span><br><span class="line">    &#123;</span><br><span class="line">        tt = 0;</span><br><span class="line">        if(a%prim[i] == 0)</span><br><span class="line">        &#123;</span><br><span class="line">            while(a%prim[i] == 0)</span><br><span class="line">            &#123;</span><br><span class="line">                a/=prim[i];</span><br><span class="line">                tt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s *= tt+1;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    if(a &gt; 1)</span><br><span class="line">    &#123;</span><br><span class="line">        s *= 1+1;//一次</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    LL a, b;</span><br><span class="line">    int t;</span><br><span class="line">    int cas = 0;</span><br><span class="line">    find_prim();</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;t);</span><br><span class="line">    while(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%lld%lld&quot;,&amp;a,&amp;b);</span><br><span class="line">        int cnt = 0;</span><br><span class="line">        LL num = 0, ans;</span><br><span class="line">        if(b &gt;= sqrt(a))</span><br><span class="line">            ans = 0;        // b大小限定</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            for(LL i = 1; i &lt; b; i++) //暴力枚举[1, b]中a的约数</span><br><span class="line">            &#123;</span><br><span class="line">                if(a%i == 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            num = cont(a)/2;</span><br><span class="line">            ans = num - cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Case %d: %lld\n&quot;,++cas,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity中animator 和animation区别</title>
      <link href="/2019/06/27/2019-06-27-Unity%E4%B8%ADanimator-%E5%92%8Canimation%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/06/27/2019-06-27-Unity%E4%B8%ADanimator-%E5%92%8Canimation%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="Unity中animator-和animation区别"><a href="#Unity中animator-和animation区别" class="headerlink" title="Unity中animator 和animation区别"></a>Unity中animator 和animation区别</h2><p>此文章转载于极视学堂！！！！</p><p>①Animation和Animator 虽然都是控制动画的播放，但是它们的用法和相关语法都是大有不同的。</p><a id="more"></a><p>Animation 控制一个动画的播放，而Animator是多个动画之间相互切换，并且Animator 有一个动画控制器，俗称动画状态机。</p><p>②Animator 利用它做动画的切换是很方便的，但是它有一个缺点就是占用内存比Animation大。</p><p>好吧！下面直接通过操作，深入理解它们的用法。</p><p>（一） Animation模块</p><p>1.新建一个Unity3d 项目，在场景中新增一个TestAnimation对象，并且在对象上附加Animation组件；</p><p><img src="http://img.mp.itc.cn/upload/20161214/7096205c6c1e479fa03652cb11e5a4c0_th.jpeg" alt="img"></p><p>2.选中TestAnimation对象，按快捷键：ctrl+6 打开动画编辑器，新建test.anim 动画。</p><p><img src="http://img.mp.itc.cn/upload/20161214/a2ed180bfb944bca819480c27c1ce26e_th.jpeg" alt="img"></p><p>3.添加AnimationPlay.cs 播放类。</p><blockquote><p>using UnityEngine;</p><p>using System.Collections;</p><p>public class AnimationPlay : MonoBehaviour {</p><p>Animation _anim;</p><p>// Use this for initialization</p><p>void Start ()</p><p>{</p><p>_anim = GetComponent<animation>();</animation></p><p>if (_anim != null)</p><p>_anim.Play(“Test”);</p><p>}</p><p>}</p></blockquote><p><img src="http://img.mp.itc.cn/upload/20161214/436c33d8dd254e8ba4f502cdbf6516e3_th.jpeg" alt="img"></p><p>4.直接运行看效果哈！</p><p><img src="http://img.mp.itc.cn/upload/20161214/5d6412ec0c9c4d43b72d9bb184cf4163_th.jpeg" alt="img"></p><p><img src="http://img.mp.itc.cn/upload/20161214/7e485c20610e44d59df7a4278492c72d_th.jpeg" alt="img"></p><p>（二） Animator 模块</p><p>1.新建一个Unity3d 项目，在场景中新增一个TestAnimator对象，在Unity 编辑器中Window -&gt; Animation 弹出Animation 编辑页面，新建一个动画保存，命名为Move.anim；</p><p>同时我们发现因为使用方式是直接用动画控制器创建动画，它还会生成一个TestAnimation.controller文件，而这个文件就是我们所说的状态机控制器Controller。</p><p><img src="http://img.mp.itc.cn/upload/20161214/782c7b680aa144a5a2c736e7306a821e_th.jpeg" alt="img"></p><p><img src="http://img.mp.itc.cn/upload/20161214/f1fd26e528ef47b89b014dbbc86c20e1_th.jpeg" alt="img"></p><p>2.选中需要制作动画的对象TestAnimator，例如我需要改变对象的Position，然后在Add Property 上面添加。</p><p><img src="http://img.mp.itc.cn/upload/20161214/77044ae68d72404a993da310cb8d3498_th.jpeg" alt="img"></p><p><img src="http://img.mp.itc.cn/upload/20161214/cbd5ebd11be64273a8767609b176bc5f_th.jpeg" alt="img"></p><p>3.选中TestAnimation.controller这个文件，Window -&gt; Animator 打开Aniamtor 编辑器。</p><p><img src="http://img.mp.itc.cn/upload/20161214/49d1bdc7a7a842308c9abad1c8abe000_th.jpeg" alt="img"></p><p>4.需要增加一个largen.anim动画，可以让它们互相切换。</p><p><img src="http://img.mp.itc.cn/upload/20161214/a51f25a4032c4604a9b59da0c01735a0_th.jpeg" alt="img"></p><p>5.直接运行看效果。</p><p><img src="http://img.mp.itc.cn/upload/20161214/3f197b608c9e45d6a893e392d1c70874_th.jpeg" alt="img"></p><p><img src="http://img.mp.itc.cn/upload/20161214/c4e5811566294ed0b7f5fafb0385bcb7_th.jpeg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>unity3d中awake和start函数的理解。</title>
      <link href="/2019/06/26/2019-06-26-unity3d%E4%B8%ADawake%E5%92%8Cstart%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%E3%80%82/"/>
      <url>/2019/06/26/2019-06-26-unity3d%E4%B8%ADawake%E5%92%8Cstart%E5%87%BD%E6%95%B0%E7%9A%84%E7%90%86%E8%A7%A3%E3%80%82/</url>
      
        <content type="html"><![CDATA[<h1 id="unity3d中awake和start函数的理解。"><a href="#unity3d中awake和start函数的理解。" class="headerlink" title="unity3d中awake和start函数的理解。"></a>unity3d中awake和start函数的理解。</h1><p>1、  Awake函数</p><p>​        首先，我们来看unity的参考手册中对Awake函数的一些说明情况：</p><p>​        当脚本实例被加载时会调用Awake函数；Awake函数在所有的游戏对象被初始化完毕之后才会被调用；在脚本实例的整个生命周期中，Awake函数仅执行一次。那么，脚本实例何时被加载，脚本实例的整个生命周期又代表了什么，因为对这些概念存有疑惑，所以在此基础之上，自己又在引擎中进行了一些测试，通过打印输出的方式查看了一下Awake函数的执行情况，总结如下（没有特殊说明，均为在不切换场景的前提下）：</p><a id="more"></a><p>​       （1）      如果游戏对象（即gameObject）的初始状态为关闭状态，那么运行程序，Awake函数不会执行；反之，如果游戏对象的初始状态为开启状态，那么Awake函数会执行。并且，值得注意的一点是，Awake函数的执行与否与脚本实例的状态（启用或禁用）并没有关系，而是与脚本实例所绑定的游戏对象的状态有关。</p><p>​       （2）      在不切换场景的前提下，原本处于关闭状态的游戏对象，当它被首次开启时，Awake函数会执行，并且是只在首次开启时才会执行；而已经开启（激活）的游戏对象（Awake函数已经执行过一次），将它关闭后再次开启，Awake函数不会再次执行。看来这是对应了手册中说明的在脚本实例的整个生命周期中仅执行一次的情况。</p><p>​       （3）      如果重新加载场景，那么场景内Awake函数的执行情况重新遵循上述两点。</p><p>2、  Start函数</p><p>​        还是先看参考手册中对Start函数的一些说明情况：</p><p>​        当Update函数第一次被调用前会调用Start函数；Start函数只在脚本实例被启用时才会执行；Start函数总是在Awake函数之后执行。在此基础之上，自己的测试总结如下 （没有特殊说明，均为在不切换场景的前提下）：</p><p>​       （1）      如果游戏对象被关闭，那么Start函数不会执行。想一想这是理所当然的，游戏对象关闭了，脚本实例不会被加载，Awake函数不会执行，Start函数不会执行，Update函数等也不会执行。</p><p>​       （2）      如果游戏对象开启了，对象上绑定的脚本实例被禁用了，那么Start函数不会执行。这是Start函数的特点，只有在脚本实例被启用时它才会执行，这个说明中有提到。注意，这与Awake函数是有区别的。</p><p>​       （3）      如果游戏对象开启了，对象上绑定的脚本实例也开启了，那么Start函数会执行。并且Start函数只会在脚本实例首次被开启时才会执行。如果是已经开启过的脚本实例被关闭后再次开启，那么Start函数不会再次执行。</p><p>​       （4）      如果重新加载场景，那么场景内Start函数的执行情况重新遵循上述三点。</p><p>​        除此之外，还有对Awake函数和Start函数都比较重要的一点，那就是当游戏对象之间存在父子关系时（不论层级的多少）。这时，父游戏对象的状态（开启或关闭）完全决定了子游戏对象上的脚本函数的执行情况。总的来说就是，只有在父游戏对象被开启的状态下，程序才会考虑是否调用子游戏对象上的脚本函数（Awake与Start等）。自上而下，以此类推。</p><p>​        最后，自己对于Awake与Start函数的使用，一般都是在Awake函数中获取游戏对象或者脚本实例的信息，然后在Start函数中进行一些获取之后的初始化设置。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity常用函数和变量汇总</title>
      <link href="/2019/06/26/2019-06-26-Unity%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2019/06/26/2019-06-26-Unity%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E5%8F%98%E9%87%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="1，代码。"><a href="#1，代码。" class="headerlink" title="1，代码。"></a>1，代码。</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">float3 WorldSpaceViewDir(float4 v)  //输入一个模型空间中的顶点位置，返回世界空间中从该点到摄像机的观察方向</span><br><span class="line"> </span><br><span class="line">float3 ObjSpaceViewDir(float4 v)    //输入一个模型空间中的顶点位置，返回模型空间中从该点到摄像机的观察方向</span><br><span class="line"> </span><br><span class="line">float3 WorldSpaceLightDir(float4 v) //仅用于前向渲染中（ForwardBase）,输入一个模型空间中的顶点位置，返回世界空间中从该点到光源的光照方向，没有被归一化</span><br><span class="line"> </span><br><span class="line">float3 UnityWorldSpaceLightDir(float4 v)    //仅可用于前向渲染中，输入一个世界空间的顶点位置，返回世界空间从该点到光源的光照方向，没有被归一化</span><br><span class="line"> </span><br><span class="line">float3 ObjSpaceLightDir(float4 v)   //仅用于前向渲染中（ForwardBase）,输入一个模型空间中的顶点位置，返回模型空间中从该点到光源的光照方向，没有被归一化</span><br><span class="line"> </span><br><span class="line">float3 UnityObjectToWorldNormal(float3 norm)    //把法线从模型空间转换到世界空间中</span><br><span class="line"> </span><br><span class="line">float3 UnityObjectToWorldDir(in float3 dir) //把方向矢量从模型空间转换到世界空间中</span><br><span class="line"> </span><br><span class="line">float3 UnityWorldToObjectDir(float3 dir)    //把方向矢量从世界空间转换到模型空间中</span><br><span class="line"> </span><br><span class="line">float3 Shade4PointLights(...)   //仅可用于前向渲染中，计算四个点光源的光照，它的参数是已经打包进矢量的光照数据。前向渲染通常会使用这个函数来计算逐顶点光照</span><br></pre></td></tr></table></figure><h3 id="2，语义。"><a href="#2，语义。" class="headerlink" title="2，语义。"></a>2，语义。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POSITION    //模型空间中的顶点位置，通常是float4类型</span><br><span class="line"> </span><br><span class="line">NORMAL  //顶点法线，通常是float3类型</span><br><span class="line"> </span><br><span class="line">TANGENT //顶点法线，通常是float4类型</span><br><span class="line"> </span><br><span class="line">TEXCOORDn   //该顶点的纹理坐标，TEXCOORD0表示第一组纹理坐标，…,通常是float2或float4类型</span><br><span class="line"> </span><br><span class="line">COLOR   //顶点颜色，通常是fixed4或float4类型</span><br><span class="line"> </span><br><span class="line">SV_POSITION //裁剪空间中的顶点坐标，结构体中必须包含一个用该语义修饰的变量。等同于DirectX9中的</span><br><span class="line">POSITION，但是最好是使用SV_POSITION</span><br><span class="line"> </span><br><span class="line">COLOR0  //输出第一组顶点颜色</span><br><span class="line"> </span><br><span class="line">COLOR1  //输出第二组顶点颜色</span><br><span class="line"> </span><br><span class="line">TEXCOORD0~TEXCOORD7    //输出纹理坐标</span><br><span class="line"> </span><br><span class="line">SV_Target   //输出值将会存储到渲染目标（render target）中</span><br></pre></td></tr></table></figure><h3 id="3，变量。"><a href="#3，变量。" class="headerlink" title="3，变量。"></a>3，变量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">UNITY_MATRIX_MVP    //当前的模型*观察*投影矩阵，用于将顶点/方向矢量从模型空间转换到裁剪空间</span><br><span class="line"> </span><br><span class="line">UNITY_MATRIX_MV //当前的模型*观察矩阵，用于将顶点/方向矢量从模型空间转换到观察空间</span><br><span class="line"> </span><br><span class="line">UNITY_MATRIX_V  //当前的观察矩阵，用于将顶点/方向矢量从世界空间转换到观察空间</span><br><span class="line"> </span><br><span class="line">UNITY_MATRIX_P  //当前的投影矩阵，用于将顶点/方向矢量从观察空间转换到裁剪空间</span><br><span class="line"> </span><br><span class="line">UNITY_MATRIX_VP //当前的观察*投影矩阵，用于将顶点/方向矢量从世界空间转换到裁剪空间</span><br><span class="line"> </span><br><span class="line">UNITY_MATRIX_T_MV   //UNITY_MATRIX_MV的转置矩阵</span><br><span class="line"> </span><br><span class="line">UNITY_MATRIX_IT_MV  //UNITY_MATRIX_MV的逆转置矩阵，用于将发现从模型空间转换到观察空间，也可以用于得到UNITY_MATRIX_MV的逆矩阵</span><br><span class="line"> </span><br><span class="line">unity_ObjectToWorld(_Object2World)  //当前的模型矩阵，用于将顶点/方向矢量从模型空间变换到世界空间</span><br><span class="line"> </span><br><span class="line">unity_WorldToObject(_World2Object)  //用于将顶点/方向矢量从世界空间转换到模型空间</span><br></pre></td></tr></table></figure><h3 id="4，摄像机和屏幕参数。"><a href="#4，摄像机和屏幕参数。" class="headerlink" title="4，摄像机和屏幕参数。"></a>4，摄像机和屏幕参数。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">float3  _WorldSpaceCameraPos  //该摄像机在世界空间中的位置</span><br><span class="line"> </span><br><span class="line">float4  _ProjectionParams    //x=1.0(或-1.0，如果正在使用一个翻转的投影矩阵进行渲染)，y=Near,z=Far,w=1.0+1.0/Far,其中Near和Far分别是近裁剪平面和远裁剪平面到摄像机的距离</span><br><span class="line"> </span><br><span class="line">float4  _ScreenParams   //x=width,y=height,z=1.0+1.0/width,w=1.0+1.0/height,其中width和height分别是该摄像机的渲染目标（render target）的像素宽度和高度</span><br><span class="line"> </span><br><span class="line">float4  _ZBufferParams  //x=1-Far/Near,y=Far/Near,z=x/Far,w=y/Far,该变量用于线性化Z缓存中的深度值</span><br><span class="line"> </span><br><span class="line">float4  unity_OrthoParams   //x=width,y=height,z没有定义,w=1.0(该摄像机是正交摄像机)或w=0.0（该摄像机是透视摄像机），其中width和height是正交投影摄像机的宽度和高度</span><br><span class="line"> </span><br><span class="line">float4x4  unity_CameraProjection    //该摄像机的投影矩阵</span><br><span class="line"> </span><br><span class="line">float4x4  unity_CameraInvProjection  //该摄像机的投影矩阵的逆矩阵</span><br><span class="line"> </span><br><span class="line">float4  unity_CameraWorldClipPlanes[6]   //该摄像机的6个裁剪平面在世界空间下的等式，按左、右、下、上、近、远裁剪平面</span><br></pre></td></tr></table></figure><h3 id="5-内置的光照变量。"><a href="#5-内置的光照变量。" class="headerlink" title="5,内置的光照变量。"></a>5,内置的光照变量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_LightColor0    float4  //该Pass处理的逐像素光源的颜色</span><br><span class="line"> </span><br><span class="line">_WorldSpaceLightPos0    float4  //_WorldSpaceLightPos0.xyz是该Pass处理的逐像素光源的位置。如果该光源是平行光，那么_WorldSpaceLightPos0.w是0，其他光源类型是1</span><br><span class="line"> </span><br><span class="line">_LightMatrix0   float4x4    //从世界空间到光源空间的变换矩阵，可以用于采样cookie和光强衰减纹理</span><br><span class="line"> </span><br><span class="line">unity_4LightPosX0,unity_4LightPosY0,unity_4LightPosZ0   float4  //仅用于Base Pass,前4个非重要的点光源在世界空间中的位置</span><br><span class="line"> </span><br><span class="line">unity_4LightAtten() float4  //仅用于Base Pass， 存储了前4个非重要的点光源的衰减因子</span><br><span class="line"> </span><br><span class="line">unity_LightColor    half4[4]    //仅用于Base Pass，存储了前4个非重要的点光源的颜色</span><br></pre></td></tr></table></figure><h3 id="6，LightMode标签支持的渲染路径设置选项。"><a href="#6，LightMode标签支持的渲染路径设置选项。" class="headerlink" title="6，LightMode标签支持的渲染路径设置选项。"></a>6，LightMode标签支持的渲染路径设置选项。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Always  //不管使用哪种渲染路径，该Pass总会被渲染，但是不会计算任何光照</span><br><span class="line">ForwardBase //用于前向渲染，该Pass会计算环境光，最重要的的平行光，逐顶点/SH光源和Lightmaps</span><br><span class="line">ForwardAdd  //用于前向渲染，该Pass会计算额外的逐像素光源，每个Pass对应一个光源</span><br><span class="line">Deferred    //用于延迟渲染，该Pass会渲染G缓冲（G_buffer）</span><br><span class="line">ShadowCaster    //把物体的深度信息渲染到阴影映射纹理或一张深度纹理中</span><br><span class="line">PrepassBase //用于遗留延迟渲染，该Pass会渲染法线和高光反射的指数部分</span><br><span class="line">PrepassFinal    //用于遗留延迟渲染，该Pass通过合并纹理、光照、自发光来渲染得到的最后的颜色</span><br><span class="line">Vertex,VertexLMRGBM和VertexLM    //用于遗留的顶点照明渲染</span><br></pre></td></tr></table></figure><h3 id="7，顶点照明渲染路径中可以使用的内置变量。"><a href="#7，顶点照明渲染路径中可以使用的内置变量。" class="headerlink" title="7，顶点照明渲染路径中可以使用的内置变量。"></a>7，顶点照明渲染路径中可以使用的内置变量。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">unity_LightColor    half4[8]     //光源颜色</span><br><span class="line"> </span><br><span class="line">unity_LightPosition float4[8]   //xyz分量是视角空间中的光源位置，如果光源是平行光，那么z分量值为0，其他光源类型z分量值为1</span><br><span class="line"> </span><br><span class="line">unity_LightAtten    half4[8]    //光源衰减因子，如果光源是聚光灯，x分量是cos(spotAngle/2),y分量是1/cos(spotAngle/4);如果是其他光源，x分量是-1，y分量是1，z分量是衰减的平分，w分量是光源范围开根号的结果</span><br><span class="line"> </span><br><span class="line">unity_SpotDirection float4[8]   //如果光源是聚光灯的话，值为视角空间的聚光灯的位置，如果是其他类型的光源，值为（0,0,1,0）</span><br></pre></td></tr></table></figure><h3 id="8，顶点照明渲染路径中可以使用的内置函数。"><a href="#8，顶点照明渲染路径中可以使用的内置函数。" class="headerlink" title="8，顶点照明渲染路径中可以使用的内置函数。"></a>8，顶点照明渲染路径中可以使用的内置函数。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">float3 ShadeVertexLights(float4 vertex,float normal)     //输入模型空间中的顶点位置和法线，计算四个顶点光源的光照以及环境光</span><br><span class="line"> </span><br><span class="line">float3 ShadeVertexLightsFull(float4 vertex, float3 normal, int lightCount, bool spotLight)  //输入模型空间中的顶点位置和法线，计算lightCount个光源的光照以及环境光，如果SpotLight值为true，那么这些光源会被当成聚光灯来处理，虽然结果更精确，但计算更加耗时，否则，按点光源处理</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity中的一些鼠标事件</title>
      <link href="/2019/06/26/2019-06-26-Unity%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/"/>
      <url>/2019/06/26/2019-06-26-Unity%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity中的一些鼠标事件"><a href="#Unity中的一些鼠标事件" class="headerlink" title="Unity中的一些鼠标事件"></a>Unity中的一些鼠标事件</h1><p> 由于项目需求，需要使用鼠标点击来实现滑动事件，查看官方文档对Input.GetMouseButton部分进行了了解。</p><a id="more"></a><p>  GetMouseButton:每一帧鼠标处于按下状态都会返回true,Input.GetMouseButton(0):表示鼠标左键按下，Input.GetMouseButton(1):表示鼠标右键按下，Input.GetMouseButton(2):表示鼠标中键按下</p><p>  GetMouseButtonDown:鼠标按下的那一帧返回true,Input.GetMouseButtonDown(0):表示鼠标左键按下，Input.GetMouseButtonDown(1):表示鼠标右键按下，Input.GetMouseButtonDown(2):表示鼠标中键按下</p><p>  GetMouseButtonUp:鼠标抬起的那一帧返回true,Input.GetMouseButtonUp(0):表示鼠标左键按下，Input.GetMouseButtonUp(1):表示鼠标右键按下，Input.GetMouseButtonUp(2):表示鼠标中键按下</p><p> 鼠标按下和抬起的位置可以通过Input.mousePosition来获取，不过该参数返回的是屏幕坐标位置，即以左下角为原点的坐标系。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU 1757 A Simple Math Problem（矩阵快速幂）</title>
      <link href="/2019/06/26/2019-06-26-HDU-1757-A-Simple-Math-Problem%EF%BC%88%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/"/>
      <url>/2019/06/26/2019-06-26-HDU-1757-A-Simple-Math-Problem%EF%BC%88%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Problem Description<br>Lele now is thinking about a simple function f(x).</p><a id="more"></a><p>If x &lt; 10 f(x) = x.<br>If x &gt;= 10 f(x) = a0 <em> f(x-1) + a1 </em> f(x-2) + a2 <em> f(x-3) + …… + a9 </em> f(x-10);<br>And ai(0&lt;=i&lt;=9) can only be 0 or 1 .</p><p>Now, I will give a0 ~ a9 and two positive integers k and m ,and could you help Lele to caculate f(k)%m.</p><p>Input<br>The problem contains mutiple test cases.Please process to the end of file.<br>In each case, there will be two lines.<br>In the first line , there are two positive integers k and m. ( k&lt;2*10^9 , m &lt; 10^5 )<br>In the second line , there are ten integers represent a0 ~ a9.</p><p>Output<br>For each case, output f(k) % m in one line.</p><p>Sample Input<br>10 9999</p><p>1 1 1 1 1 1 1 1 1 1</p><p>20 500</p><p>1 0 1 0 1 0 1 0 1 0</p><p>Sample Output<br>45</p><p><strong>第一次做矩阵快速幂的题，在矩阵快速幂中，我觉得重要的三个 初始化矩阵就是单位矩阵，初始化矩阵，系数矩阵。考这三个矩阵以及递推式来可以从f(1)推出任意f(n)</strong></p><p>题目关键是要构造关系矩阵。<br>f(x)           a0  a1 a2 a3 a4 … a9            f(x-1)</p><p>f(x-1)       1   0  0  0  …            0              f(x-2) </p><p>f(x-2)   =   0 1 0 0                             *      f(x-3)</p><p>..               0 0 1 0                                        ..  </p><p>f(x-9)        0 0 0 …       1                            f(x-10)    </p><p><img src="/.com//caicaihexo\source\_posts\20140222175739078" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">ll k, mod;</span><br><span class="line">struct Maxtri&#123;</span><br><span class="line">int a[15][15];</span><br><span class="line">&#125;;</span><br><span class="line">Maxtri unit, init;</span><br><span class="line">void Creat_Maxtri() &#123;//构造矩阵</span><br><span class="line">memset(init.a, 0, sizeof(init.a));</span><br><span class="line">for(int i = 1; i &lt; 10; i++) &#123;</span><br><span class="line">init.a[i][i-1] = 1;</span><br><span class="line">&#125;</span><br><span class="line">memset(unit.a, 0, sizeof(unit.a));</span><br><span class="line">for(int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">unit.a[i][i] = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Maxtri Multi(Maxtri a, Maxtri b) &#123;//矩阵相乘</span><br><span class="line">Maxtri c;</span><br><span class="line">for(int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">for(int j = 0; j &lt; 10; j++) &#123;</span><br><span class="line">c.a[i][j] = 0;</span><br><span class="line">for(int k = 0; k &lt; 10; k++) &#123;</span><br><span class="line">c.a[i][j] += (a.a[i][k] * b.a[k][j]) % mod;</span><br><span class="line">c.a[i][j] %= mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return c;</span><br><span class="line">&#125;</span><br><span class="line">Maxtri Fast_Pow(Maxtri a, Maxtri b, int x) &#123; //快速乘</span><br><span class="line">while(x) &#123;</span><br><span class="line">if(x&amp;1) &#123;</span><br><span class="line">b = Multi(a, b);</span><br><span class="line">&#125;</span><br><span class="line">a = Multi(a, a);</span><br><span class="line">x &gt;&gt;= 1;</span><br><span class="line">&#125;</span><br><span class="line">return b;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">while(scanf(&quot;%lld %lld&quot;, &amp;k, &amp;mod) != EOF) &#123;</span><br><span class="line">Creat_Maxtri();</span><br><span class="line">for(int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;init.a[0][i]);</span><br><span class="line">&#125;</span><br><span class="line">if(k &lt; 10) &#123;</span><br><span class="line">printf(&quot;%d\n&quot;, k%mod);</span><br><span class="line">continue;</span><br><span class="line">&#125;</span><br><span class="line">Maxtri res = Fast_Pow(init, unit, k-9);</span><br><span class="line">ll ans = 0;</span><br><span class="line">for(int i = 0; i &lt; 10; i++) &#123;</span><br><span class="line">ans += (res.a[0][i] * (9-i))%mod;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%lld\n&quot;, ans%mod);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity如何导入资源</title>
      <link href="/2019/06/23/Unity%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E8%B5%84%E6%BA%90%E3%80%82/"/>
      <url>/2019/06/23/Unity%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E8%B5%84%E6%BA%90%E3%80%82/</url>
      
        <content type="html"><![CDATA[<h1 id="Unity如何导入资源。"><a href="#Unity如何导入资源。" class="headerlink" title="Unity如何导入资源。"></a>Unity如何导入资源。</h1><p>要用自己的素材，可以把素材装在一个文件夹里然后放在Assets的文件夹下面噢，再来unity里读取。</p><a id="more"></a><p><img src="/.com//caicaihexo\source\_posts\Unity如何导入资源。.assets\1347731-20180319155539996-316236425-1561299062493.png" alt></p><p>就是这个东西啦，右键Assets，选择Import Package 。</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ropewalkers</title>
      <link href="/2019/06/21/Ropewalkers/"/>
      <url>/2019/06/21/Ropewalkers/</url>
      
        <content type="html"><![CDATA[<h2 id="Ropewalkers"><a href="#Ropewalkers" class="headerlink" title="Ropewalkers"></a>Ropewalkers</h2><p>Polycarp decided to relax on his weekend and visited to the performance of famous ropewalkers: Agafon, Boniface and Konrad.</p><a id="more"></a><p>The rope is straight and infinite in both directions. At the beginning of the performance, Agafon, Boniface and Konrad are located in positions aa, bb and cc respectively. At the end of the performance, the distance between each pair of ropewalkers was <strong>at least</strong> dd.</p><p>Ropewalkers can walk on the rope. In one second, only one ropewalker can change his position. Every ropewalker can change his position exactly by 11 (i. e. shift by 11 to the left or right direction on the rope). Agafon, Boniface and Konrad <strong>can not</strong> move at the same time (<strong>Only one of them can move at each moment</strong>). Ropewalkers can be at the same positions at the same time and can “walk past each other”.</p><p>You should find the minimum duration (in seconds) of the performance. In other words, find the minimum number of seconds needed so that the distance between each pair of ropewalkers can be greater or equal to dd.</p><p>Ropewalkers can walk to negative coordinates, due to the rope is infinite to both sides.</p><p>Input</p><p>The only line of the input contains four integers aa, bb, cc, dd (1≤a,b,c,d≤1091≤a,b,c,d≤109). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.</p><p>Output</p><p>Output one integer — the minimum duration (in seconds) of the performance.</p><p>``</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> a, b, c, d;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d;</span><br><span class="line">  <span class="keyword">int</span> x[]=&#123;a,b,c&#125;;</span><br><span class="line">  sort(x,x+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;max(<span class="number">0</span>,d-<span class="built_in">abs</span>(x[<span class="number">0</span>]-x[<span class="number">1</span>]))+max(<span class="number">0</span>,d-<span class="built_in">abs</span>(x[<span class="number">1</span>]-x[<span class="number">2</span>]))&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Email from Polycarp</title>
      <link href="/2019/06/21/Exam%20in%20BerSU%20(easy%20version)/"/>
      <url>/2019/06/21/Exam%20in%20BerSU%20(easy%20version)/</url>
      
        <content type="html"><![CDATA[<h2 id="Exam-in-BerSU-easy-version"><a href="#Exam-in-BerSU-easy-version" class="headerlink" title="Exam in BerSU (easy version)"></a>Exam in BerSU (easy version)</h2><p><strong>The only difference between easy and hard versions is constraints.</strong></p><p>A session has begun at Beland State University. Many students are taking exams.</p><a id="more"></a><p>Polygraph Poligrafovich is going to examine a group of nn students. Students will take the exam one-by-one in order from 11-th to nn-th. Rules of the exam are following:</p><ul><li>The ii-th student randomly chooses a ticket.</li><li>if this ticket is too hard to the student, he doesn’t answer and goes home immediately (this process is so fast that it’s considered no time elapses). This student fails the exam.</li><li>if the student finds the ticket easy, he spends exactly titi minutes to pass the exam. After it, he immediately gets a mark and goes home.</li></ul><p>Students take the exam in the fixed order, one-by-one, without any interruption. At any moment of time, Polygraph Poligrafovich takes the answer from one student.</p><p>The duration of the whole exam for all students is MM minutes (maxti≤Mmaxti≤M), so students at the end of the list have a greater possibility to run out of time to pass the exam.</p><p>For each student ii, you should count the minimum possible number of students who need to fail the exam so the ii-th student has enough time to <strong>pass</strong> the exam.</p><p>For each student ii, find the answer independently. That is, if when finding the answer for the student i1i1 some student jj should leave, then while finding the answer for i2i2 (i2&gt;i1i2&gt;i1) the student jj student does not have to go home.</p><p>Input</p><p>The first line of the input contains two integers nn and MM (1≤n≤1001≤n≤100, 1≤M≤1001≤M≤100) — the number of students and the total duration of the exam in minutes, respectively.</p><p>The second line of the input contains nn integers titi (1≤ti≤1001≤ti≤100) — time in minutes that ii-th student spends to answer to a ticket.</p><p>It’s guaranteed that all values of titi are not greater than MM.</p><p>Output</p><p>Print nn numbers: the ii-th number must be equal to the minimum number of students who have to leave the exam in order to ii-th student has enough time to pass the exam.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>题目中要求剪掉的数目最少，即每次减少人腾出的时间更多，并且ti&lt;=100，所以我们很容易想到从大到小的进行贪心。然后后每次利用桶来进行每个时间对应的人数的维护就好了。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N=2e5+7;</span><br><span class="line">int n,m,a[N],s[N],num[102];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    scanf(&quot;%d%d&quot;,&amp;n,&amp;m);</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">s[i]=s[i-1]+a[i];</span><br><span class="line">&#125;</span><br><span class="line">    for(int i=1;i&lt;=n;i++)</span><br><span class="line">    if(s[i]&lt;=m)printf(&quot;0 &quot;),num[a[i]]++;</span><br><span class="line">    else&#123;</span><br><span class="line">        int rest=s[i]-m,ans=0;</span><br><span class="line">        for(int j=100;j;j--)</span><br><span class="line">        &#123;</span><br><span class="line">if(j*num[j]&lt;rest)</span><br><span class="line">rest-=j*num[j],ans+=num[j];</span><br><span class="line">        else&#123;ans+=(rest+j-1)/j;break;&#125;</span><br><span class="line">        //这一步理解有点困难，其实小伙伴可以画一条数轴就明白了。</span><br><span class="line">        printf(&quot;%d &quot;,ans);</span><br><span class="line">        num[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Email from Polycarp</title>
      <link href="/2019/06/21/Email%20from%20Polycarp/"/>
      <url>/2019/06/21/Email%20from%20Polycarp/</url>
      
        <content type="html"><![CDATA[<h2 id="Email-from-Polycarp"><a href="#Email-from-Polycarp" class="headerlink" title="Email from Polycarp"></a>Email from Polycarp</h2><p>Methodius received an email from his friend Polycarp. However, Polycarp’s keyboard is broken, so pressing a key on it once may cause the corresponding symbol to appear more than once (if you press a </p><a id="more"></a><p>key on a regular keyboard, it prints exactly one symbol).</p><p>For example, as a result of typing the word “hello”, the following words <strong>could</strong> be printed: “hello”, “hhhhello”, “hheeeellllooo”, but the following <strong>could not</strong> be printed: “hell”, “helo”, “hhllllooo”.</p><p>Note, that when you press a key, the corresponding symbol must appear (possibly, more than once). The keyboard is broken in a random manner, it means that pressing the same key you can get the different number of letters in the result.</p><p>For each word in the letter, Methodius has guessed what word Polycarp actually wanted to write, but he is not sure about it, so he asks you to help him.</p><p>You are given a list of pairs of words. For each pair, determine if the second word could be printed by typing the first one on Polycarp’s keyboard.</p><p>Input</p><p>The first line of the input contains one integer nn (1≤n≤1051≤n≤105) — the number of pairs to check. Further input contains nn descriptions of pairs.</p><p>The first line of each description contains a single non-empty word ss consisting of lowercase Latin letters. The second line of the description contains a single non-empty word tt consisting of lowercase Latin letters. The lengths of both strings are not greater than 106106.</p><p>It is guaranteed that the total length of all words ss in the input is not greater than 106106. Also, it is guaranteed that the total length of all words tt in the input is not greater than 106106.</p><p>Output</p><p>Output nn lines. In the ii-th line for the ii-th pair of words ss and tt print YES if the word tt could be printed by typing the word ss. Otherwise, print NO.</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h2><p><strong>主串中出现字母的顺序必须在父串中按照相同顺序出现，并且出现的次数必须大于等于父串中字母出现的顺序。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int maxn = 1e6 +50;</span><br><span class="line">string a,b;</span><br><span class="line">int Next[maxn];</span><br><span class="line">int m,n;</span><br><span class="line">bool su;</span><br><span class="line">void fun(string a,string b)</span><br><span class="line">&#123;</span><br><span class="line">    int i=0,j=0;</span><br><span class="line">    int ii=0,jj=0;</span><br><span class="line">    while(i&lt;a.size()&amp;&amp;j&lt;b.size())</span><br><span class="line">    &#123;</span><br><span class="line">        ii=i;</span><br><span class="line">        jj=j;</span><br><span class="line">        while(ii&lt;a.size()&amp;&amp;a[i]==a[ii])ii++;</span><br><span class="line">        while(jj&lt;b.size()&amp;&amp;b[j]==b[jj])jj++;</span><br><span class="line">        if(a[i]!=b[j])su=0;</span><br><span class="line">        if(abs(ii-i)&gt;abs(jj-j))su=0;</span><br><span class="line">        i=ii;</span><br><span class="line">        j=jj;</span><br><span class="line">    &#125;</span><br><span class="line">    if(i!=a.size()||j!=b.size())</span><br><span class="line">        su=0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    while(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        su=1;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        fun(a,b);</span><br><span class="line">        if(su==1)</span><br><span class="line">            cout&lt;&lt;&quot;YES&quot;&lt;&lt;endl;</span><br><span class="line">        else</span><br><span class="line">            cout&lt;&lt;&quot;NO&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> codeforces </category>
          
      </categories>
      
      
        <tags>
            
            <tag> codeforces </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>起点</title>
      <link href="/2019/06/17/ACM%E6%AD%A3%E5%BC%8F%E5%90%AF%E7%A8%8B/"/>
      <url>/2019/06/17/ACM%E6%AD%A3%E5%BC%8F%E5%90%AF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="ACM正式启程"><a href="#ACM正式启程" class="headerlink" title="ACM正式启程"></a>ACM正式启程</h1><p>经过大一的ACM淘汰赛后终于正式留下来了，由小白变成入门一路过来很不容易，感谢大一 一学年学长的栽培，马上要迎来大学的第一个暑假，杭电集训如期而至，海量的算法，希望在今后剩余的ACM生涯里可以和我的两位队友摘得区域赛金牌，打破计科无金的历史。</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
